{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, withKeys, withModifiers, withDirectives, createElementVNode, vModelRadio, normalizeStyle, renderSlot, createTextVNode, toDisplayString } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { useRadio } from './radio.mjs';\nimport { radioButtonProps } from './radio-button.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElRadioButton\",\n  props: radioButtonProps,\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"radio\");\n    const {\n      radioRef,\n      isGroup,\n      focus,\n      size,\n      disabled,\n      tabIndex,\n      modelValue,\n      radioGroup\n    } = useRadio(props, emit);\n    const activeStyle = computed(() => {\n      return {\n        backgroundColor: (radioGroup == null ? void 0 : radioGroup.fill) || \"\",\n        borderColor: (radioGroup == null ? void 0 : radioGroup.fill) || \"\",\n        boxShadow: (radioGroup == null ? void 0 : radioGroup.fill) ? `-1px 0 0 0 ${radioGroup.fill}` : \"\",\n        color: (radioGroup == null ? void 0 : radioGroup.textColor) || \"\"\n      };\n    });\n    return {\n      ns,\n      isGroup,\n      size,\n      disabled,\n      tabIndex,\n      modelValue,\n      focus,\n      activeStyle,\n      radioRef\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-checked\", \"aria-disabled\", \"tabindex\"];\nconst _hoisted_2 = [\"value\", \"name\", \"disabled\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"label\", {\n    class: normalizeClass([_ctx.ns.b(\"button\"), _ctx.ns.is(\"active\", _ctx.modelValue === _ctx.label), _ctx.ns.is(\"disabled\", _ctx.disabled), _ctx.ns.is(\"focus\", _ctx.focus), _ctx.ns.bm(\"button\", _ctx.size)]),\n    role: \"radio\",\n    \"aria-checked\": _ctx.modelValue === _ctx.label,\n    \"aria-disabled\": _ctx.disabled,\n    tabindex: _ctx.tabIndex,\n    onKeydown: _cache[4] || (_cache[4] = withKeys(withModifiers($event => _ctx.modelValue = _ctx.disabled ? _ctx.modelValue : _ctx.label, [\"stop\", \"prevent\"]), [\"space\"]))\n  }, [withDirectives(createElementVNode(\"input\", {\n    ref: \"radioRef\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.modelValue = $event),\n    class: normalizeClass(_ctx.ns.be(\"button\", \"original-radio\")),\n    value: _ctx.label,\n    type: \"radio\",\n    name: _ctx.name,\n    disabled: _ctx.disabled,\n    tabindex: \"-1\",\n    onFocus: _cache[1] || (_cache[1] = $event => _ctx.focus = true),\n    onBlur: _cache[2] || (_cache[2] = $event => _ctx.focus = false)\n  }, null, 42, _hoisted_2), [[vModelRadio, _ctx.modelValue]]), createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.be(\"button\", \"inner\")),\n    style: normalizeStyle(_ctx.modelValue === _ctx.label ? _ctx.activeStyle : {}),\n    onKeydown: _cache[3] || (_cache[3] = withModifiers(() => {}, [\"stop\"]))\n  }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(_ctx.label), 1)])], 38)], 42, _hoisted_1);\n}\nvar RadioButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { RadioButton as default };","map":{"version":3,"mappings":";;;;;;AA6CA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,KAAO;EAEPC,MAAMD,KAAO;IAAEE;EAAQ;IACrB,MAAMC,KAAKC,YAAa;IAClB;MACJC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IAAA,IACEC,SAASb,KAAO;IAEd,oBAAcc,SAAwB,MAAM;MACzC;QACLC,iBAAiB,eAAoB;QACrCC,aAAa,eAAoB;QACjCC,SAAW,iBAAmB,+BAAkC;QAChEC,OAAO,eAAyB;MAAA;IAAA;IAI7B;MACLf;MACAG;MACAE;MACAC;MACAC;MACAC;MACAJ;MACAY;MACAd;IAAA;EAAA;AAAA;;;;sBA/EJe,kBAmCQ;IAlCLC,KAAK,kBAAUC,QAAGC,CAAC,YAAkBD,QAAGE,EAAE,WAAWF,IAAe,6BAAcA,QAAGE,GAAE,UAAa,kBAAiBF,QAAGE,GAAE,OAAU,eAAcF,QAAGG,GAAE,QAAW;IAOnKC,IAAK;IACJ,gBAAcJ,IAAe;IAC7B,eAAe;IACfK,QAAU;IACVC,SAAO,6DAAqBN,IAAa,8BAAWA,kBAAaA,IAAK;EAAA,mBAEvEO,kBAWE;IAVAC,GAAI;IAAA,2DACKR,IAAU;IAClBD,OAAKU,cAAE,SAAGC,EAAE;IACZC,KAAO;IACRC,IAAK;IACJnC,IAAM;IACNU,QAAU;IACXkB,QAAS;IACRQ,SAAKC,oCAAEd,IAAK;IACZe,QAAID,oCAAEd,IAAK;EAAA,2BARH,kCAUXO,kBAQO;IAPJR,OAAKU,cAAE,SAAGC,EAAE;IACZM,KAAK,iBAAEhB,IAAe,6BAAQA,IAAW;IACzCM,WAAOQ,MAAR,0CAAa;EAAA,IAEbG,WAEOjB,4BAFP,MAEO,iCADFA,IAAK","names":["_sfc_main","defineComponent","name","props","setup","emit","ns","useNamespace","radioRef","isGroup","focus","size","disabled","tabIndex","modelValue","radioGroup","useRadio","computed","backgroundColor","borderColor","boxShadow","color","activeStyle","_createElementBlock","class","_ctx","b","is","bm","role","tabindex","onKeydown","_createElementVNode","ref","_normalizeClass","be","value","type","onFocus","_cache","onBlur","style","_renderSlot"],"sources":["../../../../../../packages/components/radio/src/radio-button.vue"],"sourcesContent":["<template>\n  <label\n    :class=\"[\n      ns.b('button'),\n      ns.is('active', modelValue === label),\n      ns.is('disabled', disabled),\n      ns.is('focus', focus),\n      ns.bm('button', size),\n    ]\"\n    role=\"radio\"\n    :aria-checked=\"modelValue === label\"\n    :aria-disabled=\"disabled\"\n    :tabindex=\"tabIndex\"\n    @keydown.space.stop.prevent=\"modelValue = disabled ? modelValue : label\"\n  >\n    <input\n      ref=\"radioRef\"\n      v-model=\"modelValue\"\n      :class=\"ns.be('button', 'original-radio')\"\n      :value=\"label\"\n      type=\"radio\"\n      :name=\"name\"\n      :disabled=\"disabled\"\n      tabindex=\"-1\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\"\n    />\n    <span\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"modelValue === label ? activeStyle : {}\"\n      @keydown.stop\n    >\n      <slot>\n        {{ label }}\n      </slot>\n    </span>\n  </label>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useRadio } from './radio'\nimport { radioButtonProps } from './radio-button'\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElRadioButton',\n  props: radioButtonProps,\n\n  setup(props, { emit }) {\n    const ns = useNamespace('radio')\n    const {\n      radioRef,\n      isGroup,\n      focus,\n      size,\n      disabled,\n      tabIndex,\n      modelValue,\n      radioGroup,\n    } = useRadio(props, emit)\n\n    const activeStyle = computed<CSSProperties>(() => {\n      return {\n        backgroundColor: radioGroup?.fill || '',\n        borderColor: radioGroup?.fill || '',\n        boxShadow: radioGroup?.fill ? `-1px 0 0 0 ${radioGroup.fill}` : '',\n        color: radioGroup?.textColor || '',\n      }\n    })\n\n    return {\n      ns,\n      isGroup,\n      size,\n      disabled,\n      tabIndex,\n      modelValue,\n      focus,\n      activeStyle,\n      radioRef,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}