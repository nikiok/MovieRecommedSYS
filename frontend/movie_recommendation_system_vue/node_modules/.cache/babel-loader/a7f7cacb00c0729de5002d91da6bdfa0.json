{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, Fragment, renderList, toDisplayString, createCommentVNode, createElementVNode, renderSlot } from 'vue';\nimport dayjs from 'dayjs';\nimport localeData from 'dayjs/plugin/localeData';\nimport '../../../hooks/index.mjs';\nimport '../../time-picker/index.mjs';\nimport { dateTableProps, dateTableEmits } from './date-table.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rangeArr } from '../../time-picker/src/common/date-utils.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\ndayjs.extend(localeData);\nconst WEEK_DAYS = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\nconst getPrevMonthLastDays = (date, count) => {\n  const lastDay = date.subtract(1, \"month\").endOf(\"month\").date();\n  return rangeArr(count).map((_, index) => lastDay - (count - index - 1));\n};\nconst getMonthDays = date => {\n  const days = date.daysInMonth();\n  return rangeArr(days).map((_, index) => index + 1);\n};\nconst toNestedArr = days => rangeArr(days.length / 7).map(index => {\n  const start = index * 7;\n  return days.slice(start, start + 7);\n});\nconst _sfc_main = defineComponent({\n  props: dateTableProps,\n  emits: dateTableEmits,\n  setup(props, {\n    emit\n  }) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const nsTable = useNamespace(\"calendar-table\");\n    const nsDay = useNamespace(\"calendar-day\");\n    const now = dayjs().locale(lang.value);\n    const firstDayOfWeek = now.$locale().weekStart || 0;\n    const isInRange = computed(() => !!props.range && !!props.range.length);\n    const rows = computed(() => {\n      let days = [];\n      if (isInRange.value) {\n        const [start, end] = props.range;\n        const currentMonthRange = rangeArr(end.date() - start.date() + 1).map(index => ({\n          text: start.date() + index,\n          type: \"current\"\n        }));\n        let remaining = currentMonthRange.length % 7;\n        remaining = remaining === 0 ? 0 : 7 - remaining;\n        const nextMonthRange = rangeArr(remaining).map((_, index) => ({\n          text: index + 1,\n          type: \"next\"\n        }));\n        days = currentMonthRange.concat(nextMonthRange);\n      } else {\n        const firstDay = props.date.startOf(\"month\").day() || 7;\n        const prevMonthDays = getPrevMonthLastDays(props.date, firstDay - firstDayOfWeek).map(day => ({\n          text: day,\n          type: \"prev\"\n        }));\n        const currentMonthDays = getMonthDays(props.date).map(day => ({\n          text: day,\n          type: \"current\"\n        }));\n        days = [...prevMonthDays, ...currentMonthDays];\n        const nextMonthDays = rangeArr(42 - days.length).map((_, index) => ({\n          text: index + 1,\n          type: \"next\"\n        }));\n        days = days.concat(nextMonthDays);\n      }\n      return toNestedArr(days);\n    });\n    const weekDays = computed(() => {\n      const start = firstDayOfWeek;\n      if (start === 0) {\n        return WEEK_DAYS.map(_ => t(`el.datepicker.weeks.${_}`));\n      } else {\n        return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start)).map(_ => t(`el.datepicker.weeks.${_}`));\n      }\n    });\n    const getFormattedDate = (day, type) => {\n      switch (type) {\n        case \"prev\":\n          return props.date.startOf(\"month\").subtract(1, \"month\").date(day);\n        case \"next\":\n          return props.date.startOf(\"month\").add(1, \"month\").date(day);\n        case \"current\":\n          return props.date.date(day);\n      }\n    };\n    const getCellClass = ({\n      text,\n      type\n    }) => {\n      const classes = [type];\n      if (type === \"current\") {\n        const date = getFormattedDate(text, type);\n        if (date.isSame(props.selectedDay, \"day\")) {\n          classes.push(nsDay.is(\"selected\"));\n        }\n        if (date.isSame(now, \"day\")) {\n          classes.push(nsDay.is(\"today\"));\n        }\n      }\n      return classes;\n    };\n    const handlePickDay = ({\n      text,\n      type\n    }) => {\n      const date = getFormattedDate(text, type);\n      emit(\"pick\", date);\n    };\n    const getSlotData = ({\n      text,\n      type\n    }) => {\n      const day = getFormattedDate(text, type);\n      return {\n        isSelected: day.isSame(props.selectedDay),\n        type: `${type}-month`,\n        day: day.format(\"YYYY-MM-DD\"),\n        date: day.toDate()\n      };\n    };\n    return {\n      isInRange,\n      weekDays,\n      rows,\n      getCellClass,\n      handlePickDay,\n      getSlotData,\n      nsTable,\n      nsDay\n    };\n  }\n});\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"table\", {\n    class: normalizeClass([_ctx.nsTable.b(), _ctx.nsTable.is(\"range\", _ctx.isInRange)]),\n    cellspacing: \"0\",\n    cellpadding: \"0\"\n  }, [!_ctx.hideHeader ? (openBlock(), createElementBlock(\"thead\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.weekDays, day => {\n    return openBlock(), createElementBlock(\"th\", {\n      key: day\n    }, toDisplayString(day), 1);\n  }), 128))])) : createCommentVNode(\"v-if\", true), createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, index) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key: index,\n      class: normalizeClass({\n        [_ctx.nsTable.e(\"row\")]: true,\n        [_ctx.nsTable.em(\"row\", \"hide-border\")]: index === 0 && _ctx.hideHeader\n      })\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key,\n        class: normalizeClass(_ctx.getCellClass(cell)),\n        onClick: $event => _ctx.handlePickDay(cell)\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.nsDay.b())\n      }, [renderSlot(_ctx.$slots, \"dateCell\", {\n        data: _ctx.getSlotData(cell)\n      }, () => [createElementVNode(\"span\", null, toDisplayString(cell.text), 1)])], 2)], 10, _hoisted_2);\n    }), 128))], 2);\n  }), 128))])], 2);\n}\nvar DateTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { DateTable as default, getMonthDays, getPrevMonthLastDays };","map":{"version":3,"mappings":"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","names":["dayjs","extend","WEEK_DAYS","getPrevMonthLastDays","date","count","lastDay","endOf","map","_","index","days","rangeArr","toNestedArr","length","start","slice","_sfc_main","defineComponent","props","emits","setup","emit","t","lang","nsTable","useNamespace","nsDay","now","weekStart","computed","range","isInRange","value","end","text","type","currentMonthRange","remaining","nextMonthRange","concat","firstDay","day","firstDayOfWeek","currentMonthDays","getMonthDays","prevMonthDays","getFormattedDate","subtract","add","getCellClass","classes","is","isSame","handlePickDay","getSlotData","isSelected","format","weekDays","rows","_createElementBlock","class","_normalizeClass","b","cellspacing","cellpadding","_ctx","key","_createElementVNode","row","e","_openBlock","_Fragment","cell","onClick","$event","_renderSlot","data"],"sources":["../../../../../../packages/components/calendar/src/date-table.vue"],"sourcesContent":["<template>\n  <table\n    :class=\"[nsTable.b(), nsTable.is('range', isInRange)]\"\n    cellspacing=\"0\"\n    cellpadding=\"0\"\n  >\n    <thead v-if=\"!hideHeader\">\n      <th v-for=\"day in weekDays\" :key=\"day\">{{ day }}</th>\n    </thead>\n\n    <tbody>\n      <tr\n        v-for=\"(row, index) in rows\"\n        :key=\"index\"\n        :class=\"{\n          [nsTable.e('row')]: true,\n          [nsTable.em('row', 'hide-border')]: index === 0 && hideHeader,\n        }\"\n      >\n        <td\n          v-for=\"(cell, key) in row\"\n          :key=\"key\"\n          :class=\"getCellClass(cell)\"\n          @click=\"handlePickDay(cell)\"\n        >\n          <div :class=\"nsDay.b()\">\n            <slot name=\"dateCell\" :data=\"getSlotData(cell)\">\n              <span>{{ cell.text }}</span>\n            </slot>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport dayjs from 'dayjs'\nimport localeData from 'dayjs/plugin/localeData'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { dateTableProps, dateTableEmits } from './date-table'\nimport type { Dayjs } from 'dayjs'\ndayjs.extend(localeData)\n\ntype CellType = 'next' | 'prev' | 'current'\ninterface Cell {\n  text: number\n  type: CellType\n}\n\nconst WEEK_DAYS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'] as const\n\nexport const getPrevMonthLastDays = (date: Dayjs, count: number) => {\n  const lastDay = date.subtract(1, 'month').endOf('month').date()\n  return rangeArr(count).map((_, index) => lastDay - (count - index - 1))\n}\n\nexport const getMonthDays = (date: Dayjs) => {\n  const days = date.daysInMonth()\n  return rangeArr(days).map((_, index) => index + 1)\n}\n\nconst toNestedArr = (days: Cell[]) =>\n  rangeArr(days.length / 7).map((index) => {\n    const start = index * 7\n    return days.slice(start, start + 7)\n  })\n\nexport default defineComponent({\n  props: dateTableProps,\n  emits: dateTableEmits,\n\n  setup(props, { emit }) {\n    const { t, lang } = useLocale()\n    const nsTable = useNamespace('calendar-table')\n    const nsDay = useNamespace('calendar-day')\n\n    const now = dayjs().locale(lang.value)\n    // todo better way to get Day.js locale object\n    const firstDayOfWeek: number = (now as any).$locale().weekStart || 0\n\n    const isInRange = computed(() => !!props.range && !!props.range.length)\n\n    const rows = computed(() => {\n      let days: Cell[] = []\n      if (isInRange.value) {\n        const [start, end] = props.range!\n        const currentMonthRange: Cell[] = rangeArr(\n          end.date() - start.date() + 1\n        ).map((index) => ({\n          text: start.date() + index,\n          type: 'current',\n        }))\n\n        let remaining = currentMonthRange.length % 7\n        remaining = remaining === 0 ? 0 : 7 - remaining\n        const nextMonthRange: Cell[] = rangeArr(remaining).map((_, index) => ({\n          text: index + 1,\n          type: 'next',\n        }))\n        days = currentMonthRange.concat(nextMonthRange)\n      } else {\n        const firstDay = props.date.startOf('month').day() || 7\n        const prevMonthDays: Cell[] = getPrevMonthLastDays(\n          props.date,\n          firstDay - firstDayOfWeek\n        ).map((day) => ({\n          text: day,\n          type: 'prev',\n        }))\n        const currentMonthDays: Cell[] = getMonthDays(props.date).map(\n          (day) => ({\n            text: day,\n            type: 'current',\n          })\n        )\n        days = [...prevMonthDays, ...currentMonthDays]\n        const nextMonthDays: Cell[] = rangeArr(42 - days.length).map(\n          (_, index) => ({\n            text: index + 1,\n            type: 'next',\n          })\n        )\n        days = days.concat(nextMonthDays)\n      }\n      return toNestedArr(days)\n    })\n\n    const weekDays = computed(() => {\n      const start = firstDayOfWeek\n      if (start === 0) {\n        return WEEK_DAYS.map((_) => t(`el.datepicker.weeks.${_}`))\n      } else {\n        return WEEK_DAYS.slice(start)\n          .concat(WEEK_DAYS.slice(0, start))\n          .map((_) => t(`el.datepicker.weeks.${_}`))\n      }\n    })\n\n    const getFormattedDate = (day: number, type: CellType): Dayjs => {\n      switch (type) {\n        case 'prev':\n          return props.date.startOf('month').subtract(1, 'month').date(day)\n        case 'next':\n          return props.date.startOf('month').add(1, 'month').date(day)\n        case 'current':\n          return props.date.date(day)\n      }\n    }\n\n    const getCellClass = ({ text, type }: Cell) => {\n      const classes: string[] = [type]\n      if (type === 'current') {\n        const date = getFormattedDate(text, type)\n        if (date.isSame(props.selectedDay, 'day')) {\n          classes.push(nsDay.is('selected'))\n        }\n        if (date.isSame(now, 'day')) {\n          classes.push(nsDay.is('today'))\n        }\n      }\n      return classes\n    }\n\n    const handlePickDay = ({ text, type }: Cell) => {\n      const date = getFormattedDate(text, type)\n      emit('pick', date)\n    }\n\n    const getSlotData = ({ text, type }: Cell) => {\n      const day = getFormattedDate(text, type)\n      return {\n        isSelected: day.isSame(props.selectedDay),\n        type: `${type}-month`,\n        day: day.format('YYYY-MM-DD'),\n        date: day.toDate(),\n      }\n    }\n\n    return {\n      isInRange,\n      weekDays,\n      rows,\n      getCellClass,\n      handlePickDay,\n      getSlotData,\n\n      nsTable,\n      nsDay,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}