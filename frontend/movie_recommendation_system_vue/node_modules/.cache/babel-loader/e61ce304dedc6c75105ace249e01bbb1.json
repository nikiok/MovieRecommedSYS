{"ast":null,"code":"import { defineComponent, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createTextVNode, createCommentVNode, createSlots, normalizeProps, guardReactiveProps, Fragment, renderList, createBlock } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElButton, ElButtonGroup } from '../../button/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport DateTable from './date-table2.mjs';\nimport { calendarProps, calendarEmits } from './calendar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElCalendar\",\n  components: {\n    DateTable,\n    ElButton,\n    ElButtonGroup\n  },\n  props: calendarProps,\n  emits: calendarEmits,\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"calendar\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const selectedDay = ref();\n    const now = dayjs().locale(lang.value);\n    const prevMonthDayjs = computed(() => {\n      return date.value.subtract(1, \"month\").date(1);\n    });\n    const curMonthDatePrefix = computed(() => {\n      return dayjs(date.value).locale(lang.value).format(\"YYYY-MM\");\n    });\n    const nextMonthDayjs = computed(() => {\n      return date.value.add(1, \"month\").date(1);\n    });\n    const prevYearDayjs = computed(() => {\n      return date.value.subtract(1, \"year\").date(1);\n    });\n    const nextYearDayjs = computed(() => {\n      return date.value.add(1, \"year\").date(1);\n    });\n    const i18nDate = computed(() => {\n      const pickedMonth = `el.datepicker.month${date.value.format(\"M\")}`;\n      return `${date.value.year()} ${t(\"el.datepicker.year\")} ${t(pickedMonth)}`;\n    });\n    const realSelectedDay = computed({\n      get() {\n        if (!props.modelValue) return selectedDay.value;\n        return date.value;\n      },\n      set(val) {\n        if (!val) return;\n        selectedDay.value = val;\n        const result = val.toDate();\n        emit(\"input\", result);\n        emit(\"update:modelValue\", result);\n      }\n    });\n    const date = computed(() => {\n      if (!props.modelValue) {\n        if (realSelectedDay.value) {\n          return realSelectedDay.value;\n        } else if (validatedRange.value.length) {\n          return validatedRange.value[0][0];\n        }\n        return now;\n      } else {\n        return dayjs(props.modelValue).locale(lang.value);\n      }\n    });\n    const calculateValidatedDateRange = (startDayjs, endDayjs) => {\n      const firstDay = startDayjs.startOf(\"week\");\n      const lastDay = endDayjs.endOf(\"week\");\n      const firstMonth = firstDay.get(\"month\");\n      const lastMonth = lastDay.get(\"month\");\n      if (firstMonth === lastMonth) {\n        return [[firstDay, lastDay]];\n      } else if (firstMonth + 1 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf(\"month\");\n        const lastMonthFirstDay = lastDay.startOf(\"month\");\n        const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, \"week\");\n        const lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else if (firstMonth + 2 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf(\"month\");\n        const secondMonthFirstDay = firstDay.add(1, \"month\").startOf(\"month\");\n        const secondMonthStartDay = firstMonthLastDay.isSame(secondMonthFirstDay, \"week\") ? secondMonthFirstDay.add(1, \"week\") : secondMonthFirstDay;\n        const secondMonthLastDay = secondMonthStartDay.endOf(\"month\");\n        const lastMonthFirstDay = lastDay.startOf(\"month\");\n        const lastMonthStartDay = secondMonthLastDay.isSame(lastMonthFirstDay, \"week\") ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [secondMonthStartDay.startOf(\"week\"), secondMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else {\n        debugWarn(\"ElCalendar\", \"start time and end time interval must not exceed two months\");\n        return [];\n      }\n    };\n    const validatedRange = computed(() => {\n      if (!props.range) return [];\n      const rangeArrDayjs = props.range.map(_ => dayjs(_).locale(lang.value));\n      const [startDayjs, endDayjs] = rangeArrDayjs;\n      if (startDayjs.isAfter(endDayjs)) {\n        debugWarn(\"ElCalendar\", \"end time should be greater than start time\");\n        return [];\n      }\n      if (startDayjs.isSame(endDayjs, \"month\")) {\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      } else {\n        if (startDayjs.add(1, \"month\").month() !== endDayjs.month()) {\n          debugWarn(\"ElCalendar\", \"start time and end time interval must not exceed two months\");\n          return [];\n        }\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      }\n    });\n    const pickDay = day => {\n      realSelectedDay.value = day;\n    };\n    const selectDate = type => {\n      let day;\n      if (type === \"prev-month\") {\n        day = prevMonthDayjs.value;\n      } else if (type === \"next-month\") {\n        day = nextMonthDayjs.value;\n      } else if (type === \"prev-year\") {\n        day = prevYearDayjs.value;\n      } else if (type === \"next-year\") {\n        day = nextYearDayjs.value;\n      } else {\n        day = now;\n      }\n      if (day.isSame(date.value, \"day\")) return;\n      pickDay(day);\n    };\n    return {\n      selectedDay,\n      curMonthDatePrefix,\n      i18nDate,\n      realSelectedDay,\n      date,\n      validatedRange,\n      pickDay,\n      selectDate,\n      t,\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_el_button_group = resolveComponent(\"el-button-group\");\n  const _component_date_table = resolveComponent(\"date-table\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"header\"))\n  }, [renderSlot(_ctx.$slots, \"header\", {\n    date: _ctx.i18nDate\n  }, () => [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"title\"))\n  }, toDisplayString(_ctx.i18nDate), 3), _ctx.validatedRange.length === 0 ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"button-group\"))\n  }, [createVNode(_component_el_button_group, null, {\n    default: withCtx(() => [createVNode(_component_el_button, {\n      size: \"small\",\n      onClick: _cache[0] || (_cache[0] = $event => _ctx.selectDate(\"prev-month\"))\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.datepicker.prevMonth\")), 1)]),\n      _: 1\n    }), createVNode(_component_el_button, {\n      size: \"small\",\n      onClick: _cache[1] || (_cache[1] = $event => _ctx.selectDate(\"today\"))\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.datepicker.today\")), 1)]),\n      _: 1\n    }), createVNode(_component_el_button, {\n      size: \"small\",\n      onClick: _cache[2] || (_cache[2] = $event => _ctx.selectDate(\"next-month\"))\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.datepicker.nextMonth\")), 1)]),\n      _: 1\n    })]),\n    _: 1\n  })], 2)) : createCommentVNode(\"v-if\", true)])], 2), _ctx.validatedRange.length === 0 ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"body\"))\n  }, [createVNode(_component_date_table, {\n    date: _ctx.date,\n    \"selected-day\": _ctx.realSelectedDay,\n    onPick: _ctx.pickDay\n  }, createSlots({\n    _: 2\n  }, [_ctx.$slots.dateCell ? {\n    name: \"dateCell\",\n    fn: withCtx(data => [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))])\n  } : void 0]), 1032, [\"date\", \"selected-day\", \"onPick\"])], 2)) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"body\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.validatedRange, (range_, index) => {\n    return openBlock(), createBlock(_component_date_table, {\n      key: index,\n      date: range_[0],\n      \"selected-day\": _ctx.realSelectedDay,\n      range: range_,\n      \"hide-header\": index !== 0,\n      onPick: _ctx.pickDay\n    }, createSlots({\n      _: 2\n    }, [_ctx.$slots.dateCell ? {\n      name: \"dateCell\",\n      fn: withCtx(data => [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))])\n    } : void 0]), 1032, [\"date\", \"selected-day\", \"range\", \"hide-header\", \"onPick\"]);\n  }), 128))], 2))], 2);\n}\nvar Calendar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Calendar as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","DateTable","ElButton","ElButtonGroup","props","emits","setup","emit","ns","useNamespace","t","lang","selectedDay","dayjs","computed","date","subtract","locale","value","format","add","pickedMonth","year","realSelectedDay","get","set","val","result","modelValue","length","calculateValidatedDateRange","startDayjs","endDayjs","startOf","endOf","firstDay","lastDay","firstMonth","lastMonth","firstMonthLastDay","lastMonthFirstDay","lastMonthStartDay","secondMonthFirstDay","isSame","secondMonthStartDay","secondMonthLastDay","debugWarn","range","_","isAfter","month","day","type","prevMonthDayjs","nextMonthDayjs","prevYearDayjs","nextYearDayjs","pickDay","curMonthDatePrefix","i18nDate","validatedRange","selectDate","_createElementBlock","class","_normalizeClass","_ctx","_createElementVNode","e","_renderSlot","key","_createVNode","default","size","onClick","_cache","onPick","fn","data","_openBlock","_Fragment","range_","index","_createBlock"],"sources":["../../../../../../packages/components/calendar/src/calendar.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <div :class=\"ns.e('header')\">\n      <slot name=\"header\" :date=\"i18nDate\">\n        <div :class=\"ns.e('title')\">{{ i18nDate }}</div>\n        <div v-if=\"validatedRange.length === 0\" :class=\"ns.e('button-group')\">\n          <el-button-group>\n            <el-button size=\"small\" @click=\"selectDate('prev-month')\">\n              {{ t('el.datepicker.prevMonth') }}\n            </el-button>\n            <el-button size=\"small\" @click=\"selectDate('today')\">\n              {{ t('el.datepicker.today') }}\n            </el-button>\n            <el-button size=\"small\" @click=\"selectDate('next-month')\">\n              {{ t('el.datepicker.nextMonth') }}\n            </el-button>\n          </el-button-group>\n        </div>\n      </slot>\n    </div>\n    <div v-if=\"validatedRange.length === 0\" :class=\"ns.e('body')\">\n      <date-table :date=\"date\" :selected-day=\"realSelectedDay\" @pick=\"pickDay\">\n        <template v-if=\"$slots.dateCell\" #dateCell=\"data\">\n          <slot name=\"dateCell\" v-bind=\"data\" />\n        </template>\n      </date-table>\n    </div>\n    <div v-else :class=\"ns.e('body')\">\n      <date-table\n        v-for=\"(range_, index) in validatedRange\"\n        :key=\"index\"\n        :date=\"range_[0]\"\n        :selected-day=\"realSelectedDay\"\n        :range=\"range_\"\n        :hide-header=\"index !== 0\"\n        @pick=\"pickDay\"\n      >\n        <template v-if=\"$slots.dateCell\" #dateCell=\"data\">\n          <slot name=\"dateCell\" v-bind=\"data\" />\n        </template>\n      </date-table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, defineComponent } from 'vue'\nimport dayjs from 'dayjs'\nimport { ElButton, ElButtonGroup } from '@element-plus/components/button'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\nimport DateTable from './date-table.vue'\nimport { calendarProps, calendarEmits } from './calendar'\n\nimport type { ComputedRef } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\ntype DateType =\n  | 'prev-month'\n  | 'next-month'\n  | 'prev-year'\n  | 'next-year'\n  | 'today'\n\nexport default defineComponent({\n  name: 'ElCalendar',\n\n  components: {\n    DateTable,\n    ElButton,\n    ElButtonGroup,\n  },\n\n  props: calendarProps,\n  emits: calendarEmits,\n\n  setup(props, { emit }) {\n    const ns = useNamespace('calendar')\n\n    const { t, lang } = useLocale()\n    const selectedDay = ref<Dayjs>()\n    const now = dayjs().locale(lang.value)\n\n    const prevMonthDayjs = computed(() => {\n      return date.value.subtract(1, 'month').date(1)\n    })\n    const curMonthDatePrefix = computed(() => {\n      return dayjs(date.value).locale(lang.value).format('YYYY-MM')\n    })\n\n    const nextMonthDayjs = computed(() => {\n      return date.value.add(1, 'month').date(1)\n    })\n\n    const prevYearDayjs = computed(() => {\n      return date.value.subtract(1, 'year').date(1)\n    })\n\n    const nextYearDayjs = computed(() => {\n      return date.value.add(1, 'year').date(1)\n    })\n\n    const i18nDate = computed(() => {\n      const pickedMonth = `el.datepicker.month${date.value.format('M')}`\n      return `${date.value.year()} ${t('el.datepicker.year')} ${t(pickedMonth)}`\n    })\n\n    const realSelectedDay = computed<Dayjs | undefined>({\n      get() {\n        if (!props.modelValue) return selectedDay.value\n        return date.value\n      },\n      set(val) {\n        if (!val) return\n        selectedDay.value = val\n        const result = val.toDate()\n\n        emit('input', result)\n        emit('update:modelValue', result)\n      },\n    })\n\n    const date: ComputedRef<Dayjs> = computed(() => {\n      if (!props.modelValue) {\n        if (realSelectedDay.value) {\n          return realSelectedDay.value\n        } else if (validatedRange.value.length) {\n          return validatedRange.value[0][0]\n        }\n        return now\n      } else {\n        return dayjs(props.modelValue).locale(lang.value)\n      }\n    })\n\n    // https://github.com/element-plus/element-plus/issues/3155\n    // Calculate the validate date range according to the start and end dates\n    const calculateValidatedDateRange = (\n      startDayjs: Dayjs,\n      endDayjs: Dayjs\n    ): [Dayjs, Dayjs][] => {\n      const firstDay = startDayjs.startOf('week')\n      const lastDay = endDayjs.endOf('week')\n      const firstMonth = firstDay.get('month')\n      const lastMonth = lastDay.get('month')\n\n      // Current mouth\n      if (firstMonth === lastMonth) {\n        return [[firstDay, lastDay]]\n      }\n      // Two adjacent months\n      else if (firstMonth + 1 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf('month')\n        const lastMonthFirstDay = lastDay.startOf('month')\n\n        // Whether the last day of the first month and the first day of the last month is in the same week\n        const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, 'week')\n        const lastMonthStartDay = isSameWeek\n          ? lastMonthFirstDay.add(1, 'week')\n          : lastMonthFirstDay\n\n        return [\n          [firstDay, firstMonthLastDay],\n          [lastMonthStartDay.startOf('week'), lastDay],\n        ]\n      }\n      // Three consecutive months (compatible: 2021-01-30 to 2021-02-28)\n      else if (firstMonth + 2 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf('month')\n        const secondMonthFirstDay = firstDay.add(1, 'month').startOf('month')\n\n        // Whether the last day of the first month and the second month is in the same week\n        const secondMonthStartDay = firstMonthLastDay.isSame(\n          secondMonthFirstDay,\n          'week'\n        )\n          ? secondMonthFirstDay.add(1, 'week')\n          : secondMonthFirstDay\n\n        const secondMonthLastDay = secondMonthStartDay.endOf('month')\n        const lastMonthFirstDay = lastDay.startOf('month')\n\n        // Whether the last day of the second month and the last day of the last month is in the same week\n        const lastMonthStartDay = secondMonthLastDay.isSame(\n          lastMonthFirstDay,\n          'week'\n        )\n          ? lastMonthFirstDay.add(1, 'week')\n          : lastMonthFirstDay\n\n        return [\n          [firstDay, firstMonthLastDay],\n          [secondMonthStartDay.startOf('week'), secondMonthLastDay],\n          [lastMonthStartDay.startOf('week'), lastDay],\n        ]\n      }\n      // Other cases\n      else {\n        debugWarn(\n          'ElCalendar',\n          'start time and end time interval must not exceed two months'\n        )\n        return []\n      }\n    }\n\n    // if range is valid, we get a two-digit array\n    const validatedRange = computed(() => {\n      if (!props.range) return []\n      const rangeArrDayjs = props.range.map((_) => dayjs(_).locale(lang.value))\n      const [startDayjs, endDayjs] = rangeArrDayjs\n      if (startDayjs.isAfter(endDayjs)) {\n        debugWarn('ElCalendar', 'end time should be greater than start time')\n        return []\n      }\n      if (startDayjs.isSame(endDayjs, 'month')) {\n        // same month\n        return calculateValidatedDateRange(startDayjs, endDayjs)\n      } else {\n        // two months\n        if (startDayjs.add(1, 'month').month() !== endDayjs.month()) {\n          debugWarn(\n            'ElCalendar',\n            'start time and end time interval must not exceed two months'\n          )\n          return []\n        }\n        return calculateValidatedDateRange(startDayjs, endDayjs)\n      }\n    })\n\n    const pickDay = (day: Dayjs) => {\n      realSelectedDay.value = day\n    }\n\n    const selectDate = (type: DateType) => {\n      let day: Dayjs\n      if (type === 'prev-month') {\n        day = prevMonthDayjs.value\n      } else if (type === 'next-month') {\n        day = nextMonthDayjs.value\n      } else if (type === 'prev-year') {\n        day = prevYearDayjs.value\n      } else if (type === 'next-year') {\n        day = nextYearDayjs.value\n      } else {\n        day = now\n      }\n\n      if (day.isSame(date.value, 'day')) return\n      pickDay(day)\n    }\n\n    return {\n      selectedDay,\n      curMonthDatePrefix,\n      i18nDate,\n      realSelectedDay,\n      date,\n      validatedRange,\n      pickDay,\n      selectDate,\n      t,\n\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}