{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { defineComponent, inject, ref, reactive, computed, watch, nextTick, onMounted, provide, resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementBlock, createElementVNode, normalizeClass, createVNode, createCommentVNode, withKeys, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Close, ArrowDown } from '@element-plus/icons-vue';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport Color from './color.mjs';\nimport { OPTIONS_KEY } from './useOption.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElColorPicker\",\n  components: {\n    ElButton,\n    ElTooltip,\n    ElInput,\n    ElIcon,\n    Close,\n    ArrowDown,\n    SvPanel,\n    HueSlider,\n    AlphaSlider,\n    Predefine\n  },\n  directives: {\n    ClickOutside\n  },\n  props: {\n    modelValue: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    popperClass: String,\n    predefine: Array\n  },\n  emits: [\"change\", \"active-change\", UPDATE_MODEL_EVENT],\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"color\");\n    const elForm = inject(formContextKey, {});\n    const elFormItem = inject(formItemContextKey, {});\n    const hue = ref(null);\n    const svPanel = ref(null);\n    const alpha = ref(null);\n    const popper = ref(null);\n    const color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat,\n      value: props.modelValue\n    }));\n    const showPicker = ref(false);\n    const showPanelColor = ref(false);\n    const customInput = ref(\"\");\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n      return displayedRgb(color, props.showAlpha);\n    });\n    const colorSize = useSize();\n    const colorDisabled = computed(() => {\n      return !!(props.disabled || elForm.disabled);\n    });\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    watch(() => props.modelValue, newVal => {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        color.fromString(newVal);\n      }\n    });\n    watch(() => currentColor.value, val => {\n      customInput.value = val;\n      emit(\"active-change\", val);\n    });\n    watch(() => color.value, () => {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw new TypeError(\"color should be instance of _color Class\");\n      }\n      const {\n        r,\n        g,\n        b\n      } = color2.toRgb();\n      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get(\"alpha\") / 100})` : `rgb(${r}, ${g}, ${b})`;\n    }\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n    const debounceSetShowPicker = debounce(setShowPicker, 100);\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          showPanelColor.value = false;\n        }\n      });\n    }\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n    function confirmValue() {\n      var _a;\n      const value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n      debounceSetShowPicker(false);\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat,\n          value: props.modelValue\n        });\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n    function clear() {\n      var _a;\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n      if (props.modelValue !== null) {\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n      }\n      resetColor();\n    }\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(() => showPicker.value, () => {\n      nextTick(() => {\n        var _a, _b, _c;\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = svPanel.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(OPTIONS_KEY, {\n      currentColor\n    });\n    return {\n      color,\n      colorDisabled,\n      colorSize,\n      displayedColor,\n      showPanelColor,\n      showPicker,\n      customInput,\n      handleConfirm,\n      hide,\n      handleTrigger,\n      clear,\n      confirmValue,\n      t,\n      ns,\n      hue,\n      svPanel,\n      alpha,\n      popper\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_hue_slider = resolveComponent(\"hue-slider\");\n  const _component_sv_panel = resolveComponent(\"sv-panel\");\n  const _component_alpha_slider = resolveComponent(\"alpha-slider\");\n  const _component_predefine = resolveComponent(\"predefine\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_close = resolveComponent(\"close\");\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  const _directive_click_outside = resolveDirective(\"click-outside\");\n  return openBlock(), createBlock(_component_el_tooltip, {\n    ref: \"popper\",\n    visible: _ctx.showPicker,\n    \"onUpdate:visible\": _cache[2] || (_cache[2] = $event => _ctx.showPicker = $event),\n    \"show-arrow\": false,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    offset: 0,\n    \"gpu-acceleration\": false,\n    \"popper-class\": [_ctx.ns.be(\"picker\", \"panel\"), _ctx.ns.b(\"dropdown\"), _ctx.popperClass],\n    \"stop-popper-mouse-event\": false,\n    effect: \"light\",\n    trigger: \"click\",\n    transition: \"el-zoom-in-top\",\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", null, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"main-wrapper\"))\n    }, [createVNode(_component_hue_slider, {\n      ref: \"hue\",\n      class: \"hue-slider\",\n      color: _ctx.color,\n      vertical: \"\"\n    }, null, 8, [\"color\"]), createVNode(_component_sv_panel, {\n      ref: \"svPanel\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (openBlock(), createBlock(_component_alpha_slider, {\n      key: 0,\n      ref: \"alpha\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(_component_predefine, {\n      key: 1,\n      ref: \"predefine\",\n      color: _ctx.color,\n      colors: _ctx.predefine\n    }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btns\"))\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"value\"))\n    }, [createVNode(_component_el_input, {\n      modelValue: _ctx.customInput,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.customInput = $event),\n      \"validate-event\": false,\n      size: \"small\",\n      onKeyup: withKeys(_ctx.handleConfirm, [\"enter\"]),\n      onBlur: _ctx.handleConfirm\n    }, null, 8, [\"modelValue\", \"onKeyup\", \"onBlur\"])], 2), createVNode(_component_el_button, {\n      size: \"small\",\n      type: \"text\",\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"link-btn\")),\n      onClick: _ctx.clear\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.clear\")), 1)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"]), createVNode(_component_el_button, {\n      plain: \"\",\n      size: \"small\",\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btn\")),\n      onClick: _ctx.confirmValue\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.confirm\")), 1)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])], 2)])), [[_directive_click_outside, _ctx.hide]])]),\n    default: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass([_ctx.ns.b(\"picker\"), _ctx.ns.is(\"disabled\", _ctx.colorDisabled), _ctx.ns.bm(\"picker\", _ctx.colorSize)])\n    }, [_ctx.colorDisabled ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"mask\"))\n    }, null, 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"trigger\")),\n      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args))\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"color\"), _ctx.ns.is(\"alpha\", _ctx.showAlpha)])\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"color-inner\")),\n      style: normalizeStyle({\n        backgroundColor: _ctx.displayedColor\n      })\n    }, [withDirectives(createVNode(_component_el_icon, {\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"icon\"), _ctx.ns.is(\"icon-arrow-down\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_down)]),\n      _: 1\n    }, 8, [\"class\"]), [[vShow, _ctx.modelValue || _ctx.showPanelColor]]), !_ctx.modelValue && !_ctx.showPanelColor ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"empty\"), _ctx.ns.is(\"icon-close\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 6)], 2)], 2)], 2)]),\n    _: 1\n  }, 8, [\"visible\", \"popper-class\"]);\n}\nvar ColorPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ColorPicker as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElButton","ElTooltip","ElInput","ElIcon","Close","ArrowDown","SvPanel","HueSlider","AlphaSlider","Predefine","directives","ClickOutside","props","modelValue","showAlpha","colorFormat","disabled","size","type","validator","popperClass","predefine","emits","setup","emit","t","ns","useNamespace","inject","formContextKey","formItemContextKey","hue","ref","svPanel","alpha","popper","reactive","Color","enableAlpha","format","value","showPicker","showPanelColor","customInput","computed","color","colorSize","elForm","watch","newVal","fromString","currentColor","val","color2","TypeError","r","g","b","debounce","setShowPicker","debounceSetShowPicker","resetColor","nextTick","colorDisabled","UPDATE_MODEL_EVENT","onMounted","_b","provide","displayedColor","handleConfirm","hide","handleTrigger","clear","confirmValue","_component_el_tooltip","_directive_click_outside","visible","offset","effect","trigger","transition","persistent","content","_withDirectives","class","_createVNode","vertical","key","colors","_ctx","onBlur","onClick","default","_","plain","_createElementVNode","_normalizeClass","be","_createCommentVNode","_cache","args","style"],"sources":["../../../../../../packages/components/color-picker/src/index.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    v-model:visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), ns.b('dropdown'), popperClass]\"\n    :stop-popper-mouse-event=\"false\"\n    effect=\"light\"\n    trigger=\"click\"\n    transition=\"el-zoom-in-top\"\n    persistent\n  >\n    <template #content>\n      <div v-click-outside=\"hide\">\n        <div :class=\"ns.be('dropdown', 'main-wrapper')\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"svPanel\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div :class=\"ns.be('dropdown', 'btns')\">\n          <span :class=\"ns.be('dropdown', 'value')\">\n            <el-input\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"small\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            size=\"small\"\n            type=\"text\"\n            :class=\"ns.be('dropdown', 'link-btn')\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"small\"\n            :class=\"ns.be('dropdown', 'btn')\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #default>\n      <div\n        :class=\"[\n          ns.b('picker'),\n          ns.is('disabled', colorDisabled),\n          ns.bm('picker', colorSize),\n        ]\"\n      >\n        <div v-if=\"colorDisabled\" :class=\"ns.be('picker', 'mask')\" />\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanelColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-if=\"!modelValue && !showPanelColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport ElButton from '@element-plus/components/button'\nimport ElIcon from '@element-plus/components/icon'\nimport { ClickOutside } from '@element-plus/directives'\nimport { formItemContextKey, formContextKey } from '@element-plus/tokens'\nimport { useLocale, useSize, useNamespace } from '@element-plus/hooks'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElInput from '@element-plus/components/input'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn, isValidComponentSize } from '@element-plus/utils'\nimport { Close, ArrowDown } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './color'\nimport { OPTIONS_KEY } from './useOption'\nimport type { PropType } from 'vue'\nimport type { FormContext, FormItemContext } from '@element-plus/tokens'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { IUseOptions } from './useOption'\n\nexport default defineComponent({\n  name: 'ElColorPicker',\n  components: {\n    ElButton,\n    ElTooltip,\n    ElInput,\n    ElIcon,\n    Close,\n    ArrowDown,\n    SvPanel,\n    HueSlider,\n    AlphaSlider,\n    Predefine,\n  },\n  directives: {\n    ClickOutside,\n  },\n  props: {\n    modelValue: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    popperClass: String,\n    predefine: Array,\n  },\n  emits: ['change', 'active-change', UPDATE_MODEL_EVENT],\n  setup(props, { emit }) {\n    const { t } = useLocale()\n    const ns = useNamespace('color')\n    const elForm = inject(formContextKey, {} as FormContext)\n    const elFormItem = inject(formItemContextKey, {} as FormItemContext)\n\n    const hue = ref(null)\n    const svPanel = ref(null)\n    const alpha = ref(null)\n    const popper = ref(null)\n    // data\n    const color = reactive(\n      new Color({\n        enableAlpha: props.showAlpha,\n        format: props.colorFormat,\n        value: props.modelValue,\n      })\n    )\n    const showPicker = ref(false)\n    const showPanelColor = ref(false)\n    const customInput = ref('')\n    // computed\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return 'transparent'\n      }\n      return displayedRgb(color, props.showAlpha)\n    })\n    const colorSize = useSize()\n    const colorDisabled = computed(() => {\n      return !!(props.disabled || elForm.disabled)\n    })\n\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? '' : color.value\n    })\n    // watch\n    watch(\n      () => props.modelValue,\n      (newVal) => {\n        if (!newVal) {\n          showPanelColor.value = false\n        } else if (newVal && newVal !== color.value) {\n          color.fromString(newVal)\n        }\n      }\n    )\n    watch(\n      () => currentColor.value,\n      (val) => {\n        customInput.value = val\n        emit('active-change', val)\n      }\n    )\n\n    watch(\n      () => color.value,\n      () => {\n        if (!props.modelValue && !showPanelColor.value) {\n          showPanelColor.value = true\n        }\n      }\n    )\n\n    // methods\n    function displayedRgb(color, showAlpha) {\n      if (!(color instanceof Color)) {\n        throw new TypeError('color should be instance of _color Class')\n      }\n\n      const { r, g, b } = color.toRgb()\n      return showAlpha\n        ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n        : `rgb(${r}, ${g}, ${b})`\n    }\n\n    function setShowPicker(value) {\n      showPicker.value = value\n    }\n\n    const debounceSetShowPicker = debounce(setShowPicker, 100)\n\n    function hide() {\n      debounceSetShowPicker(false)\n      resetColor()\n    }\n\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue)\n        } else {\n          showPanelColor.value = false\n        }\n      })\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return\n      debounceSetShowPicker(!showPicker.value)\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value)\n    }\n\n    function confirmValue() {\n      const value = color.value\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('change', value)\n      elFormItem.validate?.('change').catch((err) => debugWarn(err))\n      debounceSetShowPicker(false)\n      // check if modelValue change, if not change, then reset color.\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat,\n          value: props.modelValue,\n        })\n        if (!color.compare(newColor)) {\n          resetColor()\n        }\n      })\n    }\n\n    function clear() {\n      debounceSetShowPicker(false)\n      emit(UPDATE_MODEL_EVENT, null)\n      emit('change', null)\n      if (props.modelValue !== null) {\n        elFormItem.validate?.('change').catch((err) => debugWarn(err))\n      }\n      resetColor()\n    }\n\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value\n      }\n    })\n    watch(\n      () => showPicker.value,\n      () => {\n        nextTick(() => {\n          hue.value?.update()\n          svPanel.value?.update()\n          alpha.value?.update()\n        })\n      }\n    )\n\n    provide<IUseOptions>(OPTIONS_KEY, {\n      currentColor,\n    })\n\n    return {\n      color: color as Color,\n      colorDisabled,\n      colorSize,\n      displayedColor,\n      showPanelColor,\n      showPicker,\n      customInput,\n      handleConfirm,\n      hide,\n      handleTrigger,\n      clear,\n      confirmValue,\n      t,\n      ns,\n      hue,\n      svPanel,\n      alpha,\n      popper,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}