{"ast":null,"code":"import axios from 'axios';\nconst request = axios.create({\n  // baseURL: 'http://localhost:8888',\n  baseURL: 'http://192.168.1.106:8888',\n  // baseURL: 'http://121.43.101.121:8888',\n  timeout: 5000\n});\n\n/**\r\n * request 拦截器\r\n * 可以自请求发送前对请求做一些处理\r\n * 比如统一加token，对请求参数统一加密\r\n */\nrequest.interceptors.request.use(config => {\n  // 设置请求头\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  // 是否需要token\n  const isNeedToken = (config.headers || {}).isNeedToken === false;\n  let token = window.localStorage.getItem('token');\n  if (!isNeedToken) {\n    if (!token) {\n      // router.push(\"/login\")\n    } else {\n      config.headers['token'] = token;\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n/**\r\n * response 拦截器\r\n * 可以在接口响应后统一处理结果\r\n */\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","request","create","baseURL","timeout","interceptors","use","config","headers","isNeedToken","token","window","localStorage","getItem","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log"],"sources":["F:/personalSpace/lx-bishe/movie_recommendation_system_vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nconst request = axios.create({\r\n    // baseURL: 'http://localhost:8888',\r\n    baseURL: 'http://192.168.1.106:8888',\r\n    // baseURL: 'http://121.43.101.121:8888',\r\n    timeout: 5000\r\n})\r\n\r\n/**\r\n * request 拦截器\r\n * 可以自请求发送前对请求做一些处理\r\n * 比如统一加token，对请求参数统一加密\r\n */\r\nrequest.interceptors.request.use(config => {\r\n    // 设置请求头\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    // 是否需要token\r\n    const isNeedToken = (config.headers || {}).isNeedToken === false\r\n    let token = window.localStorage.getItem('token')\r\n\r\n    if (!isNeedToken) {\r\n        if (!token) {\r\n            // router.push(\"/login\")\r\n        } else {\r\n            config.headers['token'] = token\r\n        }\r\n    }\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n/**\r\n * response 拦截器\r\n * 可以在接口响应后统一处理结果\r\n */\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default request\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EACzB;EACAC,OAAO,EAAE,2BAA2B;EACpC;EACAC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvC;EACAA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjE;EACA,MAAMC,WAAW,GAAG,CAACF,MAAM,CAACC,OAAO,IAAI,CAAC,CAAC,EAAEC,WAAW,KAAK,KAAK;EAChE,IAAIC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAEhD,IAAI,CAACJ,WAAW,EAAE;IACd,IAAI,CAACC,KAAK,EAAE;MACR;IAAA,CACH,MAAM;MACHH,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGE,KAAK;IACnC;EACJ;EACA,OAAOH,MAAM;AACjB,CAAC,EAAEO,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACAb,OAAO,CAACI,YAAY,CAACY,QAAQ,CAACX,GAAG,CAC7BW,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAIF,QAAQ,CAACV,MAAM,CAACa,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOF,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLS,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGV,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeb,OAAO"},"metadata":{},"sourceType":"module"}