{"ast":null,"code":"import { defineComponent, computed, ref, inject, resolveComponent, openBlock, createElementBlock, createElementVNode, toDisplayString, normalizeClass, createVNode, createCommentVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport { union } from 'lodash-unified';\nimport '../../../../hooks/index.mjs';\nimport '../../../../constants/index.mjs';\nimport TimeSpinner from './basic-time-spinner.mjs';\nimport { useOldValue, getAvailableArrs } from './useTimePicker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nconst makeSelectRange = (start, end) => {\n  const result = [];\n  for (let i = start; i <= end; i++) {\n    result.push(i);\n  }\n  return result;\n};\nconst _sfc_main = defineComponent({\n  components: {\n    TimeSpinner\n  },\n  props: {\n    visible: Boolean,\n    actualVisible: Boolean,\n    parsedValue: {\n      type: [Array]\n    },\n    format: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const minDate = computed(() => props.parsedValue[0]);\n    const maxDate = computed(() => props.parsedValue[1]);\n    const oldValue = useOldValue(props);\n    const handleCancel = () => {\n      ctx.emit(\"pick\", oldValue.value, null);\n    };\n    const showSeconds = computed(() => {\n      return props.format.includes(\"ss\");\n    });\n    const amPmMode = computed(() => {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n    const minSelectableRange = ref([]);\n    const maxSelectableRange = ref([]);\n    const handleConfirm = (visible = false) => {\n      ctx.emit(\"pick\", [minDate.value, maxDate.value], visible);\n    };\n    const handleMinChange = date => {\n      handleChange(date.millisecond(0), maxDate.value);\n    };\n    const handleMaxChange = date => {\n      handleChange(minDate.value, date.millisecond(0));\n    };\n    const isValidValue = _date => {\n      const parsedDate = _date.map(_ => dayjs(_).locale(lang.value));\n      const result = getRangeAvailableTime(parsedDate);\n      return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1]);\n    };\n    const handleChange = (_minDate, _maxDate) => {\n      ctx.emit(\"pick\", [_minDate, _maxDate], true);\n    };\n    const btnConfirmDisabled = computed(() => {\n      return minDate.value > maxDate.value;\n    });\n    const selectionRange = ref([0, 2]);\n    const setMinSelectionRange = (start, end) => {\n      ctx.emit(\"select-range\", start, end, \"min\");\n      selectionRange.value = [start, end];\n    };\n    const offset = computed(() => showSeconds.value ? 11 : 8);\n    const setMaxSelectionRange = (start, end) => {\n      ctx.emit(\"select-range\", start, end, \"max\");\n      selectionRange.value = [start + offset.value, end + offset.value];\n    };\n    const changeSelectionRange = step => {\n      const list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];\n      const mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      const index = list.indexOf(selectionRange.value[0]);\n      const next = (index + step + list.length) % list.length;\n      const half = list.length / 2;\n      if (next < half) {\n        timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n      } else {\n        timePickerOptions[\"end_emitSelectRange\"](mapping[next - half]);\n      }\n    };\n    const handleKeydown = event => {\n      const code = event.code;\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        const step = code === EVENT_CODE.left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        const step = code === EVENT_CODE.up ? -1 : 1;\n        const role = selectionRange.value[0] < offset.value ? \"start\" : \"end\";\n        timePickerOptions[`${role}_scrollDown`](step);\n        event.preventDefault();\n        return;\n      }\n    };\n    const disabledHours_ = (role, compare) => {\n      const defaultDisable = disabledHours ? disabledHours(role) : [];\n      const isStart = role === \"start\";\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value);\n      const compareHour = compareDate.hour();\n      const nextDisable = isStart ? makeSelectRange(compareHour + 1, 23) : makeSelectRange(0, compareHour - 1);\n      return union(defaultDisable, nextDisable);\n    };\n    const disabledMinutes_ = (hour, role, compare) => {\n      const defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : [];\n      const isStart = role === \"start\";\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value);\n      const compareHour = compareDate.hour();\n      if (hour !== compareHour) {\n        return defaultDisable;\n      }\n      const compareMinute = compareDate.minute();\n      const nextDisable = isStart ? makeSelectRange(compareMinute + 1, 59) : makeSelectRange(0, compareMinute - 1);\n      return union(defaultDisable, nextDisable);\n    };\n    const disabledSeconds_ = (hour, minute, role, compare) => {\n      const defaultDisable = disabledSeconds ? disabledSeconds(hour, minute, role) : [];\n      const isStart = role === \"start\";\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value);\n      const compareHour = compareDate.hour();\n      const compareMinute = compareDate.minute();\n      if (hour !== compareHour || minute !== compareMinute) {\n        return defaultDisable;\n      }\n      const compareSecond = compareDate.second();\n      const nextDisable = isStart ? makeSelectRange(compareSecond + 1, 59) : makeSelectRange(0, compareSecond - 1);\n      return union(defaultDisable, nextDisable);\n    };\n    const getRangeAvailableTime = dates => {\n      return dates.map((_, index) => getRangeAvailableTimeEach(dates[0], dates[1], index === 0 ? \"start\" : \"end\"));\n    };\n    const {\n      getAvailableHours,\n      getAvailableMinutes,\n      getAvailableSeconds\n    } = getAvailableArrs(disabledHours_, disabledMinutes_, disabledSeconds_);\n    const getRangeAvailableTimeEach = (startDate, endDate, role) => {\n      const availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds\n      };\n      const isStart = role === \"start\";\n      let result = isStart ? startDate : endDate;\n      const compareDate = isStart ? endDate : startDate;\n      [\"hour\", \"minute\", \"second\"].forEach(_ => {\n        if (availableMap[_]) {\n          let availableArr;\n          const method = availableMap[_];\n          if (_ === \"minute\") {\n            availableArr = method(result.hour(), role, compareDate);\n          } else if (_ === \"second\") {\n            availableArr = method(result.hour(), result.minute(), role, compareDate);\n          } else {\n            availableArr = method(role, compareDate);\n          }\n          if (availableArr && availableArr.length && !availableArr.includes(result[_]())) {\n            const pos = isStart ? 0 : availableArr.length - 1;\n            result = result[_](availableArr[pos]);\n          }\n        }\n      });\n      return result;\n    };\n    const parseUserInput = value => {\n      if (!value) return null;\n      if (Array.isArray(value)) {\n        return value.map(_ => dayjs(_, props.format).locale(lang.value));\n      }\n      return dayjs(value, props.format).locale(lang.value);\n    };\n    const formatToString = value => {\n      if (!value) return null;\n      if (Array.isArray(value)) {\n        return value.map(_ => _.format(props.format));\n      }\n      return value.format(props.format);\n    };\n    const getDefaultValue = () => {\n      if (Array.isArray(defaultValue)) {\n        return defaultValue.map(_ => dayjs(_).locale(lang.value));\n      }\n      const defaultDay = dayjs(defaultValue).locale(lang.value);\n      return [defaultDay, defaultDay.add(60, \"m\")];\n    };\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    ctx.emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    ctx.emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    ctx.emit(\"set-picker-option\", [\"handleKeydown\", handleKeydown]);\n    ctx.emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    ctx.emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    const timePickerOptions = {};\n    const onSetOption = e => {\n      timePickerOptions[e[0]] = e[1];\n    };\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue\n    } = pickerBase.props;\n    return {\n      arrowControl,\n      onSetOption,\n      setMaxSelectionRange,\n      setMinSelectionRange,\n      btnConfirmDisabled,\n      handleCancel,\n      handleConfirm,\n      t,\n      showSeconds,\n      minDate,\n      maxDate,\n      amPmMode,\n      handleMinChange,\n      handleMaxChange,\n      minSelectableRange,\n      maxSelectableRange,\n      disabledHours_,\n      disabledMinutes_,\n      disabledSeconds_\n    };\n  }\n});\nconst _hoisted_1 = {\n  key: 0,\n  class: \"el-time-range-picker el-picker-panel\"\n};\nconst _hoisted_2 = {\n  class: \"el-time-range-picker__content\"\n};\nconst _hoisted_3 = {\n  class: \"el-time-range-picker__cell\"\n};\nconst _hoisted_4 = {\n  class: \"el-time-range-picker__header\"\n};\nconst _hoisted_5 = {\n  class: \"el-time-range-picker__cell\"\n};\nconst _hoisted_6 = {\n  class: \"el-time-range-picker__header\"\n};\nconst _hoisted_7 = {\n  class: \"el-time-panel__footer\"\n};\nconst _hoisted_8 = [\"disabled\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_time_spinner = resolveComponent(\"time-spinner\");\n  return _ctx.actualVisible ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", _hoisted_2, [createElementVNode(\"div\", _hoisted_3, [createElementVNode(\"div\", _hoisted_4, toDisplayString(_ctx.t(\"el.datepicker.startTime\")), 1), createElementVNode(\"div\", {\n    class: normalizeClass([{\n      \"has-seconds\": _ctx.showSeconds,\n      \"is-arrow\": _ctx.arrowControl\n    }, \"el-time-range-picker__body el-time-panel__content\"])\n  }, [createVNode(_component_time_spinner, {\n    ref: \"minSpinner\",\n    role: \"start\",\n    \"show-seconds\": _ctx.showSeconds,\n    \"am-pm-mode\": _ctx.amPmMode,\n    \"arrow-control\": _ctx.arrowControl,\n    \"spinner-date\": _ctx.minDate,\n    \"disabled-hours\": _ctx.disabledHours_,\n    \"disabled-minutes\": _ctx.disabledMinutes_,\n    \"disabled-seconds\": _ctx.disabledSeconds_,\n    onChange: _ctx.handleMinChange,\n    onSetOption: _ctx.onSetOption,\n    onSelectRange: _ctx.setMinSelectionRange\n  }, null, 8, [\"show-seconds\", \"am-pm-mode\", \"arrow-control\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onChange\", \"onSetOption\", \"onSelectRange\"])], 2)]), createElementVNode(\"div\", _hoisted_5, [createElementVNode(\"div\", _hoisted_6, toDisplayString(_ctx.t(\"el.datepicker.endTime\")), 1), createElementVNode(\"div\", {\n    class: normalizeClass([{\n      \"has-seconds\": _ctx.showSeconds,\n      \"is-arrow\": _ctx.arrowControl\n    }, \"el-time-range-picker__body el-time-panel__content\"])\n  }, [createVNode(_component_time_spinner, {\n    ref: \"maxSpinner\",\n    role: \"end\",\n    \"show-seconds\": _ctx.showSeconds,\n    \"am-pm-mode\": _ctx.amPmMode,\n    \"arrow-control\": _ctx.arrowControl,\n    \"spinner-date\": _ctx.maxDate,\n    \"disabled-hours\": _ctx.disabledHours_,\n    \"disabled-minutes\": _ctx.disabledMinutes_,\n    \"disabled-seconds\": _ctx.disabledSeconds_,\n    onChange: _ctx.handleMaxChange,\n    onSetOption: _ctx.onSetOption,\n    onSelectRange: _ctx.setMaxSelectionRange\n  }, null, 8, [\"show-seconds\", \"am-pm-mode\", \"arrow-control\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onChange\", \"onSetOption\", \"onSelectRange\"])], 2)])]), createElementVNode(\"div\", _hoisted_7, [createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"el-time-panel__btn cancel\",\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.handleCancel())\n  }, toDisplayString(_ctx.t(\"el.datepicker.cancel\")), 1), createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"el-time-panel__btn confirm\",\n    disabled: _ctx.btnConfirmDisabled,\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.handleConfirm())\n  }, toDisplayString(_ctx.t(\"el.datepicker.confirm\")), 9, _hoisted_8)])])) : createCommentVNode(\"v-if\", true);\n}\nvar TimeRangePanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TimeRangePanel as default };","map":{"version":3,"mappings":"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","names":["makeSelectRange","start","end","result","i","push","_sfc_main","defineComponent","components","TimeSpinner","props","visible","actualVisible","parsedValue","type","Array","format","default","emits","setup","ctx","t","lang","minDate","maxDate","oldValue","useOldValue","handleCancel","value","computed","includes","minSelectableRange","ref","maxSelectableRange","handleConfirm","emit","date","handleChange","millisecond","_date","map","_","dayjs","locale","getRangeAvailableTime","isSame","parsedDate","_minDate","_maxDate","setMinSelectionRange","selectionRange","offset","showSeconds","setMaxSelectionRange","step","list","concat","index","indexOf","next","length","half","timePickerOptions","mapping","event","code","left","EVENT_CODE","right","changeSelectionRange","up","down","role","disabledHours_","compare","disabledHours","isStart","compareDate","compareHour","union","defaultDisable","disabledMinutes_","hour","disabledMinutes","compareMinute","disabledSeconds_","disabledSeconds","minute","compareSecond","dates","getAvailableHours","getAvailableMinutes","getAvailableSeconds","getRangeAvailableTimeEach","startDate","availableMap","second","endDate","method","availableArr","pos","isArray","getDefaultValue","defaultValue","defaultDay","e","pickerBase","inject","arrowControl","onSetOption","btnConfirmDisabled","amPmMode","handleMinChange","handleMaxChange","class","_ctx","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","onChange","onSelectRange","_hoisted_5","_hoisted_6","_hoisted_7","onClick","_cache","disabled"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/panel-time-range.vue"],"sourcesContent":["<template>\n  <div v-if=\"actualVisible\" class=\"el-time-range-picker el-picker-panel\">\n    <div class=\"el-time-range-picker__content\">\n      <div class=\"el-time-range-picker__cell\">\n        <div class=\"el-time-range-picker__header\">\n          {{ t('el.datepicker.startTime') }}\n        </div>\n        <div\n          :class=\"{ 'has-seconds': showSeconds, 'is-arrow': arrowControl }\"\n          class=\"el-time-range-picker__body el-time-panel__content\"\n        >\n          <time-spinner\n            ref=\"minSpinner\"\n            role=\"start\"\n            :show-seconds=\"showSeconds\"\n            :am-pm-mode=\"amPmMode\"\n            :arrow-control=\"arrowControl\"\n            :spinner-date=\"minDate\"\n            :disabled-hours=\"disabledHours_\"\n            :disabled-minutes=\"disabledMinutes_\"\n            :disabled-seconds=\"disabledSeconds_\"\n            @change=\"handleMinChange\"\n            @set-option=\"onSetOption\"\n            @select-range=\"setMinSelectionRange\"\n          />\n        </div>\n      </div>\n      <div class=\"el-time-range-picker__cell\">\n        <div class=\"el-time-range-picker__header\">\n          {{ t('el.datepicker.endTime') }}\n        </div>\n        <div\n          :class=\"{ 'has-seconds': showSeconds, 'is-arrow': arrowControl }\"\n          class=\"el-time-range-picker__body el-time-panel__content\"\n        >\n          <time-spinner\n            ref=\"maxSpinner\"\n            role=\"end\"\n            :show-seconds=\"showSeconds\"\n            :am-pm-mode=\"amPmMode\"\n            :arrow-control=\"arrowControl\"\n            :spinner-date=\"maxDate\"\n            :disabled-hours=\"disabledHours_\"\n            :disabled-minutes=\"disabledMinutes_\"\n            :disabled-seconds=\"disabledSeconds_\"\n            @change=\"handleMaxChange\"\n            @set-option=\"onSetOption\"\n            @select-range=\"setMaxSelectionRange\"\n          />\n        </div>\n      </div>\n    </div>\n    <div class=\"el-time-panel__footer\">\n      <button\n        type=\"button\"\n        class=\"el-time-panel__btn cancel\"\n        @click=\"handleCancel()\"\n      >\n        {{ t('el.datepicker.cancel') }}\n      </button>\n      <button\n        type=\"button\"\n        class=\"el-time-panel__btn confirm\"\n        :disabled=\"btnConfirmDisabled\"\n        @click=\"handleConfirm()\"\n      >\n        {{ t('el.datepicker.confirm') }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, inject } from 'vue'\nimport dayjs from 'dayjs'\nimport { union } from 'lodash-unified'\nimport { useLocale } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport TimeSpinner from './basic-time-spinner.vue'\nimport { getAvailableArrs, useOldValue } from './useTimePicker'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst makeSelectRange = (start: number, end: number) => {\n  const result = []\n  for (let i = start; i <= end; i++) {\n    result.push(i)\n  }\n  return result\n}\nexport default defineComponent({\n  components: { TimeSpinner },\n\n  props: {\n    visible: Boolean,\n    actualVisible: Boolean,\n    parsedValue: {\n      type: [Array] as PropType<Array<Dayjs>>,\n    },\n    format: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: ['pick', 'select-range', 'set-picker-option'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    const minDate = computed(() => props.parsedValue[0])\n    const maxDate = computed(() => props.parsedValue[1])\n    const oldValue = useOldValue(props)\n    const handleCancel = () => {\n      ctx.emit('pick', oldValue.value, null)\n    }\n    const showSeconds = computed(() => {\n      return props.format.includes('ss')\n    })\n    const amPmMode = computed(() => {\n      if (props.format.includes('A')) return 'A'\n      if (props.format.includes('a')) return 'a'\n      return ''\n    })\n\n    const minSelectableRange = ref([])\n    const maxSelectableRange = ref([])\n\n    const handleConfirm = (visible = false) => {\n      ctx.emit('pick', [minDate.value, maxDate.value], visible)\n    }\n\n    const handleMinChange = (date) => {\n      handleChange(date.millisecond(0), maxDate.value)\n    }\n    const handleMaxChange = (date) => {\n      handleChange(minDate.value, date.millisecond(0))\n    }\n\n    const isValidValue = (_date: Dayjs[]) => {\n      const parsedDate = _date.map((_) => dayjs(_).locale(lang.value))\n      const result = getRangeAvailableTime(parsedDate)\n      return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1])\n    }\n\n    const handleChange = (_minDate, _maxDate) => {\n      // todo getRangeAvailableTime(_date).millisecond(0)\n      ctx.emit('pick', [_minDate, _maxDate], true)\n    }\n    const btnConfirmDisabled = computed(() => {\n      return minDate.value > maxDate.value\n    })\n\n    const selectionRange = ref([0, 2])\n    const setMinSelectionRange = (start, end) => {\n      ctx.emit('select-range', start, end, 'min')\n      selectionRange.value = [start, end]\n    }\n\n    const offset = computed(() => (showSeconds.value ? 11 : 8))\n    const setMaxSelectionRange = (start, end) => {\n      ctx.emit('select-range', start, end, 'max')\n      selectionRange.value = [start + offset.value, end + offset.value]\n    }\n\n    const changeSelectionRange = (step) => {\n      const list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11]\n      const mapping = ['hours', 'minutes'].concat(\n        showSeconds.value ? ['seconds'] : []\n      )\n      const index = list.indexOf(selectionRange.value[0])\n      const next = (index + step + list.length) % list.length\n      const half = list.length / 2\n      if (next < half) {\n        timePickerOptions['start_emitSelectRange'](mapping[next])\n      } else {\n        timePickerOptions['end_emitSelectRange'](mapping[next - half])\n      }\n    }\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      const code = event.code\n\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        const step = code === EVENT_CODE.left ? -1 : 1\n        changeSelectionRange(step)\n        event.preventDefault()\n        return\n      }\n\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        const step = code === EVENT_CODE.up ? -1 : 1\n        const role = selectionRange.value[0] < offset.value ? 'start' : 'end'\n        timePickerOptions[`${role}_scrollDown`](step)\n        event.preventDefault()\n        return\n      }\n    }\n\n    const disabledHours_ = (role, compare) => {\n      const defaultDisable = disabledHours ? disabledHours(role) : []\n      const isStart = role === 'start'\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value)\n      const compareHour = compareDate.hour()\n      const nextDisable = isStart\n        ? makeSelectRange(compareHour + 1, 23)\n        : makeSelectRange(0, compareHour - 1)\n      return union(defaultDisable, nextDisable)\n    }\n    const disabledMinutes_ = (hour, role, compare) => {\n      const defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : []\n      const isStart = role === 'start'\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value)\n      const compareHour = compareDate.hour()\n      if (hour !== compareHour) {\n        return defaultDisable\n      }\n      const compareMinute = compareDate.minute()\n      const nextDisable = isStart\n        ? makeSelectRange(compareMinute + 1, 59)\n        : makeSelectRange(0, compareMinute - 1)\n      return union(defaultDisable, nextDisable)\n    }\n    const disabledSeconds_ = (hour, minute, role, compare) => {\n      const defaultDisable = disabledSeconds\n        ? disabledSeconds(hour, minute, role)\n        : []\n      const isStart = role === 'start'\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value)\n      const compareHour = compareDate.hour()\n      const compareMinute = compareDate.minute()\n      if (hour !== compareHour || minute !== compareMinute) {\n        return defaultDisable\n      }\n      const compareSecond = compareDate.second()\n      const nextDisable = isStart\n        ? makeSelectRange(compareSecond + 1, 59)\n        : makeSelectRange(0, compareSecond - 1)\n      return union(defaultDisable, nextDisable)\n    }\n\n    const getRangeAvailableTime = (dates: Array<Dayjs>) => {\n      return dates.map((_, index) =>\n        getRangeAvailableTimeEach(\n          dates[0],\n          dates[1],\n          index === 0 ? 'start' : 'end'\n        )\n      )\n    }\n\n    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } =\n      getAvailableArrs(disabledHours_, disabledMinutes_, disabledSeconds_)\n\n    const getRangeAvailableTimeEach = (\n      startDate: Dayjs,\n      endDate: Dayjs,\n      role\n    ) => {\n      const availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds,\n      }\n      const isStart = role === 'start'\n      let result = isStart ? startDate : endDate\n      const compareDate = isStart ? endDate : startDate\n      ;['hour', 'minute', 'second'].forEach((_) => {\n        if (availableMap[_]) {\n          let availableArr\n          const method = availableMap[_]\n          if (_ === 'minute') {\n            availableArr = method(result.hour(), role, compareDate)\n          } else if (_ === 'second') {\n            availableArr = method(\n              result.hour(),\n              result.minute(),\n              role,\n              compareDate\n            )\n          } else {\n            availableArr = method(role, compareDate)\n          }\n          if (\n            availableArr &&\n            availableArr.length &&\n            !availableArr.includes(result[_]())\n          ) {\n            const pos = isStart ? 0 : availableArr.length - 1\n            result = result[_](availableArr[pos])\n          }\n        }\n      })\n      return result\n    }\n\n    const parseUserInput = (value: Dayjs[] | Dayjs) => {\n      if (!value) return null\n      if (Array.isArray(value)) {\n        return value.map((_) => dayjs(_, props.format).locale(lang.value))\n      }\n      return dayjs(value, props.format).locale(lang.value)\n    }\n\n    const formatToString = (value: Dayjs[] | Dayjs) => {\n      if (!value) return null\n      if (Array.isArray(value)) {\n        return value.map((_) => _.format(props.format))\n      }\n      return value.format(props.format)\n    }\n\n    const getDefaultValue = () => {\n      if (Array.isArray(defaultValue)) {\n        return defaultValue.map((_) => dayjs(_).locale(lang.value))\n      }\n      const defaultDay = dayjs(defaultValue).locale(lang.value)\n      return [defaultDay, defaultDay.add(60, 'm')]\n    }\n\n    ctx.emit('set-picker-option', ['formatToString', formatToString])\n    ctx.emit('set-picker-option', ['parseUserInput', parseUserInput])\n    ctx.emit('set-picker-option', ['isValidValue', isValidValue])\n    ctx.emit('set-picker-option', ['handleKeydown', handleKeydown])\n    ctx.emit('set-picker-option', ['getDefaultValue', getDefaultValue])\n    ctx.emit('set-picker-option', [\n      'getRangeAvailableTime',\n      getRangeAvailableTime,\n    ])\n\n    const timePickerOptions = {} as any\n    const onSetOption = (e) => {\n      timePickerOptions[e[0]] = e[1]\n    }\n\n    const pickerBase = inject('EP_PICKER_BASE') as any\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue,\n    } = pickerBase.props\n\n    return {\n      arrowControl,\n      onSetOption,\n      setMaxSelectionRange,\n      setMinSelectionRange,\n      btnConfirmDisabled,\n      handleCancel,\n      handleConfirm,\n      t,\n      showSeconds,\n      minDate,\n      maxDate,\n      amPmMode,\n      handleMinChange,\n      handleMaxChange,\n      minSelectableRange,\n      maxSelectableRange,\n      disabledHours_,\n      disabledMinutes_,\n      disabledSeconds_,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}