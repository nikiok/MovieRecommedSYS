{"ast":null,"code":"import { defineComponent, toRefs, computed, unref, provide, reactive, onMounted, nextTick, onBeforeUnmount, resolveComponent, resolveDirective, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createVNode, withCtx, createElementVNode, normalizeStyle, toDisplayString, createBlock, Fragment, renderList, createCommentVNode, Transition, withKeys, vModelText, createSlots, resolveDynamicComponent, vShow, renderSlot } from 'vue';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { CircleClose, ArrowUp } from '@element-plus/icons-vue';\nimport Option from './option.mjs';\nimport ElSelectMenu from './select-dropdown.mjs';\nimport { useSelectStates, useSelect } from './useSelect.mjs';\nimport { selectKey } from './token.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/tooltip.mjs';\nimport { tagProps } from '../../tag/src/tag.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFocus } from '../../../hooks/use-focus/index.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/dom/resize-event.mjs';\nimport { useDeprecateAppendToBody } from '../../popper/src/deprecation.mjs';\nconst COMPONENT_NAME = \"ElSelect\";\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  componentName: COMPONENT_NAME,\n  components: {\n    ElInput,\n    ElSelectMenu,\n    ElOption: Option,\n    ElTag,\n    ElScrollbar,\n    ElTooltip,\n    ElIcon\n  },\n  directives: {\n    ClickOutside\n  },\n  props: {\n    name: String,\n    id: String,\n    modelValue: {\n      type: [Array, String, Number, Boolean, Object],\n      default: void 0\n    },\n    autocomplete: {\n      type: String,\n      default: \"off\"\n    },\n    automaticDropdown: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    effect: {\n      type: String,\n      default: \"light\"\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    allowCreate: Boolean,\n    loading: Boolean,\n    popperClass: {\n      type: String,\n      default: \"\"\n    },\n    remote: Boolean,\n    loadingText: String,\n    noMatchText: String,\n    noDataText: String,\n    remoteMethod: Function,\n    filterMethod: Function,\n    multiple: Boolean,\n    multipleLimit: {\n      type: Number,\n      default: 0\n    },\n    placeholder: {\n      type: String\n    },\n    defaultFirstOption: Boolean,\n    reserveKeyword: {\n      type: Boolean,\n      default: true\n    },\n    valueKey: {\n      type: String,\n      default: \"value\"\n    },\n    collapseTags: Boolean,\n    collapseTagsTooltip: {\n      type: Boolean,\n      default: false\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: void 0\n    },\n    teleported: useTooltipContentProps.teleported,\n    persistent: {\n      type: Boolean,\n      default: true\n    },\n    clearIcon: {\n      type: [String, Object],\n      default: CircleClose\n    },\n    fitInputWidth: {\n      type: Boolean,\n      default: false\n    },\n    suffixIcon: {\n      type: [String, Object],\n      default: ArrowUp\n    },\n    tagType: {\n      ...tagProps.type,\n      default: \"info\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"remove-tag\", \"clear\", \"visible-change\", \"focus\", \"blur\"],\n  setup(props, ctx) {\n    const nsSelect = useNamespace(\"select\");\n    const nsInput = useNamespace(\"input\");\n    const {\n      t\n    } = useLocale();\n    const states = useSelectStates(props);\n    const {\n      optionsArray,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      setSelected,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      onOptionCreate,\n      onOptionDestroy,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n      reference,\n      input,\n      tooltipRef,\n      tags,\n      selectWrapper,\n      scrollbar,\n      queryChange,\n      groupQueryChange\n    } = useSelect(props, states, ctx);\n    const {\n      focus\n    } = useFocus(reference);\n    const {\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      cachedOptions,\n      optionsCount,\n      prefixWidth,\n      tagInMultiLine\n    } = toRefs(states);\n    const wrapperKls = computed(() => {\n      const classList = [nsSelect.b()];\n      const _selectSize = unref(selectSize);\n      if (_selectSize) {\n        classList.push(nsSelect.m(_selectSize));\n      }\n      if (props.disabled) {\n        classList.push(nsSelect.m(\"disabled\"));\n      }\n      return classList;\n    });\n    const selectTagsStyle = computed(() => ({\n      maxWidth: `${unref(inputWidth) - 32}px`,\n      width: \"100%\"\n    }));\n    provide(selectKey, reactive({\n      props,\n      options,\n      optionsArray,\n      cachedOptions,\n      optionsCount,\n      filteredOptionsCount,\n      hoverIndex,\n      handleOptionSelect,\n      onOptionCreate,\n      onOptionDestroy,\n      selectWrapper,\n      selected,\n      setSelected,\n      queryChange,\n      groupQueryChange\n    }));\n    onMounted(() => {\n      states.cachedPlaceHolder = currentPlaceholder.value = props.placeholder || t(\"el.select.placeholder\");\n      if (props.multiple && Array.isArray(props.modelValue) && props.modelValue.length > 0) {\n        currentPlaceholder.value = \"\";\n      }\n      addResizeListener(selectWrapper.value, handleResize);\n      if (reference.value && reference.value.$el) {\n        const sizeMap = {\n          large: 36,\n          default: 32,\n          small: 28\n        };\n        const input2 = reference.value.input;\n        states.initialInputHeight = input2.getBoundingClientRect().height || sizeMap[selectSize.value];\n      }\n      if (props.remote && props.multiple) {\n        resetInputHeight();\n      }\n      nextTick(() => {\n        if (!reference.value) return;\n        if (reference.value.$el) {\n          inputWidth.value = reference.value.$el.getBoundingClientRect().width;\n        }\n        if (ctx.slots.prefix) {\n          const inputChildNodes = reference.value.$el.childNodes;\n          const input2 = Array.from(inputChildNodes).find(item => item.tagName === \"INPUT\");\n          const prefix = reference.value.$el.querySelector(`.${nsInput.e(\"prefix\")}`);\n          prefixWidth.value = Math.max(prefix.getBoundingClientRect().width + 5, 30);\n          if (states.prefixWidth) {\n            input2.style.paddingLeft = `${Math.max(states.prefixWidth, 30)}px`;\n          }\n        }\n      });\n      setSelected();\n    });\n    onBeforeUnmount(() => {\n      removeResizeListener(selectWrapper.value, handleResize);\n    });\n    if (props.multiple && !Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, []);\n    }\n    if (!props.multiple && Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, \"\");\n    }\n    const popperPaneRef = computed(() => {\n      var _a, _b;\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const {\n      compatTeleported\n    } = useDeprecateAppendToBody(COMPONENT_NAME, \"popperAppendToBody\");\n    return {\n      tagInMultiLine,\n      prefixWidth,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n      focus,\n      reference,\n      input,\n      tooltipRef,\n      popperPaneRef,\n      tags,\n      selectWrapper,\n      scrollbar,\n      wrapperKls,\n      selectTagsStyle,\n      compatTeleported,\n      nsSelect\n    };\n  }\n});\nconst _hoisted_1 = {\n  class: \"select-trigger\"\n};\nconst _hoisted_2 = [\"disabled\", \"autocomplete\"];\nconst _hoisted_3 = {\n  style: {\n    \"height\": \"100%\",\n    \"display\": \"flex\",\n    \"justify-content\": \"center\",\n    \"align-items\": \"center\"\n  }\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tag = resolveComponent(\"el-tag\");\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_el_option = resolveComponent(\"el-option\");\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  const _component_el_select_menu = resolveComponent(\"el-select-menu\");\n  const _directive_click_outside = resolveDirective(\"click-outside\");\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"selectWrapper\",\n    class: normalizeClass(_ctx.wrapperKls),\n    onClick: _cache[24] || (_cache[24] = withModifiers((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), [\"stop\"]))\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"tooltipRef\",\n    visible: _ctx.dropMenuVisible,\n    \"onUpdate:visible\": _cache[23] || (_cache[23] = $event => _ctx.dropMenuVisible = $event),\n    placement: \"bottom-start\",\n    teleported: _ctx.compatTeleported,\n    \"popper-class\": [_ctx.nsSelect.e(\"popper\"), _ctx.popperClass],\n    \"fallback-placements\": [\"bottom-start\", \"top-start\", \"right\", \"left\"],\n    effect: _ctx.effect,\n    pure: \"\",\n    trigger: \"click\",\n    transition: `${_ctx.nsSelect.namespace.value}-zoom-in-top`,\n    \"stop-popper-mouse-event\": false,\n    \"gpu-acceleration\": false,\n    persistent: _ctx.persistent,\n    onShow: _ctx.handleMenuEnter\n  }, {\n    default: withCtx(() => [createElementVNode(\"div\", _hoisted_1, [_ctx.multiple ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      ref: \"tags\",\n      class: normalizeClass(_ctx.nsSelect.e(\"tags\")),\n      style: normalizeStyle(_ctx.selectTagsStyle)\n    }, [_ctx.collapseTags && _ctx.selected.length ? (openBlock(), createElementBlock(\"span\", {\n      key: 0,\n      class: normalizeClass([_ctx.nsSelect.b(\"tags-wrapper\"), {\n        \"has-prefix\": _ctx.prefixWidth && _ctx.selected.length\n      }])\n    }, [createVNode(_component_el_tag, {\n      closable: !_ctx.selectDisabled && !_ctx.selected[0].isDisabled,\n      size: _ctx.collapseTagSize,\n      hit: _ctx.selected[0].hitState,\n      type: _ctx.tagType,\n      \"disable-transitions\": \"\",\n      onClose: _cache[0] || (_cache[0] = $event => _ctx.deleteTag($event, _ctx.selected[0]))\n    }, {\n      default: withCtx(() => [createElementVNode(\"span\", {\n        class: normalizeClass(_ctx.nsSelect.e(\"tags-text\")),\n        style: normalizeStyle({\n          maxWidth: _ctx.inputWidth - 123 + \"px\"\n        })\n      }, toDisplayString(_ctx.selected[0].currentLabel), 7)]),\n      _: 1\n    }, 8, [\"closable\", \"size\", \"hit\", \"type\"]), _ctx.selected.length > 1 ? (openBlock(), createBlock(_component_el_tag, {\n      key: 0,\n      closable: false,\n      size: _ctx.collapseTagSize,\n      type: _ctx.tagType,\n      \"disable-transitions\": \"\"\n    }, {\n      default: withCtx(() => [_ctx.collapseTagsTooltip ? (openBlock(), createBlock(_component_el_tooltip, {\n        key: 0,\n        disabled: _ctx.dropMenuVisible,\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        effect: _ctx.effect,\n        placement: \"bottom\",\n        teleported: false\n      }, {\n        default: withCtx(() => [createElementVNode(\"span\", {\n          class: normalizeClass(_ctx.nsSelect.e(\"tags-text\"))\n        }, \"+ \" + toDisplayString(_ctx.selected.length - 1), 3)]),\n        content: withCtx(() => [createElementVNode(\"div\", {\n          class: normalizeClass(_ctx.nsSelect.e(\"collapse-tags\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.selected, (item, idx) => {\n          return openBlock(), createElementBlock(\"div\", {\n            key: idx,\n            class: normalizeClass(_ctx.nsSelect.e(\"collapse-tag\"))\n          }, [(openBlock(), createBlock(_component_el_tag, {\n            key: _ctx.getValueKey(item),\n            class: \"in-tooltip\",\n            closable: !_ctx.selectDisabled && !item.isDisabled,\n            size: _ctx.collapseTagSize,\n            hit: item.hitState,\n            type: _ctx.tagType,\n            \"disable-transitions\": \"\",\n            style: {\n              margin: \"2px\"\n            },\n            onClose: $event => _ctx.deleteTag($event, item)\n          }, {\n            default: withCtx(() => [createElementVNode(\"span\", {\n              class: normalizeClass(_ctx.nsSelect.e(\"tags-text\")),\n              style: normalizeStyle({\n                maxWidth: _ctx.inputWidth - 75 + \"px\"\n              })\n            }, toDisplayString(item.currentLabel), 7)]),\n            _: 2\n          }, 1032, [\"closable\", \"size\", \"hit\", \"type\", \"onClose\"]))], 2);\n        }), 128))], 2)]),\n        _: 1\n      }, 8, [\"disabled\", \"effect\"])) : (openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        class: normalizeClass(_ctx.nsSelect.e(\"tags-text\"))\n      }, \"+ \" + toDisplayString(_ctx.selected.length - 1), 3))]),\n      _: 1\n    }, 8, [\"size\", \"type\"])) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" <div> \"), !_ctx.collapseTags ? (openBlock(), createBlock(Transition, {\n      key: 1,\n      onAfterLeave: _ctx.resetInputHeight\n    }, {\n      default: withCtx(() => [createElementVNode(\"span\", {\n        class: normalizeClass([_ctx.nsSelect.b(\"tags-wrapper\"), {\n          \"has-prefix\": _ctx.prefixWidth && _ctx.selected.length\n        }])\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.selected, item => {\n        return openBlock(), createBlock(_component_el_tag, {\n          key: _ctx.getValueKey(item),\n          closable: !_ctx.selectDisabled && !item.isDisabled,\n          size: _ctx.collapseTagSize,\n          hit: item.hitState,\n          type: _ctx.tagType,\n          \"disable-transitions\": \"\",\n          onClose: $event => _ctx.deleteTag($event, item)\n        }, {\n          default: withCtx(() => [createElementVNode(\"span\", {\n            class: normalizeClass(_ctx.nsSelect.e(\"tags-text\")),\n            style: normalizeStyle({\n              maxWidth: _ctx.inputWidth - 75 + \"px\"\n            })\n          }, toDisplayString(item.currentLabel), 7)]),\n          _: 2\n        }, 1032, [\"closable\", \"size\", \"hit\", \"type\", \"onClose\"]);\n      }), 128))], 2)]),\n      _: 1\n    }, 8, [\"onAfterLeave\"])) : createCommentVNode(\"v-if\", true), createCommentVNode(\" </div> \"), _ctx.filterable ? withDirectives((openBlock(), createElementBlock(\"input\", {\n      key: 2,\n      ref: \"input\",\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.query = $event),\n      type: \"text\",\n      class: normalizeClass([_ctx.nsSelect.e(\"input\"), _ctx.nsSelect.is(_ctx.selectSize)]),\n      disabled: _ctx.selectDisabled,\n      autocomplete: _ctx.autocomplete,\n      style: normalizeStyle({\n        marginLeft: _ctx.prefixWidth && !_ctx.selected.length || _ctx.tagInMultiLine ? `${_ctx.prefixWidth}px` : \"\",\n        flexGrow: 1,\n        width: `${_ctx.inputLength / (_ctx.inputWidth - 32)}%`,\n        maxWidth: `${_ctx.inputWidth - 42}px`\n      }),\n      onFocus: _cache[2] || (_cache[2] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n      onBlur: _cache[3] || (_cache[3] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n      onKeyup: _cache[4] || (_cache[4] = (...args) => _ctx.managePlaceholder && _ctx.managePlaceholder(...args)),\n      onKeydown: [_cache[5] || (_cache[5] = (...args) => _ctx.resetInputState && _ctx.resetInputState(...args)), _cache[6] || (_cache[6] = withKeys(withModifiers($event => _ctx.navigateOptions(\"next\"), [\"prevent\"]), [\"down\"])), _cache[7] || (_cache[7] = withKeys(withModifiers($event => _ctx.navigateOptions(\"prev\"), [\"prevent\"]), [\"up\"])), _cache[8] || (_cache[8] = withKeys(withModifiers($event => _ctx.visible = false, [\"stop\", \"prevent\"]), [\"esc\"])), _cache[9] || (_cache[9] = withKeys(withModifiers((...args) => _ctx.selectOption && _ctx.selectOption(...args), [\"stop\", \"prevent\"]), [\"enter\"])), _cache[10] || (_cache[10] = withKeys((...args) => _ctx.deletePrevTag && _ctx.deletePrevTag(...args), [\"delete\"])), _cache[11] || (_cache[11] = withKeys($event => _ctx.visible = false, [\"tab\"]))],\n      onCompositionstart: _cache[12] || (_cache[12] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionupdate: _cache[13] || (_cache[13] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionend: _cache[14] || (_cache[14] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onInput: _cache[15] || (_cache[15] = (...args) => _ctx.debouncedQueryChange && _ctx.debouncedQueryChange(...args))\n    }, null, 46, _hoisted_2)), [[vModelText, _ctx.query]]) : createCommentVNode(\"v-if\", true)], 6)) : createCommentVNode(\"v-if\", true), createVNode(_component_el_input, {\n      id: _ctx.id,\n      ref: \"reference\",\n      modelValue: _ctx.selectedLabel,\n      \"onUpdate:modelValue\": _cache[16] || (_cache[16] = $event => _ctx.selectedLabel = $event),\n      type: \"text\",\n      placeholder: _ctx.currentPlaceholder,\n      name: _ctx.name,\n      autocomplete: _ctx.autocomplete,\n      size: _ctx.selectSize,\n      disabled: _ctx.selectDisabled,\n      readonly: _ctx.readonly,\n      \"validate-event\": false,\n      class: normalizeClass([_ctx.nsSelect.is(\"focus\", _ctx.visible)]),\n      tabindex: _ctx.multiple && _ctx.filterable ? -1 : void 0,\n      onFocus: _ctx.handleFocus,\n      onBlur: _ctx.handleBlur,\n      onInput: _ctx.debouncedOnInputChange,\n      onPaste: _ctx.debouncedOnInputChange,\n      onCompositionstart: _ctx.handleComposition,\n      onCompositionupdate: _ctx.handleComposition,\n      onCompositionend: _ctx.handleComposition,\n      onKeydown: [_cache[17] || (_cache[17] = withKeys(withModifiers($event => _ctx.navigateOptions(\"next\"), [\"stop\", \"prevent\"]), [\"down\"])), _cache[18] || (_cache[18] = withKeys(withModifiers($event => _ctx.navigateOptions(\"prev\"), [\"stop\", \"prevent\"]), [\"up\"])), withKeys(withModifiers(_ctx.selectOption, [\"stop\", \"prevent\"]), [\"enter\"]), _cache[19] || (_cache[19] = withKeys(withModifiers($event => _ctx.visible = false, [\"stop\", \"prevent\"]), [\"esc\"])), _cache[20] || (_cache[20] = withKeys($event => _ctx.visible = false, [\"tab\"]))],\n      onMouseenter: _cache[21] || (_cache[21] = $event => _ctx.inputHovering = true),\n      onMouseleave: _cache[22] || (_cache[22] = $event => _ctx.inputHovering = false)\n    }, createSlots({\n      suffix: withCtx(() => [_ctx.iconComponent ? withDirectives((openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([_ctx.nsSelect.e(\"caret\"), _ctx.nsSelect.e(\"icon\"), _ctx.iconReverse])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])), [[vShow, !_ctx.showClose]]) : createCommentVNode(\"v-if\", true), _ctx.showClose && _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 1,\n        class: normalizeClass([_ctx.nsSelect.e(\"caret\"), _ctx.nsSelect.e(\"icon\")]),\n        onClick: _ctx.handleClearClick\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)]),\n      _: 2\n    }, [_ctx.$slots.prefix ? {\n      name: \"prefix\",\n      fn: withCtx(() => [createElementVNode(\"div\", _hoisted_3, [renderSlot(_ctx.$slots, \"prefix\")])])\n    } : void 0]), 1032, [\"id\", \"modelValue\", \"placeholder\", \"name\", \"autocomplete\", \"size\", \"disabled\", \"readonly\", \"class\", \"tabindex\", \"onFocus\", \"onBlur\", \"onInput\", \"onPaste\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\", \"onKeydown\"])])]),\n    content: withCtx(() => [createVNode(_component_el_select_menu, null, {\n      default: withCtx(() => [withDirectives(createVNode(_component_el_scrollbar, {\n        ref: \"scrollbar\",\n        tag: \"ul\",\n        \"wrap-class\": _ctx.nsSelect.be(\"dropdown\", \"wrap\"),\n        \"view-class\": _ctx.nsSelect.be(\"dropdown\", \"list\"),\n        class: normalizeClass([_ctx.nsSelect.is(\"empty\", !_ctx.allowCreate && _ctx.query && _ctx.filteredOptionsCount === 0)])\n      }, {\n        default: withCtx(() => [_ctx.showNewOption ? (openBlock(), createBlock(_component_el_option, {\n          key: 0,\n          value: _ctx.query,\n          created: true\n        }, null, 8, [\"value\"])) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"wrap-class\", \"view-class\", \"class\"]), [[vShow, _ctx.options.size > 0 && !_ctx.loading]]), _ctx.emptyText && (!_ctx.allowCreate || _ctx.loading || _ctx.allowCreate && _ctx.options.size === 0) ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [_ctx.$slots.empty ? renderSlot(_ctx.$slots, \"empty\", {\n        key: 0\n      }) : (openBlock(), createElementBlock(\"p\", {\n        key: 1,\n        class: normalizeClass(_ctx.nsSelect.be(\"dropdown\", \"empty\"))\n      }, toDisplayString(_ctx.emptyText), 3))], 2112)) : createCommentVNode(\"v-if\", true)]),\n      _: 3\n    })]),\n    _: 3\n  }, 8, [\"visible\", \"teleported\", \"popper-class\", \"effect\", \"transition\", \"persistent\", \"onShow\"])], 2)), [[_directive_click_outside, _ctx.handleClose, _ctx.popperPaneRef]]);\n}\nvar Select = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Select as default };","map":{"version":3,"mappings":"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","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","componentName","components","ElInput","ElSelectMenu","ElOption","ElTag","ElScrollbar","ElTooltip","ElIcon","directives","ClickOutside","props","id","modelValue","type","Array","Number","Boolean","default","autocomplete","automaticDropdown","size","validator","effect","disabled","clearable","filterable","allowCreate","loading","popperClass","remote","loadingText","noMatchText","noDataText","remoteMethod","filterMethod","multiple","multipleLimit","placeholder","defaultFirstOption","reserveKeyword","valueKey","collapseTags","collapseTagsTooltip","popperAppendToBody","teleported","useTooltipContentProps","persistent","clearIcon","String","fitInputWidth","suffixIcon","tagType","tagProps","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","ctx","nsSelect","useNamespace","nsInput","t","states","useSelectStates","optionsArray","selectSize","readonly","handleResize","collapseTagSize","debouncedOnInputChange","debouncedQueryChange","deletePrevTag","deleteTag","deleteSelected","handleOptionSelect","scrollToOption","setSelected","resetInputHeight","managePlaceholder","showClose","selectDisabled","iconComponent","iconReverse","showNewOption","emptyText","toggleLastOptionHitState","resetInputState","handleComposition","onOptionCreate","onOptionDestroy","handleMenuEnter","handleFocus","blur","handleBlur","handleClearClick","handleClose","toggleMenu","selectOption","getValueKey","navigateOptions","dropMenuVisible","reference","input","tooltipRef","tags","selectWrapper","scrollbar","queryChange","groupQueryChange","focus","useFocus","inputWidth","selected","inputLength","filteredOptionsCount","visible","softFocus","selectedLabel","hoverIndex","query","inputHovering","currentPlaceholder","menuVisibleOnFocus","isOnComposition","isSilentBlur","options","cachedOptions","optionsCount","prefixWidth","tagInMultiLine","toRefs","computed","_selectSize","unref","classList","m","maxWidth","width","provide","selectKey","reactive","onMounted","cachedPlaceHolder","value","addResizeListener","$el","sizeMap","large","small","initialInputHeight","getBoundingClientRect","nextTick","slots","prefix","from","find","item","tagName","querySelector","e","Math","input2","style","paddingLeft","onBeforeUnmount","removeResizeListener","emit","compatTeleported","popperPaneRef","wrapperKls","selectTagsStyle","_withDirectives","ref","class","onClick","placement","pure","trigger","transition","onShow","_createElementVNode","key","_normalizeClass","_ctx","_component_el_tag","closable","hit","onClose","content","_openBlock","margin","onAfterLeave","_createCommentVNode","flexGrow","onFocus","_cache","onBlur","onKeyup","onKeydown","onCompositionstart","onCompositionupdate","onCompositionend","onInput","tabindex","onPaste","_withKeys","onMouseenter","onMouseleave","suffix","fn","tag","be","created"],"sources":["../../../../../../packages/components/select/src/select.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"selectWrapper\"\n    v-click-outside:[popperPaneRef]=\"handleClose\"\n    :class=\"wrapperKls\"\n    @click.stop=\"toggleMenu\"\n  >\n    <el-tooltip\n      ref=\"tooltipRef\"\n      v-model:visible=\"dropMenuVisible\"\n      placement=\"bottom-start\"\n      :teleported=\"compatTeleported\"\n      :popper-class=\"[nsSelect.e('popper'), popperClass]\"\n      :fallback-placements=\"['bottom-start', 'top-start', 'right', 'left']\"\n      :effect=\"effect\"\n      pure\n      trigger=\"click\"\n      :transition=\"`${nsSelect.namespace.value}-zoom-in-top`\"\n      :stop-popper-mouse-event=\"false\"\n      :gpu-acceleration=\"false\"\n      :persistent=\"persistent\"\n      @show=\"handleMenuEnter\"\n    >\n      <template #default>\n        <div class=\"select-trigger\">\n          <div\n            v-if=\"multiple\"\n            ref=\"tags\"\n            :class=\"nsSelect.e('tags')\"\n            :style=\"selectTagsStyle\"\n          >\n            <span\n              v-if=\"collapseTags && selected.length\"\n              :class=\"[\n                nsSelect.b('tags-wrapper'),\n                { 'has-prefix': prefixWidth && selected.length },\n              ]\"\n            >\n              <el-tag\n                :closable=\"!selectDisabled && !selected[0].isDisabled\"\n                :size=\"collapseTagSize\"\n                :hit=\"selected[0].hitState\"\n                :type=\"tagType\"\n                disable-transitions\n                @close=\"deleteTag($event, selected[0])\"\n              >\n                <span\n                  :class=\"nsSelect.e('tags-text')\"\n                  :style=\"{ maxWidth: inputWidth - 123 + 'px' }\"\n                  >{{ selected[0].currentLabel }}</span\n                >\n              </el-tag>\n              <el-tag\n                v-if=\"selected.length > 1\"\n                :closable=\"false\"\n                :size=\"collapseTagSize\"\n                :type=\"tagType\"\n                disable-transitions\n              >\n                <el-tooltip\n                  v-if=\"collapseTagsTooltip\"\n                  :disabled=\"dropMenuVisible\"\n                  :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                  :effect=\"effect\"\n                  placement=\"bottom\"\n                  :teleported=\"false\"\n                >\n                  <template #default>\n                    <span :class=\"nsSelect.e('tags-text')\"\n                      >+ {{ selected.length - 1 }}</span\n                    >\n                  </template>\n                  <template #content>\n                    <div :class=\"nsSelect.e('collapse-tags')\">\n                      <div\n                        v-for=\"(item, idx) in selected\"\n                        :key=\"idx\"\n                        :class=\"nsSelect.e('collapse-tag')\"\n                      >\n                        <el-tag\n                          :key=\"getValueKey(item)\"\n                          class=\"in-tooltip\"\n                          :closable=\"!selectDisabled && !item.isDisabled\"\n                          :size=\"collapseTagSize\"\n                          :hit=\"item.hitState\"\n                          :type=\"tagType\"\n                          disable-transitions\n                          :style=\"{ margin: '2px' }\"\n                          @close=\"deleteTag($event, item)\"\n                        >\n                          <span\n                            :class=\"nsSelect.e('tags-text')\"\n                            :style=\"{\n                              maxWidth: inputWidth - 75 + 'px',\n                            }\"\n                            >{{ item.currentLabel }}</span\n                          >\n                        </el-tag>\n                      </div>\n                    </div>\n                  </template>\n                </el-tooltip>\n                <span v-else :class=\"nsSelect.e('tags-text')\"\n                  >+ {{ selected.length - 1 }}</span\n                >\n              </el-tag>\n            </span>\n            <!-- <div> -->\n            <transition v-if=\"!collapseTags\" @after-leave=\"resetInputHeight\">\n              <span\n                :class=\"[\n                  nsSelect.b('tags-wrapper'),\n                  { 'has-prefix': prefixWidth && selected.length },\n                ]\"\n              >\n                <el-tag\n                  v-for=\"item in selected\"\n                  :key=\"getValueKey(item)\"\n                  :closable=\"!selectDisabled && !item.isDisabled\"\n                  :size=\"collapseTagSize\"\n                  :hit=\"item.hitState\"\n                  :type=\"tagType\"\n                  disable-transitions\n                  @close=\"deleteTag($event, item)\"\n                >\n                  <span\n                    :class=\"nsSelect.e('tags-text')\"\n                    :style=\"{ maxWidth: inputWidth - 75 + 'px' }\"\n                    >{{ item.currentLabel }}</span\n                  >\n                </el-tag>\n              </span>\n            </transition>\n            <!-- </div> -->\n            <input\n              v-if=\"filterable\"\n              ref=\"input\"\n              v-model=\"query\"\n              type=\"text\"\n              :class=\"[nsSelect.e('input'), nsSelect.is(selectSize)]\"\n              :disabled=\"selectDisabled\"\n              :autocomplete=\"autocomplete\"\n              :style=\"{\n                marginLeft:\n                  (prefixWidth && !selected.length) || tagInMultiLine\n                    ? `${prefixWidth}px`\n                    : '',\n                flexGrow: 1,\n                width: `${inputLength / (inputWidth - 32)}%`,\n                maxWidth: `${inputWidth - 42}px`,\n              }\"\n              @focus=\"handleFocus\"\n              @blur=\"handleBlur\"\n              @keyup=\"managePlaceholder\"\n              @keydown=\"resetInputState\"\n              @keydown.down.prevent=\"navigateOptions('next')\"\n              @keydown.up.prevent=\"navigateOptions('prev')\"\n              @keydown.esc.stop.prevent=\"visible = false\"\n              @keydown.enter.stop.prevent=\"selectOption\"\n              @keydown.delete=\"deletePrevTag\"\n              @keydown.tab=\"visible = false\"\n              @compositionstart=\"handleComposition\"\n              @compositionupdate=\"handleComposition\"\n              @compositionend=\"handleComposition\"\n              @input=\"debouncedQueryChange\"\n            />\n          </div>\n          <el-input\n            :id=\"id\"\n            ref=\"reference\"\n            v-model=\"selectedLabel\"\n            type=\"text\"\n            :placeholder=\"currentPlaceholder\"\n            :name=\"name\"\n            :autocomplete=\"autocomplete\"\n            :size=\"selectSize\"\n            :disabled=\"selectDisabled\"\n            :readonly=\"readonly\"\n            :validate-event=\"false\"\n            :class=\"[nsSelect.is('focus', visible)]\"\n            :tabindex=\"multiple && filterable ? -1 : undefined\"\n            @focus=\"handleFocus\"\n            @blur=\"handleBlur\"\n            @input=\"debouncedOnInputChange\"\n            @paste=\"debouncedOnInputChange\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n            @keydown.down.stop.prevent=\"navigateOptions('next')\"\n            @keydown.up.stop.prevent=\"navigateOptions('prev')\"\n            @keydown.enter.stop.prevent=\"selectOption\"\n            @keydown.esc.stop.prevent=\"visible = false\"\n            @keydown.tab=\"visible = false\"\n            @mouseenter=\"inputHovering = true\"\n            @mouseleave=\"inputHovering = false\"\n          >\n            <template v-if=\"$slots.prefix\" #prefix>\n              <div\n                style=\"\n                  height: 100%;\n                  display: flex;\n                  justify-content: center;\n                  align-items: center;\n                \"\n              >\n                <slot name=\"prefix\" />\n              </div>\n            </template>\n            <template #suffix>\n              <el-icon\n                v-if=\"iconComponent\"\n                v-show=\"!showClose\"\n                :class=\"[nsSelect.e('caret'), nsSelect.e('icon'), iconReverse]\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <el-icon\n                v-if=\"showClose && clearIcon\"\n                :class=\"[nsSelect.e('caret'), nsSelect.e('icon')]\"\n                @click=\"handleClearClick\"\n              >\n                <component :is=\"clearIcon\" />\n              </el-icon>\n            </template>\n          </el-input>\n        </div>\n      </template>\n      <template #content>\n        <el-select-menu>\n          <el-scrollbar\n            v-show=\"options.size > 0 && !loading\"\n            ref=\"scrollbar\"\n            tag=\"ul\"\n            :wrap-class=\"nsSelect.be('dropdown', 'wrap')\"\n            :view-class=\"nsSelect.be('dropdown', 'list')\"\n            :class=\"[\n              nsSelect.is(\n                'empty',\n                !allowCreate && query && filteredOptionsCount === 0\n              ),\n            ]\"\n          >\n            <el-option v-if=\"showNewOption\" :value=\"query\" :created=\"true\" />\n            <slot />\n          </el-scrollbar>\n          <template\n            v-if=\"\n              emptyText &&\n              (!allowCreate || loading || (allowCreate && options.size === 0))\n            \"\n          >\n            <slot v-if=\"$slots.empty\" name=\"empty\" />\n            <p v-else :class=\"nsSelect.be('dropdown', 'empty')\">\n              {{ emptyText }}\n            </p>\n          </template>\n        </el-select-menu>\n      </template>\n    </el-tooltip>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  toRefs,\n  defineComponent,\n  onMounted,\n  onBeforeUnmount,\n  nextTick,\n  reactive,\n  provide,\n  computed,\n  unref,\n} from 'vue'\nimport { ClickOutside } from '@element-plus/directives'\nimport { useFocus, useLocale, useNamespace } from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip, {\n  useTooltipContentProps,\n} from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag, { tagProps } from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport { useDeprecateAppendToBody } from '@element-plus/components/popper'\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '@element-plus/constants'\nimport {\n  addResizeListener,\n  removeResizeListener,\n  isValidComponentSize,\n} from '@element-plus/utils'\nimport { CircleClose, ArrowUp } from '@element-plus/icons-vue'\nimport ElOption from './option.vue'\nimport ElSelectMenu from './select-dropdown.vue'\nimport { useSelect, useSelectStates } from './useSelect'\nimport { selectKey } from './token'\n\nimport type { PropType, Component } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { SelectContext } from './token'\n\nconst COMPONENT_NAME = 'ElSelect'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  componentName: COMPONENT_NAME,\n  components: {\n    ElInput,\n    ElSelectMenu,\n    ElOption,\n    ElTag,\n    ElScrollbar,\n    ElTooltip,\n    ElIcon,\n  },\n  directives: { ClickOutside },\n  props: {\n    name: String,\n    id: String,\n    modelValue: {\n      type: [Array, String, Number, Boolean, Object],\n      default: undefined,\n    },\n    autocomplete: {\n      type: String,\n      default: 'off',\n    },\n    automaticDropdown: Boolean,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    effect: {\n      type: String as PropType<'light' | 'dark' | string>,\n      default: 'light',\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    allowCreate: Boolean,\n    loading: Boolean,\n    popperClass: {\n      type: String,\n      default: '',\n    },\n    remote: Boolean,\n    loadingText: String,\n    noMatchText: String,\n    noDataText: String,\n    remoteMethod: Function,\n    filterMethod: Function,\n    multiple: Boolean,\n    multipleLimit: {\n      type: Number,\n      default: 0,\n    },\n    placeholder: {\n      type: String,\n    },\n    defaultFirstOption: Boolean,\n    reserveKeyword: {\n      type: Boolean,\n      default: true,\n    },\n    valueKey: {\n      type: String,\n      default: 'value',\n    },\n    collapseTags: Boolean,\n    collapseTagsTooltip: {\n      type: Boolean,\n      default: false,\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: undefined,\n    },\n    teleported: useTooltipContentProps.teleported,\n    persistent: {\n      type: Boolean,\n      default: true,\n    },\n    clearIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: CircleClose,\n    },\n    fitInputWidth: {\n      type: Boolean,\n      default: false,\n    },\n    suffixIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: ArrowUp,\n    },\n    // eslint-disable-next-line vue/require-prop-types\n    tagType: { ...tagProps.type, default: 'info' },\n  },\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    'remove-tag',\n    'clear',\n    'visible-change',\n    'focus',\n    'blur',\n  ],\n\n  setup(props, ctx) {\n    const nsSelect = useNamespace('select')\n    const nsInput = useNamespace('input')\n    const { t } = useLocale()\n    const states = useSelectStates(props)\n    const {\n      optionsArray,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      setSelected,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      onOptionCreate,\n      onOptionDestroy,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n\n      reference,\n      input,\n      tooltipRef,\n      tags,\n      selectWrapper,\n      scrollbar,\n      queryChange,\n      groupQueryChange,\n    } = useSelect(props, states, ctx)\n\n    const { focus } = useFocus(reference)\n\n    const {\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      cachedOptions,\n      optionsCount,\n      prefixWidth,\n      tagInMultiLine,\n    } = toRefs(states)\n\n    const wrapperKls = computed(() => {\n      const classList = [nsSelect.b()]\n      const _selectSize = unref(selectSize)\n      if (_selectSize) {\n        classList.push(nsSelect.m(_selectSize))\n      }\n      if (props.disabled) {\n        classList.push(nsSelect.m('disabled'))\n      }\n      return classList\n    })\n\n    const selectTagsStyle = computed(() => ({\n      maxWidth: `${unref(inputWidth) - 32}px`,\n      width: '100%',\n    }))\n\n    provide(\n      selectKey,\n      reactive({\n        props,\n        options,\n        optionsArray,\n        cachedOptions,\n        optionsCount,\n        filteredOptionsCount,\n        hoverIndex,\n        handleOptionSelect,\n        onOptionCreate,\n        onOptionDestroy,\n        selectWrapper,\n        selected,\n        setSelected,\n        queryChange,\n        groupQueryChange,\n      }) as unknown as SelectContext\n    )\n\n    onMounted(() => {\n      states.cachedPlaceHolder = currentPlaceholder.value =\n        props.placeholder || t('el.select.placeholder')\n      if (\n        props.multiple &&\n        Array.isArray(props.modelValue) &&\n        props.modelValue.length > 0\n      ) {\n        currentPlaceholder.value = ''\n      }\n      addResizeListener(selectWrapper.value as any, handleResize)\n      if (reference.value && reference.value.$el) {\n        const sizeMap = {\n          large: 36,\n          default: 32,\n          small: 28,\n        }\n        const input = reference.value.input as HTMLInputElement\n        states.initialInputHeight =\n          input.getBoundingClientRect().height || sizeMap[selectSize.value]\n      }\n      if (props.remote && props.multiple) {\n        resetInputHeight()\n      }\n      nextTick(() => {\n        if (!reference.value) return\n        if (reference.value.$el) {\n          inputWidth.value = reference.value.$el.getBoundingClientRect().width\n        }\n        if (ctx.slots.prefix) {\n          const inputChildNodes = reference.value.$el.childNodes\n          const input = (Array.from(inputChildNodes) as HTMLElement[]).find(\n            (item) => item.tagName === 'INPUT'\n          )\n          const prefix = reference.value.$el.querySelector(\n            `.${nsInput.e('prefix')}`\n          )\n          prefixWidth.value = Math.max(\n            prefix.getBoundingClientRect().width + 5,\n            30\n          )\n          if (states.prefixWidth) {\n            input.style.paddingLeft = `${Math.max(states.prefixWidth, 30)}px`\n          }\n        }\n      })\n      setSelected()\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(selectWrapper.value as any, handleResize)\n    })\n\n    if (props.multiple && !Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, [])\n    }\n    if (!props.multiple && Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, '')\n    }\n\n    const popperPaneRef = computed(() => {\n      return tooltipRef.value?.popperRef?.contentRef\n    })\n\n    const { compatTeleported } = useDeprecateAppendToBody(\n      COMPONENT_NAME,\n      'popperAppendToBody'\n    )\n\n    return {\n      tagInMultiLine,\n      prefixWidth,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n      focus,\n\n      reference,\n      input,\n      tooltipRef,\n      popperPaneRef,\n      tags,\n      selectWrapper,\n      scrollbar,\n\n      wrapperKls,\n      selectTagsStyle,\n      compatTeleported,\n      nsSelect,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}