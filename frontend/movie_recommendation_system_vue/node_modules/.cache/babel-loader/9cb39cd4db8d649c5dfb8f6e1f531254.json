{"ast":null,"code":"import { defineComponent, inject, onMounted, watch, resolveComponent, openBlock, createBlock, mergeProps, withCtx, renderSlot, createCommentVNode } from 'vue';\nimport '../../slot/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { usePopperTriggerProps } from './popper.mjs';\nimport { POPPER_INJECTION_KEY } from './tokens.mjs';\nimport { unwrapMeasurableEl } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { OnlyChild } from '../../slot/src/only-child.mjs';\nimport { useForwardRef } from '../../../hooks/use-forward-ref/index.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElPopperTrigger\",\n  components: {\n    ElOnlyChild: OnlyChild\n  },\n  inheritAttrs: false,\n  props: {\n    ...usePopperTriggerProps,\n    onMouseenter: Function,\n    onMouseleave: Function,\n    onClick: Function,\n    onKeydown: Function,\n    onFocus: Function,\n    onBlur: Function,\n    onContextmenu: Function,\n    id: String,\n    open: Boolean\n  },\n  setup(props) {\n    const {\n      triggerRef\n    } = inject(POPPER_INJECTION_KEY, void 0);\n    useForwardRef(triggerRef);\n    onMounted(() => {\n      watch(() => props.virtualRef, val => {\n        if (val) {\n          triggerRef.value = unwrapMeasurableEl(val);\n        }\n      }, {\n        immediate: true\n      });\n      watch(() => triggerRef.value, (el, prevEl) => {\n        if (isElement(el)) {\n          ;\n          [\"onMouseenter\", \"onMouseleave\", \"onClick\", \"onKeydown\", \"onFocus\", \"onBlur\", \"onContextmenu\"].forEach(eventName => {\n            const handler = props[eventName];\n            if (handler) {\n              ;\n              el.addEventListener(eventName.slice(2).toLowerCase(), handler);\n              prevEl == null ? void 0 : prevEl.removeEventListener(eventName.slice(2).toLowerCase(), handler);\n            }\n          });\n        }\n      }, {\n        immediate: true\n      });\n    });\n    return {\n      triggerRef\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_only_child = resolveComponent(\"el-only-child\");\n  return !_ctx.virtualTriggering ? (openBlock(), createBlock(_component_el_only_child, mergeProps({\n    key: 0\n  }, _ctx.$attrs, {\n    \"aria-describedby\": _ctx.open ? _ctx.id : void 0\n  }), {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 16, [\"aria-describedby\"])) : createCommentVNode(\"v-if\", true);\n}\nvar ElPopperTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ElPopperTrigger as default };","map":{"version":3,"mappings":";;;;;;;;;;;AAmBA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,YAAY;IAAAC,aAAEA;EAAA;EACdC,YAAc;EACdC,KAAO;IACF;IACHC,YAAc;IACdC,YAAc;IACdC,OAAS;IACTC,SAAW;IACXC,OAAS;IACTC,MAAQ;IACRC,aAAe;IACfC,EAAI;IACJC,IAAM;EAAA;EAERC,MAAMV,KAAO;IACL;MAAEW;IAAe,WAAOC,oBAAsB;IACtCC;IAEdC,UAAU,MAAM;MACdC,MACE,MAAMf,MAAMgB,UACZ,EAACC,GAAQ;QACP,IAAIA,GAAK;UACPN,WAAWO,QAAQC,kBAAmB;QAAA;MAAA,CAG1C;QACEC,SAAW;MAAA;MAIfL,MACE,MAAMJ,WAAWO,KACjB,GAACG,IAAIC,MAAW;QACd,IAAIC,UAAUF,EAAK;UACjB;UAAC,CACC,gBACA,gBACA,WACA,aACA,WACA,UACA,gBACA,SAASG,SAAc;YACvB,MAAMC,UAAUzB,KAAM;YACtB,IAAIyB,OAAS;cACX;cAAEJ,EAAmB,kBACnBG,SAAU,OAAM,GAAGE,WACnB;cAEAJ,MAAwB,0BACd,oBACV;YAAA;UAAA;QAAA;MAAA,CAMV;QACEF,SAAW;MAAA;IAAA;IAKV;MACLT;IAAA;EAAA;AAAA;;;EApFK,+CADTgB,WAMgB,2BANhBC,UAMgB;IAAAC;EAAA,GAJNC,IAAM;IACb,oBAAkBA,YAAOA,IAAK;EAAA;qBAE/B,MAAQ,CAARC,UAAQ;IAAAC","names":["_sfc_main","defineComponent","name","components","ElOnlyChild","inheritAttrs","props","onMouseenter","onMouseleave","onClick","onKeydown","onFocus","onBlur","onContextmenu","id","open","setup","triggerRef","POPPER_INJECTION_KEY","useForwardRef","onMounted","watch","virtualRef","val","value","unwrapMeasurableEl","immediate","el","prevEl","isElement","eventName","handler","toLowerCase","_createBlock","_mergeProps","key","_ctx","_renderSlot","_"],"sources":["../../../../../../packages/components/popper/src/trigger.vue"],"sourcesContent":["<template>\n  <el-only-child\n    v-if=\"!virtualTriggering\"\n    v-bind=\"$attrs\"\n    :aria-describedby=\"open ? id : undefined\"\n  >\n    <slot />\n  </el-only-child>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, onMounted, watch } from 'vue'\nimport { ElOnlyChild } from '@element-plus/components/slot'\nimport { useForwardRef } from '@element-plus/hooks'\nimport { isElement } from '@element-plus/utils'\nimport { usePopperTriggerProps } from './popper'\nimport { POPPER_INJECTION_KEY } from './tokens'\nimport { unwrapMeasurableEl } from './utils'\n\nexport default defineComponent({\n  name: 'ElPopperTrigger',\n  components: { ElOnlyChild },\n  inheritAttrs: false,\n  props: {\n    ...usePopperTriggerProps,\n    onMouseenter: Function,\n    onMouseleave: Function,\n    onClick: Function,\n    onKeydown: Function,\n    onFocus: Function,\n    onBlur: Function,\n    onContextmenu: Function,\n    id: String,\n    open: Boolean,\n  },\n  setup(props) {\n    const { triggerRef } = inject(POPPER_INJECTION_KEY, undefined)!\n    useForwardRef(triggerRef)\n\n    onMounted(() => {\n      watch(\n        () => props.virtualRef,\n        (val) => {\n          if (val) {\n            triggerRef.value = unwrapMeasurableEl(val)\n          }\n        },\n        {\n          immediate: true,\n        }\n      )\n\n      watch(\n        () => triggerRef.value,\n        (el, prevEl) => {\n          if (isElement(el)) {\n            ;[\n              'onMouseenter',\n              'onMouseleave',\n              'onClick',\n              'onKeydown',\n              'onFocus',\n              'onBlur',\n              'onContextmenu',\n            ].forEach((eventName) => {\n              const handler = props[eventName]\n              if (handler) {\n                ;(el as HTMLElement).addEventListener(\n                  eventName.slice(2).toLowerCase(),\n                  handler\n                )\n                ;(prevEl as HTMLElement)?.removeEventListener(\n                  eventName.slice(2).toLowerCase(),\n                  handler\n                )\n              }\n            })\n          }\n        },\n        {\n          immediate: true,\n        }\n      )\n    })\n\n    return {\n      triggerRef,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}