{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, withModifiers, withDirectives, withKeys, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons-vue';\nimport { inputNumberProps, inputNumberEmits } from './input-number.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../directives/repeat-click/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { isNumber } from '@vueuse/core';\nconst _sfc_main = defineComponent({\n  name: \"ElInputNumber\",\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus\n  },\n  directives: {\n    RepeatClick\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(props, {\n    emit\n  }) {\n    const input = ref();\n    const data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n    const {\n      formItem\n    } = useFormItem();\n    const ns = useNamespace(\"input-number\");\n    const minDisabled = computed(() => _decrease(props.modelValue) < props.min);\n    const maxDisabled = computed(() => _increase(props.modelValue) > props.max);\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step);\n      if (props.precision !== void 0) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\"InputNumber\", \"precision should not be less than the decimal places of step\");\n        }\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n    const inputNumberSize = useSize();\n    const inputNumberDisabled = useDisabled();\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n      let currentValue = data.currentValue;\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n        if (props.precision !== void 0) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n      return currentValue;\n    });\n    const toPrecision = (num, pre) => {\n      if (pre === void 0) pre = numPrecision.value;\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`);\n    };\n    const getPrecision = value => {\n      if (value === void 0) return 0;\n      const valueString = value.toString();\n      const dotPosition = valueString.indexOf(\".\");\n      let precision = 0;\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n      return precision;\n    };\n    const _increase = val => {\n      if (!isNumber(val)) return data.currentValue;\n      const precisionFactor = 10 ** numPrecision.value;\n      val = isNumber(val) ? val : Number.NaN;\n      return toPrecision((precisionFactor * val + precisionFactor * props.step) / precisionFactor);\n    };\n    const _decrease = val => {\n      if (!isNumber(val)) return data.currentValue;\n      const precisionFactor = 10 ** numPrecision.value;\n      val = isNumber(val) ? val : Number.NaN;\n      return toPrecision((precisionFactor * val - precisionFactor * props.step) / precisionFactor);\n    };\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return;\n      const value = props.modelValue || 0;\n      const newVal = _increase(value);\n      setCurrentValue(newVal);\n    };\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return;\n      const value = props.modelValue || 0;\n      const newVal = _decrease(value);\n      setCurrentValue(newVal);\n    };\n    const setCurrentValue = newVal => {\n      var _a;\n      const oldVal = data.currentValue;\n      if (props.stepStrictly) {\n        const stepPrecision = getPrecision(props.step);\n        const precisionFactor = 10 ** stepPrecision;\n        newVal = Math.round(newVal / props.step) * precisionFactor * props.step / precisionFactor;\n      }\n      if (typeof newVal === \"number\" && props.precision !== void 0) {\n        newVal = toPrecision(newVal, props.precision);\n      }\n      if (newVal !== void 0 && newVal >= props.max) newVal = props.max;\n      if (newVal !== void 0 && newVal <= props.min) newVal = props.min;\n      if (oldVal === newVal) return;\n      if (!isNumber(newVal)) {\n        newVal = void 0;\n      }\n      data.userInput = null;\n      emit(\"update:modelValue\", newVal);\n      emit(\"input\", newVal);\n      emit(\"change\", newVal, oldVal);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      data.currentValue = newVal;\n    };\n    const handleInput = value => {\n      return data.userInput = value;\n    };\n    const handleInputChange = value => {\n      const newVal = value !== \"\" ? Number(value) : \"\";\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n      data.userInput = null;\n    };\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    const blur = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n    const handleFocus = event => {\n      emit(\"focus\", event);\n    };\n    const handleBlur = event => {\n      var _a;\n      emit(\"blur\", event);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n    };\n    watch(() => props.modelValue, value => {\n      let newVal = Number(value);\n      if (value === null) {\n        newVal = Number.NaN;\n      }\n      if (!Number.isNaN(newVal)) {\n        if (props.stepStrictly) {\n          const stepPrecision = getPrecision(props.step);\n          const precisionFactor = 10 ** stepPrecision;\n          newVal = Math.round(newVal / props.step) * precisionFactor * props.step / precisionFactor;\n        }\n        if (props.precision !== void 0) {\n          newVal = toPrecision(newVal, props.precision);\n        }\n        if (newVal > props.max) {\n          newVal = props.max;\n          emit(\"update:modelValue\", newVal);\n        }\n        if (newVal < props.min) {\n          newVal = props.min;\n          emit(\"update:modelValue\", newVal);\n        }\n      }\n      data.currentValue = newVal;\n      data.userInput = null;\n    }, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n      innerInput.setAttribute(\"aria-valuemax\", String(props.max));\n      innerInput.setAttribute(\"aria-valuemin\", String(props.min));\n      innerInput.setAttribute(\"aria-valuenow\", String(data.currentValue));\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n      if (!isNumber(props.modelValue)) {\n        let val = Number(props.modelValue);\n        if (Number.isNaN(val)) {\n          val = void 0;\n        }\n        emit(\"update:modelValue\", val);\n      }\n    });\n    onUpdated(() => {\n      var _a;\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput == null ? void 0 : innerInput.setAttribute(\"aria-valuenow\", data.currentValue);\n    });\n    return {\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _component_minus = resolveComponent(\"minus\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n  const _component_plus = resolveComponent(\"plus\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.inputNumberSize), _ctx.ns.is(\"disabled\", _ctx.inputNumberDisabled), _ctx.ns.is(\"without-controls\", !_ctx.controls), _ctx.ns.is(\"controls-right\", _ctx.controlsAtRight)]),\n    onDragstart: _cache[2] || (_cache[2] = withModifiers(() => {}, [\"prevent\"]))\n  }, [_ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    role: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"decrease\"), _ctx.ns.is(\"disabled\", _ctx.minDisabled)]),\n    onKeydown: _cache[0] || (_cache[0] = withKeys((...args) => _ctx.decrease && _ctx.decrease(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_down, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_minus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 34)), [[_directive_repeat_click, _ctx.decrease]]) : createCommentVNode(\"v-if\", true), _ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    role: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"increase\"), _ctx.ns.is(\"disabled\", _ctx.maxDisabled)]),\n    onKeydown: _cache[1] || (_cache[1] = withKeys((...args) => _ctx.increase && _ctx.increase(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_up, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_plus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 34)), [[_directive_repeat_click, _ctx.increase]]) : createCommentVNode(\"v-if\", true), createVNode(_component_el_input, {\n    ref: \"input\",\n    type: \"number\",\n    step: _ctx.step,\n    \"model-value\": _ctx.displayValue,\n    placeholder: _ctx.placeholder,\n    disabled: _ctx.inputNumberDisabled,\n    size: _ctx.inputNumberSize,\n    max: _ctx.max,\n    min: _ctx.min,\n    name: _ctx.name,\n    label: _ctx.label,\n    \"validate-event\": false,\n    onKeydown: [withKeys(withModifiers(_ctx.increase, [\"prevent\"]), [\"up\"]), withKeys(withModifiers(_ctx.decrease, [\"prevent\"]), [\"down\"])],\n    onBlur: _ctx.handleBlur,\n    onFocus: _ctx.handleFocus,\n    onInput: _ctx.handleInput,\n    onChange: _ctx.handleInputChange\n  }, null, 8, [\"step\", \"model-value\", \"placeholder\", \"disabled\", \"size\", \"max\", \"min\", \"name\", \"label\", \"onKeydown\", \"onBlur\", \"onFocus\", \"onInput\", \"onChange\"])], 34);\n}\nvar InputNumber = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { InputNumber as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElInput","ElIcon","ArrowUp","ArrowDown","Plus","Minus","directives","RepeatClick","props","emits","setup","emit","input","data","reactive","currentValue","userInput","formItem","ns","useNamespace","minDisabled","computed","_decrease","modelValue","maxDisabled","_increase","getPrecision","precision","debugWarn","Math","controls","controlsPosition","inputNumberSize","inputNumberDisabled","isNumber","Number","isNaN","toFixed","toPrecision","num","pre","numPrecision","parseFloat","round","value","valueString","indexOf","dotPosition","length","val","step","increase","newVal","setCurrentValue","decrease","stepPrecision","event","_a","watch","max","immediate","onMounted","innerInput","onUpdated","displayValue","handleInput","handleInputChange","controlsAtRight","focus","blur","_component_el_icon","_component_arrow_up","class","_ctx","onDragstart","_withModifiers","key","role","onKeydown","default","_","_directive_repeat_click","_createCommentVNode","ref","type","placeholder","disabled","size","min","label","_withKeys"],"sources":["../../../../../../packages/components/input-number/src/input-number.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(inputNumberSize),\n      ns.is('disabled', inputNumberDisabled),\n      ns.is('without-controls', !controls),\n      ns.is('controls-right', controlsAtRight),\n    ]\"\n    @dragstart.prevent\n  >\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      role=\"button\"\n      :class=\"[ns.e('decrease'), ns.is('disabled', minDisabled)]\"\n      @keydown.enter=\"decrease\"\n    >\n      <el-icon>\n        <arrow-down v-if=\"controlsAtRight\" />\n        <minus v-else />\n      </el-icon>\n    </span>\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      role=\"button\"\n      :class=\"[ns.e('increase'), ns.is('disabled', maxDisabled)]\"\n      @keydown.enter=\"increase\"\n    >\n      <el-icon>\n        <arrow-up v-if=\"controlsAtRight\" />\n        <plus v-else />\n      </el-icon>\n    </span>\n    <el-input\n      ref=\"input\"\n      type=\"number\"\n      :step=\"step\"\n      :model-value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      :validate-event=\"false\"\n      @keydown.up.prevent=\"increase\"\n      @keydown.down.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  reactive,\n  ref,\n  watch,\n  onMounted,\n  onUpdated,\n} from 'vue'\n\nimport { ElIcon } from '@element-plus/components/icon'\nimport { RepeatClick } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useSize,\n  useNamespace,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { isNumber, debugWarn } from '@element-plus/utils'\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons-vue'\nimport { inputNumberProps, inputNumberEmits } from './input-number'\n\nimport type { ComponentPublicInstance } from 'vue'\n\ninterface IData {\n  currentValue: number | undefined\n  userInput: null | number | string\n}\n\nexport default defineComponent({\n  name: 'ElInputNumber',\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus,\n  },\n  directives: {\n    RepeatClick,\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(props, { emit }) {\n    const input = ref<ComponentPublicInstance<typeof ElInput>>()\n    const data = reactive<IData>({\n      currentValue: props.modelValue,\n      userInput: null,\n    })\n    const { formItem } = useFormItem()\n    const ns = useNamespace('input-number')\n\n    const minDisabled = computed(() => _decrease(props.modelValue) < props.min)\n    const maxDisabled = computed(() => _increase(props.modelValue) > props.max)\n\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step)\n      if (props.precision !== undefined) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\n            'InputNumber',\n            'precision should not be less than the decimal places of step'\n          )\n        }\n        return props.precision\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision)\n      }\n    })\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === 'right'\n    })\n\n    const inputNumberSize = useSize()\n    const inputNumberDisabled = useDisabled()\n\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput\n      }\n      let currentValue: number | string | undefined = data.currentValue\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return ''\n        if (props.precision !== undefined) {\n          currentValue = currentValue.toFixed(props.precision)\n        }\n      }\n      return currentValue\n    })\n    const toPrecision = (num: number, pre?: number) => {\n      if (pre === undefined) pre = numPrecision.value\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`)\n    }\n    const getPrecision = (value: number | undefined) => {\n      if (value === undefined) return 0\n      const valueString = value.toString()\n      const dotPosition = valueString.indexOf('.')\n      let precision = 0\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1\n      }\n      return precision\n    }\n    const _increase = (val: number) => {\n      if (!isNumber(val)) return data.currentValue\n      const precisionFactor = 10 ** numPrecision.value\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      val = isNumber(val) ? val : Number.NaN\n      return toPrecision(\n        (precisionFactor * val + precisionFactor * props.step) / precisionFactor\n      )\n    }\n    const _decrease = (val: number) => {\n      if (!isNumber(val)) return data.currentValue\n      const precisionFactor = 10 ** numPrecision.value\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      val = isNumber(val) ? val : Number.NaN\n      return toPrecision(\n        (precisionFactor * val - precisionFactor * props.step) / precisionFactor\n      )\n    }\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = _increase(value)\n      setCurrentValue(newVal)\n    }\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = _decrease(value)\n      setCurrentValue(newVal)\n    }\n    const setCurrentValue = (newVal: number | string) => {\n      const oldVal = data.currentValue\n      if (props.stepStrictly) {\n        const stepPrecision = getPrecision(props.step)\n        const precisionFactor = 10 ** stepPrecision\n        newVal =\n          (Math.round(newVal / props.step) * precisionFactor * props.step) /\n          precisionFactor\n      }\n      if (typeof newVal === 'number' && props.precision !== undefined) {\n        newVal = toPrecision(newVal, props.precision)\n      }\n      if (newVal !== undefined && newVal >= props.max) newVal = props.max\n      if (newVal !== undefined && newVal <= props.min) newVal = props.min\n      if (oldVal === newVal) return\n      if (!isNumber(newVal)) {\n        newVal = undefined\n      }\n      data.userInput = null\n      emit('update:modelValue', newVal)\n      emit('input', newVal)\n      emit('change', newVal, oldVal)\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n      data.currentValue = newVal\n    }\n    const handleInput = (value: string) => {\n      return (data.userInput = value)\n    }\n    const handleInputChange = (value: string) => {\n      const newVal = value !== '' ? Number(value) : ''\n      if ((isNumber(newVal) && !Number.isNaN(newVal)) || value === '') {\n        setCurrentValue(newVal)\n      }\n      data.userInput = null\n    }\n\n    const focus = () => {\n      input.value?.focus?.()\n    }\n\n    const blur = () => {\n      input.value?.blur?.()\n    }\n\n    const handleFocus = (event: MouseEvent) => {\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: MouseEvent) => {\n      emit('blur', event)\n      formItem?.validate?.('blur').catch((err) => debugWarn(err))\n    }\n\n    watch(\n      () => props.modelValue,\n      (value) => {\n        let newVal = Number(value)\n        if (value === null) {\n          newVal = Number.NaN\n        }\n        if (!Number.isNaN(newVal)) {\n          if (props.stepStrictly) {\n            const stepPrecision = getPrecision(props.step)\n            const precisionFactor = 10 ** stepPrecision\n            newVal =\n              (Math.round(newVal / props.step) * precisionFactor * props.step) /\n              precisionFactor\n          }\n          if (props.precision !== undefined) {\n            newVal = toPrecision(newVal, props.precision)\n          }\n\n          if (newVal > props.max) {\n            newVal = props.max\n            emit('update:modelValue', newVal)\n          }\n          if (newVal < props.min) {\n            newVal = props.min\n            emit('update:modelValue', newVal)\n          }\n        }\n        data.currentValue = newVal\n        data.userInput = null\n      },\n      { immediate: true }\n    )\n    onMounted(() => {\n      const innerInput = input.value?.input as HTMLInputElement\n      innerInput.setAttribute('role', 'spinbutton')\n      innerInput.setAttribute('aria-valuemax', String(props.max))\n      innerInput.setAttribute('aria-valuemin', String(props.min))\n      innerInput.setAttribute('aria-valuenow', String(data.currentValue))\n      innerInput.setAttribute(\n        'aria-disabled',\n        String(inputNumberDisabled.value)\n      )\n      if (!isNumber(props.modelValue)) {\n        let val: number | undefined = Number(props.modelValue)\n        if (Number.isNaN(val)) {\n          val = undefined\n        }\n        emit('update:modelValue', val)\n      }\n    })\n    onUpdated(() => {\n      const innerInput = input.value?.input\n      innerInput?.setAttribute('aria-valuenow', data.currentValue)\n    })\n    return {\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}