{"ast":null,"code":"import { defineComponent, computed, ref, nextTick, watch, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot, createElementVNode, toDisplayString, mergeProps, Fragment, createBlock, withCtx, createCommentVNode } from 'vue';\nimport { isString } from '@vue/shared';\nimport { isBoolean, isClient, useThrottleFn, useEventListener } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport { ElImageViewer } from '../../image-viewer/index.mjs';\nimport '../../../utils/index.mjs';\nimport { imageProps, imageEmits } from './image.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { isInContainer } from '../../../utils/dom/position.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport { getScrollContainer } from '../../../utils/dom/scroll.mjs';\nlet prevOverflow = \"\";\nconst _sfc_main = defineComponent({\n  name: \"ElImage\",\n  components: {\n    ImageViewer: ElImageViewer\n  },\n  inheritAttrs: false,\n  props: imageProps,\n  emits: imageEmits,\n  setup(props, {\n    emit,\n    attrs: rawAttrs\n  }) {\n    useDeprecated({\n      scope: \"el-image\",\n      from: \"append-to-body\",\n      replacement: \"preview-teleported\",\n      version: \"2.2.0\",\n      ref: \"https://element-plus.org/en-US/component/image.html#image-attributess\"\n    }, computed(() => isBoolean(props.appendToBody)));\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"image\");\n    const attrs = useAttrs();\n    const hasLoadError = ref(false);\n    const loading = ref(true);\n    const imgWidth = ref(0);\n    const imgHeight = ref(0);\n    const showViewer = ref(false);\n    const container = ref();\n    const _scrollContainer = ref();\n    let stopScrollListener;\n    let stopWheelListener;\n    const containerStyle = computed(() => rawAttrs.style);\n    const imageStyle = computed(() => {\n      const {\n        fit\n      } = props;\n      if (isClient && fit) {\n        return {\n          objectFit: fit\n        };\n      }\n      return {};\n    });\n    const preview = computed(() => {\n      const {\n        previewSrcList\n      } = props;\n      return Array.isArray(previewSrcList) && previewSrcList.length > 0;\n    });\n    const teleported = computed(() => {\n      return props.appendToBody || props.previewTeleported;\n    });\n    const imageIndex = computed(() => {\n      const {\n        previewSrcList,\n        initialIndex\n      } = props;\n      let previewIndex = initialIndex;\n      if (initialIndex > previewSrcList.length - 1) {\n        previewIndex = 0;\n      }\n      return previewIndex;\n    });\n    const loadImage = () => {\n      if (!isClient) return;\n      loading.value = true;\n      hasLoadError.value = false;\n      const img = new Image();\n      const currentImageSrc = props.src;\n      img.addEventListener(\"load\", e => {\n        if (currentImageSrc !== props.src) {\n          return;\n        }\n        handleLoad(e, img);\n      });\n      img.addEventListener(\"error\", e => {\n        if (currentImageSrc !== props.src) {\n          return;\n        }\n        handleError(e);\n      });\n      Object.entries(attrs.value).forEach(([key, value]) => {\n        if (key.toLowerCase() === \"onload\") return;\n        img.setAttribute(key, value);\n      });\n      img.src = currentImageSrc;\n    };\n    function handleLoad(e, img) {\n      imgWidth.value = img.width;\n      imgHeight.value = img.height;\n      loading.value = false;\n      hasLoadError.value = false;\n    }\n    function handleError(event) {\n      loading.value = false;\n      hasLoadError.value = true;\n      emit(\"error\", event);\n    }\n    function handleLazyLoad() {\n      if (isInContainer(container.value, _scrollContainer.value)) {\n        loadImage();\n        removeLazyLoadListener();\n      }\n    }\n    const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200);\n    async function addLazyLoadListener() {\n      var _a;\n      if (!isClient) return;\n      await nextTick();\n      const {\n        scrollContainer\n      } = props;\n      if (isElement(scrollContainer)) {\n        _scrollContainer.value = scrollContainer;\n      } else if (isString(scrollContainer) && scrollContainer !== \"\") {\n        _scrollContainer.value = (_a = document.querySelector(scrollContainer)) != null ? _a : void 0;\n      } else if (container.value) {\n        _scrollContainer.value = getScrollContainer(container.value);\n      }\n      if (_scrollContainer.value) {\n        stopScrollListener = useEventListener(_scrollContainer, \"scroll\", lazyLoadHandler);\n        setTimeout(() => handleLazyLoad(), 100);\n      }\n    }\n    function removeLazyLoadListener() {\n      if (!isClient || !_scrollContainer.value || !lazyLoadHandler) return;\n      stopScrollListener();\n      _scrollContainer.value = void 0;\n    }\n    function wheelHandler(e) {\n      if (!e.ctrlKey) return;\n      if (e.deltaY < 0) {\n        e.preventDefault();\n        return false;\n      } else if (e.deltaY > 0) {\n        e.preventDefault();\n        return false;\n      }\n    }\n    function clickHandler() {\n      if (!preview.value) return;\n      stopWheelListener = useEventListener(\"wheel\", wheelHandler, {\n        passive: false\n      });\n      prevOverflow = document.body.style.overflow;\n      document.body.style.overflow = \"hidden\";\n      showViewer.value = true;\n    }\n    function closeViewer() {\n      stopWheelListener == null ? void 0 : stopWheelListener();\n      document.body.style.overflow = prevOverflow;\n      showViewer.value = false;\n      emit(\"close\");\n    }\n    function switchViewer(val) {\n      emit(\"switch\", val);\n    }\n    watch(() => props.src, () => {\n      if (props.lazy) {\n        loading.value = true;\n        hasLoadError.value = false;\n        removeLazyLoadListener();\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    onMounted(() => {\n      if (props.lazy) {\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    return {\n      attrs,\n      loading,\n      hasLoadError,\n      showViewer,\n      containerStyle,\n      imageStyle,\n      preview,\n      imageIndex,\n      container,\n      ns,\n      teleported,\n      clickHandler,\n      closeViewer,\n      switchViewer,\n      t\n    };\n  }\n});\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = {\n  key: 0\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_image_viewer = resolveComponent(\"image-viewer\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"container\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.$attrs.class]),\n    style: normalizeStyle(_ctx.containerStyle)\n  }, [_ctx.loading ? renderSlot(_ctx.$slots, \"placeholder\", {\n    key: 0\n  }, () => [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"placeholder\"))\n  }, null, 2)]) : _ctx.hasLoadError ? renderSlot(_ctx.$slots, \"error\", {\n    key: 1\n  }, () => [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"error\"))\n  }, toDisplayString(_ctx.t(\"el.image.error\")), 3)]) : (openBlock(), createElementBlock(\"img\", mergeProps({\n    key: 2\n  }, _ctx.attrs, {\n    src: _ctx.src,\n    style: _ctx.imageStyle,\n    class: [_ctx.ns.e(\"inner\"), _ctx.preview ? _ctx.ns.e(\"preview\") : \"\"],\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.clickHandler && _ctx.clickHandler(...args))\n  }), null, 16, _hoisted_1)), _ctx.preview ? (openBlock(), createElementBlock(Fragment, {\n    key: 3\n  }, [_ctx.showViewer ? (openBlock(), createBlock(_component_image_viewer, {\n    key: 0,\n    \"z-index\": _ctx.zIndex,\n    \"initial-index\": _ctx.imageIndex,\n    \"url-list\": _ctx.previewSrcList,\n    \"hide-on-click-modal\": _ctx.hideOnClickModal,\n    teleported: _ctx.teleported,\n    onClose: _ctx.closeViewer,\n    onSwitch: _ctx.switchViewer\n  }, {\n    default: withCtx(() => [_ctx.$slots.viewer ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [renderSlot(_ctx.$slots, \"viewer\")])) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 8, [\"z-index\", \"initial-index\", \"url-list\", \"hide-on-click-modal\", \"teleported\", \"onClose\", \"onSwitch\"])) : createCommentVNode(\"v-if\", true)], 2112)) : createCommentVNode(\"v-if\", true)], 6);\n}\nvar Image$1 = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Image$1 as default };","map":{"version":3,"mappings":"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","names":["prevOverflow","_sfc_main","defineComponent","name","components","ImageViewer","inheritAttrs","props","emits","setup","emit","attrs","rawAttrs","useDeprecated","scope","from","replacement","version","ref","isBoolean","t","ns","useNamespace","hasLoadError","loading","imgWidth","imgHeight","showViewer","container","_scrollContainer","computed","fit","isClient","objectFit","previewSrcList","Array","length","appendToBody","initialIndex","previewIndex","loadImage","value","img","Image","currentImageSrc","e","src","handleLoad","handleError","Object","entries","forEach","key","toLowerCase","setAttribute","event","isInContainer","removeLazyLoadListener","useThrottleFn","handleLazyLoad","_a","nextTick","scrollContainer","stopScrollListener","setTimeout","wheelHandler","clickHandler","stopWheelListener","passive","document","switchViewer","watch","lazy","addLazyLoadListener","onMounted","containerStyle","imageStyle","preview","imageIndex","teleported","closeViewer","_openBlock","class","_normalizeClass","style","_ctx","_createElementVNode","onClick","onClose","onSwitch","default"],"sources":["../../../../../../packages/components/image/src/image.vue"],"sourcesContent":["<template>\n  <div ref=\"container\" :class=\"[ns.b(), $attrs.class]\" :style=\"containerStyle\">\n    <slot v-if=\"loading\" name=\"placeholder\">\n      <div :class=\"ns.e('placeholder')\" />\n    </slot>\n    <slot v-else-if=\"hasLoadError\" name=\"error\">\n      <div :class=\"ns.e('error')\">{{ t('el.image.error') }}</div>\n    </slot>\n    <img\n      v-else\n      v-bind=\"attrs\"\n      :src=\"src\"\n      :style=\"imageStyle\"\n      :class=\"[ns.e('inner'), preview ? ns.e('preview') : '']\"\n      @click=\"clickHandler\"\n    />\n    <template v-if=\"preview\">\n      <image-viewer\n        v-if=\"showViewer\"\n        :z-index=\"zIndex\"\n        :initial-index=\"imageIndex\"\n        :url-list=\"previewSrcList\"\n        :hide-on-click-modal=\"hideOnClickModal\"\n        :teleported=\"teleported\"\n        @close=\"closeViewer\"\n        @switch=\"switchViewer\"\n      >\n        <div v-if=\"$slots.viewer\">\n          <slot name=\"viewer\" />\n        </div>\n      </image-viewer>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref, onMounted, watch, nextTick } from 'vue'\nimport { isString } from '@vue/shared'\nimport {\n  useEventListener,\n  useThrottleFn,\n  isClient,\n  isBoolean,\n} from '@vueuse/core'\nimport {\n  useAttrs,\n  useLocale,\n  useNamespace,\n  useDeprecated,\n} from '@element-plus/hooks'\nimport ImageViewer from '@element-plus/components/image-viewer'\nimport {\n  getScrollContainer,\n  isInContainer,\n  isElement,\n} from '@element-plus/utils'\nimport { imageEmits, imageProps } from './image'\n\nimport type { CSSProperties, StyleValue } from 'vue'\n\nlet prevOverflow = ''\n\nexport default defineComponent({\n  name: 'ElImage',\n  components: {\n    ImageViewer,\n  },\n  inheritAttrs: false,\n\n  props: imageProps,\n  emits: imageEmits,\n\n  setup(props, { emit, attrs: rawAttrs }) {\n    useDeprecated(\n      {\n        scope: 'el-image',\n        from: 'append-to-body',\n        replacement: 'preview-teleported',\n        version: '2.2.0',\n        ref: 'https://element-plus.org/en-US/component/image.html#image-attributess',\n      },\n      computed(() => isBoolean(props.appendToBody))\n    )\n\n    const { t } = useLocale()\n    const ns = useNamespace('image')\n\n    const attrs = useAttrs()\n    const hasLoadError = ref(false)\n    const loading = ref(true)\n    const imgWidth = ref(0)\n    const imgHeight = ref(0)\n    const showViewer = ref(false)\n    const container = ref<HTMLElement>()\n\n    const _scrollContainer = ref<HTMLElement | Window>()\n    let stopScrollListener: () => void\n    let stopWheelListener: () => void\n\n    const containerStyle = computed(() => rawAttrs.style as StyleValue)\n\n    const imageStyle = computed<CSSProperties>(() => {\n      const { fit } = props\n      if (isClient && fit) {\n        return { objectFit: fit }\n      }\n      return {}\n    })\n\n    const preview = computed(() => {\n      const { previewSrcList } = props\n      return Array.isArray(previewSrcList) && previewSrcList.length > 0\n    })\n\n    const teleported = computed(() => {\n      return props.appendToBody || props.previewTeleported\n    })\n\n    const imageIndex = computed(() => {\n      const { previewSrcList, initialIndex } = props\n      let previewIndex = initialIndex\n      if (initialIndex > previewSrcList.length - 1) {\n        previewIndex = 0\n      }\n      return previewIndex\n    })\n\n    const loadImage = () => {\n      if (!isClient) return\n\n      // reset status\n      loading.value = true\n      hasLoadError.value = false\n\n      const img = new Image()\n      const currentImageSrc = props.src\n\n      // load & error callbacks are only responsible for currentImageSrc\n      img.addEventListener('load', (e) => {\n        if (currentImageSrc !== props.src) {\n          return\n        }\n        handleLoad(e, img)\n      })\n      img.addEventListener('error', (e) => {\n        if (currentImageSrc !== props.src) {\n          return\n        }\n        handleError(e)\n      })\n\n      // bind html attrs\n      // so it can behave consistently\n      Object.entries(attrs.value).forEach(([key, value]) => {\n        // avoid onload to be overwritten\n        if (key.toLowerCase() === 'onload') return\n        img.setAttribute(key, value as string)\n      })\n      img.src = currentImageSrc\n    }\n\n    function handleLoad(e: Event, img: HTMLImageElement) {\n      imgWidth.value = img.width\n      imgHeight.value = img.height\n      loading.value = false\n      hasLoadError.value = false\n    }\n\n    function handleError(event: Event) {\n      loading.value = false\n      hasLoadError.value = true\n      emit('error', event)\n    }\n\n    function handleLazyLoad() {\n      if (isInContainer(container.value, _scrollContainer.value)) {\n        loadImage()\n        removeLazyLoadListener()\n      }\n    }\n\n    const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200)\n\n    async function addLazyLoadListener() {\n      if (!isClient) return\n\n      await nextTick()\n\n      const { scrollContainer } = props\n      if (isElement(scrollContainer)) {\n        _scrollContainer.value = scrollContainer\n      } else if (isString(scrollContainer) && scrollContainer !== '') {\n        _scrollContainer.value =\n          document.querySelector<HTMLElement>(scrollContainer) ?? undefined\n      } else if (container.value) {\n        _scrollContainer.value = getScrollContainer(container.value)\n      }\n\n      if (_scrollContainer.value) {\n        stopScrollListener = useEventListener(\n          _scrollContainer,\n          'scroll',\n          lazyLoadHandler\n        )\n        setTimeout(() => handleLazyLoad(), 100)\n      }\n    }\n\n    function removeLazyLoadListener() {\n      if (!isClient || !_scrollContainer.value || !lazyLoadHandler) return\n\n      stopScrollListener()\n      _scrollContainer.value = undefined\n    }\n\n    function wheelHandler(e: WheelEvent) {\n      if (!e.ctrlKey) return\n\n      if (e.deltaY < 0) {\n        e.preventDefault()\n        return false\n      } else if (e.deltaY > 0) {\n        e.preventDefault()\n        return false\n      }\n    }\n\n    function clickHandler() {\n      // don't show viewer when preview is false\n      if (!preview.value) return\n\n      stopWheelListener = useEventListener('wheel', wheelHandler, {\n        passive: false,\n      })\n\n      // prevent body scroll\n      prevOverflow = document.body.style.overflow\n      document.body.style.overflow = 'hidden'\n      showViewer.value = true\n    }\n\n    function closeViewer() {\n      stopWheelListener?.()\n      document.body.style.overflow = prevOverflow\n      showViewer.value = false\n      emit('close')\n    }\n\n    function switchViewer(val: number) {\n      emit('switch', val)\n    }\n\n    watch(\n      () => props.src,\n      () => {\n        if (props.lazy) {\n          // reset status\n          loading.value = true\n          hasLoadError.value = false\n          removeLazyLoadListener()\n          addLazyLoadListener()\n        } else {\n          loadImage()\n        }\n      }\n    )\n\n    onMounted(() => {\n      if (props.lazy) {\n        addLazyLoadListener()\n      } else {\n        loadImage()\n      }\n    })\n\n    return {\n      attrs,\n      loading,\n      hasLoadError,\n      showViewer,\n      containerStyle,\n      imageStyle,\n      preview,\n      imageIndex,\n      container,\n      ns,\n      teleported,\n\n      clickHandler,\n      closeViewer,\n      switchViewer,\n      t,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}