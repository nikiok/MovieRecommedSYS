{"ast":null,"code":"import { defineComponent, ref, computed, watch, nextTick, provide, reactive, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, createBlock, resolveDynamicComponent, withCtx, renderSlot, createCommentVNode } from 'vue';\nimport { isNumber, useResizeObserver, useEventListener } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport Bar from './bar2.mjs';\nimport { scrollbarProps, scrollbarEmits } from './scrollbar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../utils/vue/style.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { scrollbarContextKey } from '../../../tokens/scrollbar.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElScrollbar\",\n  components: {\n    Bar\n  },\n  props: scrollbarProps,\n  emits: scrollbarEmits,\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"scrollbar\");\n    let stopResizeObserver = void 0;\n    let stopResizeListener = void 0;\n    const scrollbar$ = ref();\n    const wrap$ = ref();\n    const resize$ = ref();\n    const sizeWidth = ref(\"0\");\n    const sizeHeight = ref(\"0\");\n    const barRef = ref();\n    const moveX = ref(0);\n    const moveY = ref(0);\n    const ratioY = ref(1);\n    const ratioX = ref(1);\n    const SCOPE = \"ElScrollbar\";\n    const GAP = 4;\n    const style = computed(() => {\n      const style2 = {};\n      if (props.height) style2.height = addUnit(props.height);\n      if (props.maxHeight) style2.maxHeight = addUnit(props.maxHeight);\n      return [props.wrapStyle, style2];\n    });\n    const handleScroll = () => {\n      var _a;\n      if (wrap$.value) {\n        (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);\n        emit(\"scroll\", {\n          scrollTop: wrap$.value.scrollTop,\n          scrollLeft: wrap$.value.scrollLeft\n        });\n      }\n    };\n    const setScrollTop = value => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, \"value must be a number\");\n        return;\n      }\n      wrap$.value.scrollTop = value;\n    };\n    const setScrollLeft = value => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, \"value must be a number\");\n        return;\n      }\n      wrap$.value.scrollLeft = value;\n    };\n    const update = () => {\n      if (!wrap$.value) return;\n      const offsetHeight = wrap$.value.offsetHeight - GAP;\n      const offsetWidth = wrap$.value.offsetWidth - GAP;\n      const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight;\n      const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth;\n      const height = Math.max(originalHeight, props.minSize);\n      const width = Math.max(originalWidth, props.minSize);\n      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));\n      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));\n      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : \"\";\n      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : \"\";\n    };\n    watch(() => props.noresize, noresize => {\n      if (noresize) {\n        stopResizeObserver == null ? void 0 : stopResizeObserver();\n        stopResizeListener == null ? void 0 : stopResizeListener();\n      } else {\n        ;\n        ({\n          stop: stopResizeObserver\n        } = useResizeObserver(resize$, update));\n        stopResizeListener = useEventListener(\"resize\", update);\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => [props.maxHeight, props.height], () => {\n      if (!props.native) nextTick(() => {\n        var _a;\n        update();\n        if (wrap$.value) {\n          (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);\n        }\n      });\n    });\n    provide(scrollbarContextKey, reactive({\n      scrollbarElement: scrollbar$,\n      wrapElement: wrap$\n    }));\n    onMounted(() => {\n      if (!props.native) nextTick(() => update());\n    });\n    return {\n      ns,\n      scrollbar$,\n      wrap$,\n      resize$,\n      barRef,\n      moveX,\n      moveY,\n      ratioX,\n      ratioY,\n      sizeWidth,\n      sizeHeight,\n      style,\n      update,\n      handleScroll,\n      setScrollTop,\n      setScrollLeft\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_bar = resolveComponent(\"bar\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"scrollbar$\",\n    class: normalizeClass(_ctx.ns.b())\n  }, [createElementVNode(\"div\", {\n    ref: \"wrap$\",\n    class: normalizeClass([_ctx.wrapClass, _ctx.ns.e(\"wrap\"), {\n      [_ctx.ns.em(\"wrap\", \"hidden-default\")]: !_ctx.native\n    }]),\n    style: normalizeStyle(_ctx.style),\n    onScroll: _cache[0] || (_cache[0] = (...args) => _ctx.handleScroll && _ctx.handleScroll(...args))\n  }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n    ref: \"resize$\",\n    class: normalizeClass([_ctx.ns.e(\"view\"), _ctx.viewClass]),\n    style: normalizeStyle(_ctx.viewStyle)\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 8, [\"class\", \"style\"]))], 38), !_ctx.native ? (openBlock(), createBlock(_component_bar, {\n    key: 0,\n    ref: \"barRef\",\n    height: _ctx.sizeHeight,\n    width: _ctx.sizeWidth,\n    always: _ctx.always,\n    \"ratio-x\": _ctx.ratioX,\n    \"ratio-y\": _ctx.ratioY\n  }, null, 8, [\"height\", \"width\", \"always\", \"ratio-x\", \"ratio-y\"])) : createCommentVNode(\"v-if\", true)], 2);\n}\nvar Scrollbar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Scrollbar as default };","map":{"version":3,"mappings":";;;;;;;;;;;;AAqDA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,UAAY;IACVC;EAAA;EAEFC,KAAO;EACPC,KAAO;EAEPC,MAAMF,KAAO;IAAEG;EAAQ;IACrB,MAAMC,KAAKC,YAAa;IAExB,IAAIC,kBAA+C;IACnD,IAAIC,kBAA+C;IAEnD,MAAMC,UAAa;IACnB,MAAMC,KAAQ;IACd,MAAMC,OAAU;IAEhB,MAAMC,YAAYC,GAAI;IACtB,MAAMC,aAAaD,GAAI;IACvB,MAAME,MAAS;IACf,MAAMC,QAAQH,GAAI;IAClB,MAAMI,QAAQJ,GAAI;IAClB,MAAMK,SAASL,GAAI;IACnB,MAAMM,SAASN,GAAI;IACnB,MAAMO,KAAQ;IACd,MAAMC,GAAM;IAEN,cAAQC,SAAqB,MAAM;MACvC,MAAMC,MAAuB;MAC7B,IAAItB,KAAM,SAAcsB,gBAASC,QAAQvB,KAAM;MAC/C,IAAIA,KAAM,YAAiBsB,mBAAYC,QAAQvB,KAAM;MAC9C,QAACA,MAAMwB,SAAW;IAAA;IAG3B,MAAMC,eAAeA,MAAM;MACzB,IAAIC;MACK;QAEP,MAAeZ;QACbX,aAAW;UACXwB,sBAAwB;UAAAC;QAAA;MAAA;IAK9B,CAAM;IACA,kBAAkB;MACpB,aAAiB;QACjBC;QAAA;MAEF;MAAyBpB;IAG3B,CAAM;IACA,mBAAkB;MACpB,aAAiB;QACjBoB;QAAA;MAEF;MAA0BpB;IAG5B;IACE,MAAIqB,MAAO;MAAO,kBACZ;MACA,qBAAoBrB,WAAM,CAAcsB;MAE9C,MAAMC,WAAiB,0BAAoB,MAAM;MACjD,MAAMC,cAAgB,mBAAmB,SAAY;MACrD,MAAMC,aAAS,GAASF,mBAAsBvB;MAC9C,MAAM0B,MAAQ,OAAK,CAAIC,kBAAe,EAAMpC;MAE5C,WACE,yBACgB;MAElBiB,OAAOoB,KACL,qBACeN,8BACd,UAAuB;MAE1Bb,YAAmB,gBAAS,IAAMc,2BAA+B;MACjEnB,UAAU,CAAQwB,iBAAcjB,kBAAc,GAAe;MAAAT;IAG/D;IAGI2B,MAAI,MAAUtC;MACZ;QACAM;QACKC;MACL;QAAE;QACF;UAAAgC;QAAA,qBAAgD;QAAAhC;MAAA;IAMtD;MAAAiC,SACS;IAAiB;IAEtBF,MAAI,MAAO;MACT,WAASG,MAAM,EACbC;QACA,IAAIhB;QACKI;QAA0B;UAAA;QAAA;MAM3C;IAEW,EACP;IAAkBa,OACL;MAAAC;MAIjBC,WAAgB;IACd;IAAmBC,gBAAe;MAAA,mBAG7BJ;IAAA,CACL;IACA;MACAtC;MACAI;MACAC;MACAC;MACAI;MACAC;MACAC;MACAE;MACAD;MACAN;MACAE;MACAkC;MACAjB;MACAL;MAAAuB;MAAAC;IAAA;;;yBAlKE;EAAA,MA9BGC;EAAc,sCAAU;IAAAtC;IAC/BuC,KAkBM;EAAA,IAjBAC,kBACE;IAAYxC;IAAAuC,qBAAuB,EAAqBE,cAAK,EAA8BA;MAAA,KAKzF;IAAA;IACCN;IAETO,qDACO,CAAG7B;EAAA,KACJ8B,SACE,eAAM,wBAAW;IACtB3C,cAAO;IAAAuC;yBAEA;EAAA;IAAAK;;EAGK,2BAQb,YANI;IACHC,GAAQ;IACR7C,GAAO;IACPuB,MAAQ;IACRuB,KAAS;IACTC,MAAS;IAAA","names":["_sfc_main","defineComponent","name","components","Bar","props","emits","setup","emit","ns","useNamespace","stopResizeObserver","stopResizeListener","scrollbar$","wrap$","resize$","sizeWidth","ref","sizeHeight","barRef","moveX","moveY","ratioY","ratioX","SCOPE","GAP","computed","style2","addUnit","wrapStyle","handleScroll","_a","scrollTop","scrollLeft","debugWarn","update","offsetHeight","offsetWidth","originalHeight","originalWidth","height","max","value","watch","stop","immediate","native","nextTick","provide","scrollbarElement","wrapElement","onMounted","style","setScrollTop","setScrollLeft","_component_bar","class","_createElementVNode","_ctx","onScroll","_openBlock","default","key","width","always"],"sources":["../../../../../../packages/components/scrollbar/src/scrollbar.vue"],"sourcesContent":["<template>\n  <div ref=\"scrollbar$\" :class=\"ns.b()\">\n    <div\n      ref=\"wrap$\"\n      :class=\"[\n        wrapClass,\n        ns.e('wrap'),\n        { [ns.em('wrap', 'hidden-default')]: !native },\n      ]\"\n      :style=\"style\"\n      @scroll=\"handleScroll\"\n    >\n      <component\n        :is=\"tag\"\n        ref=\"resize$\"\n        :class=\"[ns.e('view'), viewClass]\"\n        :style=\"viewStyle\"\n      >\n        <slot />\n      </component>\n    </div>\n    <template v-if=\"!native\">\n      <bar\n        ref=\"barRef\"\n        :height=\"sizeHeight\"\n        :width=\"sizeWidth\"\n        :always=\"always\"\n        :ratio-x=\"ratioX\"\n        :ratio-y=\"ratioY\"\n      />\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onMounted,\n  provide,\n  ref,\n  watch,\n  reactive,\n} from 'vue'\nimport { useResizeObserver, useEventListener } from '@vueuse/core'\nimport { isNumber, debugWarn, addUnit } from '@element-plus/utils'\nimport { scrollbarContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport Bar from './bar.vue'\n\nimport { scrollbarProps, scrollbarEmits } from './scrollbar'\nimport type { StyleValue, CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElScrollbar',\n  components: {\n    Bar,\n  },\n  props: scrollbarProps,\n  emits: scrollbarEmits,\n\n  setup(props, { emit }) {\n    const ns = useNamespace('scrollbar')\n\n    let stopResizeObserver: (() => void) | undefined = undefined\n    let stopResizeListener: (() => void) | undefined = undefined\n\n    const scrollbar$ = ref<HTMLDivElement>()\n    const wrap$ = ref<HTMLDivElement>()\n    const resize$ = ref<HTMLElement>()\n\n    const sizeWidth = ref('0')\n    const sizeHeight = ref('0')\n    const barRef = ref()\n    const moveX = ref(0)\n    const moveY = ref(0)\n    const ratioY = ref(1)\n    const ratioX = ref(1)\n    const SCOPE = 'ElScrollbar'\n    const GAP = 4 // top 2 + bottom 2 of bar instance\n\n    const style = computed<StyleValue>(() => {\n      const style: CSSProperties = {}\n      if (props.height) style.height = addUnit(props.height)\n      if (props.maxHeight) style.maxHeight = addUnit(props.maxHeight)\n      return [props.wrapStyle, style]\n    })\n\n    const handleScroll = () => {\n      if (wrap$.value) {\n        barRef.value?.handleScroll(wrap$.value)\n\n        emit('scroll', {\n          scrollTop: wrap$.value.scrollTop,\n          scrollLeft: wrap$.value.scrollLeft,\n        })\n      }\n    }\n\n    const setScrollTop = (value: number) => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, 'value must be a number')\n        return\n      }\n      wrap$.value!.scrollTop = value\n    }\n\n    const setScrollLeft = (value: number) => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, 'value must be a number')\n        return\n      }\n      wrap$.value!.scrollLeft = value\n    }\n\n    const update = () => {\n      if (!wrap$.value) return\n      const offsetHeight = wrap$.value.offsetHeight - GAP\n      const offsetWidth = wrap$.value.offsetWidth - GAP\n\n      const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight\n      const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth\n      const height = Math.max(originalHeight, props.minSize)\n      const width = Math.max(originalWidth, props.minSize)\n\n      ratioY.value =\n        originalHeight /\n        (offsetHeight - originalHeight) /\n        (height / (offsetHeight - height))\n      ratioX.value =\n        originalWidth /\n        (offsetWidth - originalWidth) /\n        (width / (offsetWidth - width))\n\n      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : ''\n      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : ''\n    }\n\n    watch(\n      () => props.noresize,\n      (noresize) => {\n        if (noresize) {\n          stopResizeObserver?.()\n          stopResizeListener?.()\n        } else {\n          ;({ stop: stopResizeObserver } = useResizeObserver(resize$, update))\n          stopResizeListener = useEventListener('resize', update)\n        }\n      },\n      { immediate: true }\n    )\n\n    watch(\n      () => [props.maxHeight, props.height],\n      () => {\n        if (!props.native)\n          nextTick(() => {\n            update()\n            if (wrap$.value) {\n              barRef.value?.handleScroll(wrap$.value)\n            }\n          })\n      }\n    )\n\n    provide(\n      scrollbarContextKey,\n      reactive({\n        scrollbarElement: scrollbar$,\n        wrapElement: wrap$,\n      })\n    )\n\n    onMounted(() => {\n      if (!props.native) nextTick(() => update())\n    })\n\n    return {\n      ns,\n      scrollbar$,\n      wrap$,\n      resize$,\n      barRef,\n      moveX,\n      moveY,\n      ratioX,\n      ratioY,\n      sizeWidth,\n      sizeHeight,\n      style,\n      update,\n      handleScroll,\n      setScrollTop,\n      setScrollLeft,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}