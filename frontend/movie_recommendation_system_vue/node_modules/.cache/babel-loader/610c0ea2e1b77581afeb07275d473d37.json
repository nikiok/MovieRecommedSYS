{"ast":null,"code":"import { defineComponent, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, toDisplayString, createCommentVNode, Fragment, renderList, createVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport ElDatePickerCell from './basic-cell-render.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\nconst _sfc_main = defineComponent({\n  components: {\n    ElDatePickerCell\n  },\n  props: {\n    date: {\n      type: Object\n    },\n    minDate: {\n      type: Object\n    },\n    maxDate: {\n      type: Object\n    },\n    parsedValue: {\n      type: [Object, Array]\n    },\n    selectionMode: {\n      type: String,\n      default: \"day\"\n    },\n    showWeekNumber: {\n      type: Boolean,\n      default: false\n    },\n    disabledDate: {\n      type: Function\n    },\n    cellClassName: {\n      type: Function\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false\n      })\n    }\n  },\n  emits: [\"changerange\", \"pick\", \"select\"],\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const lastRow = ref(null);\n    const lastColumn = ref(null);\n    const tableRows = ref([[], [], [], [], [], []]);\n    const firstDayOfWeek = props.date.$locale().weekStart || 7;\n    const WEEKS_CONSTANT = props.date.locale(\"en\").localeData().weekdaysShort().map(_ => _.toLowerCase());\n    const offsetDay = computed(() => {\n      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;\n    });\n    const startDate = computed(() => {\n      const startDayOfMonth = props.date.startOf(\"month\");\n      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, \"day\");\n    });\n    const WEEKS = computed(() => {\n      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);\n    });\n    const rows = computed(() => {\n      var _a;\n      const startOfMonth = props.date.startOf(\"month\");\n      const startOfMonthDay = startOfMonth.day() || 7;\n      const dateCountOfMonth = startOfMonth.daysInMonth();\n      const dateCountOfLastMonth = startOfMonth.subtract(1, \"month\").daysInMonth();\n      const offset = offsetDay.value;\n      const rows_ = tableRows.value;\n      let count = 1;\n      const selectedDate = props.selectionMode === \"dates\" ? castArray(props.parsedValue) : [];\n      const calNow = dayjs().locale(lang.value).startOf(\"day\");\n      for (let i = 0; i < 6; i++) {\n        const row = rows_[i];\n        if (props.showWeekNumber) {\n          if (!row[0]) {\n            row[0] = {\n              type: \"week\",\n              text: startDate.value.add(i * 7 + 1, \"day\").week()\n            };\n          }\n        }\n        for (let j = 0; j < 7; j++) {\n          let cell = row[props.showWeekNumber ? j + 1 : j];\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false\n            };\n          }\n          const index = i * 7 + j;\n          const calTime = startDate.value.add(index - offset, \"day\");\n          cell.dayjs = calTime;\n          cell.date = calTime.toDate();\n          cell.timestamp = calTime.valueOf();\n          cell.type = \"normal\";\n          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate;\n          cell.inRange = props.minDate && calTime.isSameOrAfter(props.minDate, \"day\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"day\") || props.minDate && calTime.isSameOrBefore(props.minDate, \"day\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"day\");\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, \"day\");\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"day\");\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, \"day\");\n            cell.end = calEndDate && calTime.isSame(calEndDate, \"day\");\n          }\n          const isToday = calTime.isSame(calNow, \"day\");\n          if (isToday) {\n            cell.type = \"today\";\n          }\n          if (i >= 0 && i <= 1) {\n            const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;\n            if (j + i * 7 >= numberOfDaysFromPreviousMonth) {\n              cell.text = count++;\n            } else {\n              cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - j % 7) + 1 + i * 7;\n              cell.type = \"prev-month\";\n            }\n          } else {\n            if (count <= dateCountOfMonth) {\n              cell.text = count++;\n            } else {\n              cell.text = count++ - dateCountOfMonth;\n              cell.type = \"next-month\";\n            }\n          }\n          const cellDate = calTime.toDate();\n          cell.selected = selectedDate.find(_ => _.valueOf() === calTime.valueOf());\n          cell.isSelected = !!cell.selected;\n          cell.isCurrent = isCurrent(cell);\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate);\n          cell.customClass = props.cellClassName && props.cellClassName(cellDate);\n          row[props.showWeekNumber ? j + 1 : j] = cell;\n        }\n        if (props.selectionMode === \"week\") {\n          const start = props.showWeekNumber ? 1 : 0;\n          const end = props.showWeekNumber ? 7 : 6;\n          const isActive = isWeekActive(row[start + 1]);\n          row[start].inRange = isActive;\n          row[start].start = isActive;\n          row[end].inRange = isActive;\n          row[end].end = isActive;\n        }\n      }\n      return rows_;\n    });\n    const isCurrent = cell => {\n      return props.selectionMode === \"day\" && (cell.type === \"normal\" || cell.type === \"today\") && cellMatchesDate(cell, props.parsedValue);\n    };\n    const cellMatchesDate = (cell, date) => {\n      if (!date) return false;\n      return dayjs(date).locale(lang.value).isSame(props.date.date(Number(cell.text)), \"day\");\n    };\n    const getCellClasses = cell => {\n      const classes = [];\n      if ((cell.type === \"normal\" || cell.type === \"today\") && !cell.disabled) {\n        classes.push(\"available\");\n        if (cell.type === \"today\") {\n          classes.push(\"today\");\n        }\n      } else {\n        classes.push(cell.type);\n      }\n      if (isCurrent(cell)) {\n        classes.push(\"current\");\n      }\n      if (cell.inRange && (cell.type === \"normal\" || cell.type === \"today\" || props.selectionMode === \"week\")) {\n        classes.push(\"in-range\");\n        if (cell.start) {\n          classes.push(\"start-date\");\n        }\n        if (cell.end) {\n          classes.push(\"end-date\");\n        }\n      }\n      if (cell.disabled) {\n        classes.push(\"disabled\");\n      }\n      if (cell.selected) {\n        classes.push(\"selected\");\n      }\n      if (cell.customClass) {\n        classes.push(cell.customClass);\n      }\n      return classes.join(\" \");\n    };\n    const getDateOfCell = (row, column) => {\n      const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value;\n      return startDate.value.add(offsetFromStart, \"day\");\n    };\n    const handleMouseMove = event => {\n      if (!props.rangeState.selecting) return;\n      let target = event.target;\n      if (target.tagName === \"SPAN\") {\n        target = target.parentNode.parentNode;\n      }\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n      if (target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        ctx.emit(\"changerange\", {\n          selecting: true,\n          endDate: getDateOfCell(row, column)\n        });\n      }\n    };\n    const handleClick = event => {\n      let target = event.target;\n      while (target) {\n        if (target.tagName === \"TD\") {\n          break;\n        }\n        target = target.parentNode;\n      }\n      if (!target || target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      const cell = rows.value[row][column];\n      if (cell.disabled || cell.type === \"week\") return;\n      const newDate = getDateOfCell(row, column);\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          ctx.emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          ctx.emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            ctx.emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n          ctx.emit(\"select\", false);\n        }\n      } else if (props.selectionMode === \"day\") {\n        ctx.emit(\"pick\", newDate);\n      } else if (props.selectionMode === \"week\") {\n        const weekNumber = newDate.week();\n        const value = `${newDate.year()}w${weekNumber}`;\n        ctx.emit(\"pick\", {\n          year: newDate.year(),\n          week: weekNumber,\n          value,\n          date: newDate.startOf(\"week\")\n        });\n      } else if (props.selectionMode === \"dates\") {\n        const newValue = cell.selected ? castArray(props.parsedValue).filter(_ => _.valueOf() !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);\n        ctx.emit(\"pick\", newValue);\n      }\n    };\n    const isWeekActive = cell => {\n      if (props.selectionMode !== \"week\") return false;\n      let newDate = props.date.startOf(\"day\");\n      if (cell.type === \"prev-month\") {\n        newDate = newDate.subtract(1, \"month\");\n      }\n      if (cell.type === \"next-month\") {\n        newDate = newDate.add(1, \"month\");\n      }\n      newDate = newDate.date(Number.parseInt(cell.text, 10));\n      if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n        const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;\n        const weekDate = props.parsedValue.subtract(dayOffset, \"day\");\n        return weekDate.isSame(newDate, \"day\");\n      }\n      return false;\n    };\n    return {\n      handleMouseMove,\n      t,\n      rows,\n      isWeekActive,\n      getCellClasses,\n      WEEKS,\n      handleClick\n    };\n  }\n});\nconst _hoisted_1 = {\n  key: 0\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_date_picker_cell = resolveComponent(\"el-date-picker-cell\");\n  return openBlock(), createElementBlock(\"table\", {\n    cellspacing: \"0\",\n    cellpadding: \"0\",\n    class: normalizeClass([\"el-date-table\", {\n      \"is-week-mode\": _ctx.selectionMode === \"week\"\n    }]),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args)),\n    onMousemove: _cache[1] || (_cache[1] = (...args) => _ctx.handleMouseMove && _ctx.handleMouseMove(...args))\n  }, [createElementVNode(\"tbody\", null, [createElementVNode(\"tr\", null, [_ctx.showWeekNumber ? (openBlock(), createElementBlock(\"th\", _hoisted_1, toDisplayString(_ctx.t(\"el.datepicker.week\")), 1)) : createCommentVNode(\"v-if\", true), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.WEEKS, (week, key) => {\n    return openBlock(), createElementBlock(\"th\", {\n      key\n    }, toDisplayString(_ctx.t(\"el.datepicker.weeks.\" + week)), 1);\n  }), 128))]), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, key) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key,\n      class: normalizeClass([\"el-date-table__row\", {\n        current: _ctx.isWeekActive(row[1])\n      }])\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key: key_,\n        class: normalizeClass(_ctx.getCellClasses(cell))\n      }, [createVNode(_component_el_date_picker_cell, {\n        cell\n      }, null, 8, [\"cell\"])], 2);\n    }), 128))], 2);\n  }), 128))])], 34);\n}\nvar DateTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { DateTable as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","components","ElDatePickerCell","props","date","type","minDate","maxDate","parsedValue","Object","selectionMode","default","showWeekNumber","disabledDate","cellClassName","rangeState","endDate","selecting","emits","setup","ctx","t","lang","lastRow","ref","lastColumn","tableRows","firstDayOfWeek","weekStart","locale","localeData","weekdaysShort","_","computed","startOf","startDayOfMonth","WEEKS_CONSTANT","startOfMonthDay","dateCountOfMonth","dateCountOfLastMonth","offset","offsetDay","rows_","selectedDate","i","row","text","j","cell","column","inRange","start","end","index","calTime","dayjs","timestamp","_a","calEndDate","isToday","isSelected","isCurrent","disabled","customClass","cellMatchesDate","classes","tagName","target","handleClick","emit","year","week","value","isWeekActive","newDate","dayOffset","handleMouseMove","rows","getCellClasses","WEEKS","_openBlock","cellspacing","cellpadding","class","onClick","onMousemove","_createElementVNode","_ctx","key","current","_createVNode"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-date-table.vue"],"sourcesContent":["<template>\n  <table\n    cellspacing=\"0\"\n    cellpadding=\"0\"\n    class=\"el-date-table\"\n    :class=\"{ 'is-week-mode': selectionMode === 'week' }\"\n    @click=\"handleClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody>\n      <tr>\n        <th v-if=\"showWeekNumber\">{{ t('el.datepicker.week') }}</th>\n        <th v-for=\"(week, key) in WEEKS\" :key=\"key\">\n          {{ t('el.datepicker.weeks.' + week) }}\n        </th>\n      </tr>\n      <tr\n        v-for=\"(row, key) in rows\"\n        :key=\"key\"\n        class=\"el-date-table__row\"\n        :class=\"{ current: isWeekActive(row[1]) }\"\n      >\n        <td\n          v-for=\"(cell, key_) in row\"\n          :key=\"key_\"\n          :class=\"getCellClasses(cell)\"\n        >\n          <el-date-picker-cell :cell=\"cell\" />\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale } from '@element-plus/hooks'\nimport { castArray } from '@element-plus/utils'\nimport ElDatePickerCell from './basic-cell-render'\nimport type { PropType } from 'vue'\n\nimport type { Dayjs } from 'dayjs'\nimport type { DateCell } from '../date-picker.type'\n\nexport default defineComponent({\n  components: {\n    ElDatePickerCell,\n  },\n  props: {\n    date: {\n      type: Object as PropType<Dayjs>,\n    },\n    minDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    maxDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    parsedValue: {\n      type: [Object, Array] as PropType<Dayjs | Dayjs[]>,\n    },\n    selectionMode: {\n      type: String,\n      default: 'day',\n    },\n    showWeekNumber: {\n      type: Boolean,\n      default: false,\n    },\n    disabledDate: {\n      type: Function,\n    },\n    cellClassName: {\n      type: Function,\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false,\n      }),\n    },\n  },\n  emits: ['changerange', 'pick', 'select'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    // data\n    const lastRow = ref(null)\n    const lastColumn = ref(null)\n    const tableRows = ref<DateCell[][]>([[], [], [], [], [], []])\n\n    // todo better way to get Day.js locale object\n    const firstDayOfWeek = (props.date as any).$locale().weekStart || 7\n    const WEEKS_CONSTANT = props.date\n      .locale('en')\n      .localeData()\n      .weekdaysShort()\n      .map((_) => _.toLowerCase())\n\n    const offsetDay = computed(() => {\n      // Sunday 7(0), cal the left and right offset days, 3217654, such as Monday is -1, the is to adjust the position of the first two rows of dates\n      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek\n    })\n\n    const startDate = computed(() => {\n      const startDayOfMonth = props.date.startOf('month')\n      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, 'day')\n    })\n\n    const WEEKS = computed(() => {\n      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(\n        firstDayOfWeek,\n        firstDayOfWeek + 7\n      )\n    })\n\n    const rows = computed(() => {\n      // TODO: refactory rows / getCellClasses\n      const startOfMonth = props.date.startOf('month')\n      const startOfMonthDay = startOfMonth.day() || 7 // day of first day\n      const dateCountOfMonth = startOfMonth.daysInMonth()\n      const dateCountOfLastMonth = startOfMonth\n        .subtract(1, 'month')\n        .daysInMonth()\n\n      const offset = offsetDay.value\n      const rows_ = tableRows.value\n      let count = 1\n\n      const selectedDate: Dayjs[] =\n        props.selectionMode === 'dates' ? castArray(props.parsedValue) : []\n\n      const calNow = dayjs().locale(lang.value).startOf('day')\n\n      for (let i = 0; i < 6; i++) {\n        const row = rows_[i]\n\n        if (props.showWeekNumber) {\n          if (!row[0]) {\n            row[0] = {\n              type: 'week',\n              text: startDate.value.add(i * 7 + 1, 'day').week(),\n            }\n          }\n        }\n\n        for (let j = 0; j < 7; j++) {\n          let cell = row[props.showWeekNumber ? j + 1 : j]\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: 'normal',\n              inRange: false,\n              start: false,\n              end: false,\n            }\n          }\n          const index = i * 7 + j\n          const calTime = startDate.value.add(index - offset, 'day')\n          cell.dayjs = calTime\n          cell.date = calTime.toDate()\n          cell.timestamp = calTime.valueOf()\n          cell.type = 'normal'\n\n          const calEndDate =\n            props.rangeState.endDate ||\n            props.maxDate ||\n            (props.rangeState.selecting && props.minDate)\n\n          cell.inRange =\n            (props.minDate &&\n              calTime.isSameOrAfter(props.minDate, 'day') &&\n              calEndDate &&\n              calTime.isSameOrBefore(calEndDate, 'day')) ||\n            (props.minDate &&\n              calTime.isSameOrBefore(props.minDate, 'day') &&\n              calEndDate &&\n              calTime.isSameOrAfter(calEndDate, 'day'))\n\n          if (props.minDate?.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, 'day')\n            cell.end = props.minDate && calTime.isSame(props.minDate, 'day')\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, 'day')\n            cell.end = calEndDate && calTime.isSame(calEndDate, 'day')\n          }\n\n          const isToday = calTime.isSame(calNow, 'day')\n\n          if (isToday) {\n            cell.type = 'today'\n          }\n\n          if (i >= 0 && i <= 1) {\n            const numberOfDaysFromPreviousMonth =\n              startOfMonthDay + offset < 0\n                ? 7 + startOfMonthDay + offset\n                : startOfMonthDay + offset\n\n            if (j + i * 7 >= numberOfDaysFromPreviousMonth) {\n              cell.text = count++\n            } else {\n              cell.text =\n                dateCountOfLastMonth -\n                (numberOfDaysFromPreviousMonth - (j % 7)) +\n                1 +\n                i * 7\n              cell.type = 'prev-month'\n            }\n          } else {\n            if (count <= dateCountOfMonth) {\n              cell.text = count++\n            } else {\n              cell.text = count++ - dateCountOfMonth\n              cell.type = 'next-month'\n            }\n          }\n\n          const cellDate = calTime.toDate()\n          cell.selected = selectedDate.find(\n            (_) => _.valueOf() === calTime.valueOf()\n          )\n          cell.isSelected = !!cell.selected\n          cell.isCurrent = isCurrent(cell)\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate)\n          cell.customClass =\n            props.cellClassName && props.cellClassName(cellDate)\n          row[props.showWeekNumber ? j + 1 : j] = cell\n        }\n\n        if (props.selectionMode === 'week') {\n          const start = props.showWeekNumber ? 1 : 0\n          const end = props.showWeekNumber ? 7 : 6\n          const isActive = isWeekActive(row[start + 1])\n          row[start].inRange = isActive\n          row[start].start = isActive\n          row[end].inRange = isActive\n          row[end].end = isActive\n        }\n      }\n      return rows_\n    })\n\n    const isCurrent = (cell): boolean => {\n      return (\n        props.selectionMode === 'day' &&\n        (cell.type === 'normal' || cell.type === 'today') &&\n        cellMatchesDate(cell, props.parsedValue)\n      )\n    }\n\n    const cellMatchesDate = (cell, date) => {\n      if (!date) return false\n      return dayjs(date)\n        .locale(lang.value)\n        .isSame(props.date.date(Number(cell.text)), 'day')\n    }\n\n    const getCellClasses = (cell) => {\n      const classes: string[] = []\n      if ((cell.type === 'normal' || cell.type === 'today') && !cell.disabled) {\n        classes.push('available')\n        if (cell.type === 'today') {\n          classes.push('today')\n        }\n      } else {\n        classes.push(cell.type)\n      }\n\n      if (isCurrent(cell)) {\n        classes.push('current')\n      }\n\n      if (\n        cell.inRange &&\n        (cell.type === 'normal' ||\n          cell.type === 'today' ||\n          props.selectionMode === 'week')\n      ) {\n        classes.push('in-range')\n\n        if (cell.start) {\n          classes.push('start-date')\n        }\n\n        if (cell.end) {\n          classes.push('end-date')\n        }\n      }\n\n      if (cell.disabled) {\n        classes.push('disabled')\n      }\n\n      if (cell.selected) {\n        classes.push('selected')\n      }\n\n      if (cell.customClass) {\n        classes.push(cell.customClass)\n      }\n\n      return classes.join(' ')\n    }\n\n    const getDateOfCell = (row, column) => {\n      const offsetFromStart =\n        row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value\n      return startDate.value.add(offsetFromStart, 'day')\n    }\n\n    const handleMouseMove = (event) => {\n      if (!props.rangeState.selecting) return\n\n      let target = event.target\n      if (target.tagName === 'SPAN') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex - 1\n      const column = target.cellIndex\n\n      // can not select disabled date\n      if (rows.value[row][column].disabled) return\n\n      // only update rangeState when mouse moves to a new cell\n      // this avoids frequent Date object creation and improves performance\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row\n        lastColumn.value = column\n        ctx.emit('changerange', {\n          selecting: true,\n          endDate: getDateOfCell(row, column),\n        })\n      }\n    }\n\n    const handleClick = (event) => {\n      let target = event.target\n\n      while (target) {\n        if (target.tagName === 'TD') {\n          break\n        }\n        target = target.parentNode\n      }\n\n      if (!target || target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex - 1\n      const column = target.cellIndex\n      const cell = rows.value[row][column]\n\n      if (cell.disabled || cell.type === 'week') return\n\n      const newDate = getDateOfCell(row, column)\n\n      if (props.selectionMode === 'range') {\n        if (!props.rangeState.selecting) {\n          ctx.emit('pick', { minDate: newDate, maxDate: null })\n          ctx.emit('select', true)\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit('pick', { minDate: props.minDate, maxDate: newDate })\n          } else {\n            ctx.emit('pick', { minDate: newDate, maxDate: props.minDate })\n          }\n          ctx.emit('select', false)\n        }\n      } else if (props.selectionMode === 'day') {\n        ctx.emit('pick', newDate)\n      } else if (props.selectionMode === 'week') {\n        const weekNumber = newDate.week()\n        const value = `${newDate.year()}w${weekNumber}`\n        ctx.emit('pick', {\n          year: newDate.year(),\n          week: weekNumber,\n          value,\n          date: newDate.startOf('week'),\n        })\n      } else if (props.selectionMode === 'dates') {\n        const newValue = cell.selected\n          ? castArray(props.parsedValue).filter(\n              (_) => _.valueOf() !== newDate.valueOf()\n            )\n          : castArray(props.parsedValue).concat([newDate])\n        ctx.emit('pick', newValue)\n      }\n    }\n\n    const isWeekActive = (cell) => {\n      if (props.selectionMode !== 'week') return false\n      let newDate = props.date.startOf('day')\n\n      if (cell.type === 'prev-month') {\n        newDate = newDate.subtract(1, 'month')\n      }\n\n      if (cell.type === 'next-month') {\n        newDate = newDate.add(1, 'month')\n      }\n\n      newDate = newDate.date(Number.parseInt(cell.text, 10))\n\n      if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n        const dayOffset =\n          ((props.parsedValue.day() - firstDayOfWeek + 7) % 7) - 1\n        const weekDate = props.parsedValue.subtract(dayOffset, 'day')\n        return weekDate.isSame(newDate, 'day')\n      }\n      return false\n    }\n\n    return {\n      handleMouseMove,\n      t,\n      rows,\n      isWeekActive,\n      getCellClasses,\n      WEEKS,\n      handleClick,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}