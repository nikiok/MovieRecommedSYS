{"ast":null,"code":"import { defineComponent, inject, ref, nextTick, onMounted, onBeforeUnmount, onUpdated, watch, computed, createVNode, Fragment } from 'vue';\nimport { useResizeObserver } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst COMPONENT_NAME = \"ElLabelWrap\";\nvar FormLabelWrap = defineComponent({\n  name: COMPONENT_NAME,\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean\n  },\n  setup(props, {\n    slots\n  }) {\n    const formContext = inject(formContextKey);\n    const formItemContext = inject(formItemContextKey);\n    if (!formContext || !formItemContext) throwError(COMPONENT_NAME, \"usage: <el-form><el-form-item><label-wrap /></el-form-item></el-form>\");\n    const ns = useNamespace(\"form\");\n    const el = ref();\n    const computedWidth = ref(0);\n    const getLabelWidth = () => {\n      var _a;\n      if ((_a = el.value) == null ? void 0 : _a.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width;\n        return Math.ceil(Number.parseFloat(width));\n      } else {\n        return 0;\n      }\n    };\n    const updateLabelWidth = (action = \"update\") => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === \"update\") {\n            computedWidth.value = getLabelWidth();\n          } else if (action === \"remove\") {\n            formContext.deregisterLabelWidth(computedWidth.value);\n          }\n        }\n      });\n    };\n    const updateLabelWidthFn = () => updateLabelWidth(\"update\");\n    onMounted(() => {\n      updateLabelWidthFn();\n    });\n    onBeforeUnmount(() => {\n      updateLabelWidth(\"remove\");\n    });\n    onUpdated(() => updateLabelWidthFn());\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        formContext.registerLabelWidth(val, oldVal);\n      }\n    });\n    useResizeObserver(computed(() => {\n      var _a, _b;\n      return (_b = (_a = el.value) == null ? void 0 : _a.firstElementChild) != null ? _b : null;\n    }), updateLabelWidthFn);\n    return () => {\n      var _a, _b;\n      if (!slots) return null;\n      const {\n        isAutoWidth\n      } = props;\n      if (isAutoWidth) {\n        const autoLabelWidth = formContext.autoLabelWidth;\n        const style = {};\n        if (autoLabelWidth && autoLabelWidth !== \"auto\") {\n          const marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);\n          const marginPosition = formContext.labelPosition === \"left\" ? \"marginRight\" : \"marginLeft\";\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`;\n          }\n        }\n        return createVNode(\"div\", {\n          \"ref\": el,\n          \"class\": [ns.be(\"item\", \"label-wrap\")],\n          \"style\": style\n        }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);\n      } else {\n        return createVNode(Fragment, {\n          \"ref\": el\n        }, [(_b = slots.default) == null ? void 0 : _b.call(slots)]);\n      }\n    };\n  }\n});\nexport { FormLabelWrap as default };","map":{"version":3,"mappings":";;;;;;;;AAmBA,MAAMA,cAAc,GAAG,aAAvB;AACA,oBAAeC,eAAe,CAAC;EAC7BC,IAAI,EAAEF,cADuB;EAE7BG,KAAK,EAAE;IACLC,WAAW,EAAEC,OADR;IAELC,SAAS,EAAED;EAFN,CAFsB;;IAO7BE;EAAeC;IAAS;IACtB,MAAMC,eAAoB,4BAA1B;IACA,gBAAqB,sBACjBC,yBAAiBC,yEAGjB;IAGJ,MAAMC,EAAE,GAAGC,YAAY,CAAC,MAAD,CAAvB;IAEMC,QAAE,GAAGC,GAAG,EAAd;IACA,MAAMC,aAAa,GAAGD,GAAG,CAAC,CAAD,CAAzB;;MAEME;MACJ,IAAIH,CAAEI,EAACC,GAAHL,yBAA6B;QAC/B,MAAMM,KAAK,GAAGC,MAAM,CAACC,gBAAP,CAAwBR,EAAE,CAACK,KAAH,CAASI,iBAAjC,EAAoDH,KAAlE;QACOI,WAAI,CAACC,IAAL,CAAUC,MAAM,CAACC,UAAP,CAAkBP,KAAlB,CAAV,CAAP;MACD,CAHD,MAGO;QACL,OAAO,CAAP;MACD;IACF,CAPD;;MASAQ;QACEA,SAAe;UACb,UAAUC,KAAN,QAAsB,EAACzB;YACrB0B,aAAW,SAAUb;UACvBD,OAAa,UAAb;YACKP,WAAU,qBAAe;UAC9BA;QACD;MACF;IACF;IATH;;MAWAsB;;IAEAC,eAAgB;MACdD,gBAAkB;IACnB,CAFQ,CAAT;IAGAE,gBAAgBF,kBAAM;IACpBG,mBAAiB,QAADC,MAAhB;MADF;QAGS1B,WAAOsB,mBAAkB,IAAlC;MAEAK;IACE,CAAIjC;IACFM,iBAAY4B;MACb;MAHH;IAMAC,CAAiB,qBACP;IAMV,OAAO,MAAM;MACX,IAAIpB,EAACV,IAAL;MAEM,YAAEJ;MAAF,MAAN;;MACA,IAAIA;MACF,eAAoB;QACdmC,oBAAN;;QACA,IAAIC,cAAc,IAAIA,cAAc,KAAK,MAAzC,EAAiD;UAC/C,MAAMC,WAAW,GAAGjB,IAAI,CAACkB,GAAL,CAClB,CADkB,EAElBhB,MAAM,CAACiB,QAAP,CAAgBH,cAAhB,EAAgC,EAAhC,IAAsCxB,aAAa,CAACG,KAFlC,CAApB;UAIMyB,oBAAc,GAClBnC,WAAW,CAACoC,aAAZ,KAA8B,MAA9B,GAAuC,aAAvC,GAAuD,YADzD;;YAEAN,oBAAiB;UACfA;QACD;QACF;;UACD;UAAA,OACYzB,EADZyB;QAAA,CACuB,cAAIO,QAAH,iBADxB;MAAA,CAC6DP;QACxD/B,kBAFL;UAKK;QACL;MAAA;IAAA,CAA2BA;EAC5B;AACF,CA1BD","names":["COMPONENT_NAME","defineComponent","name","props","isAutoWidth","Boolean","updateAll","setup","slots","formContext","throwError","formItemContext","ns","useNamespace","el","ref","computedWidth","getLabelWidth","_a","value","width","window","getComputedStyle","firstElementChild","Math","ceil","Number","parseFloat","nextTick","default","action","updateLabelWidthFn","onMounted","onBeforeUnmount","updateLabelWidth","oldVal","watch","registerLabelWidth","useResizeObserver","style","autoLabelWidth","marginWidth","max","parseInt","marginPosition","labelPosition","be"],"sources":["../../../../../../packages/components/form/src/form-label-wrap.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  Fragment,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\nimport { throwError } from '@element-plus/utils'\nimport { formItemContextKey, formContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElLabelWrap'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean,\n  },\n\n  setup(props, { slots }) {\n    const formContext = inject(formContextKey)\n    const formItemContext = inject(formItemContextKey)\n    if (!formContext || !formItemContext)\n      throwError(\n        COMPONENT_NAME,\n        'usage: <el-form><el-form-item><label-wrap /></el-form-item></el-form>'\n      )\n\n    const ns = useNamespace('form')\n\n    const el = ref<HTMLElement>()\n    const computedWidth = ref(0)\n\n    const getLabelWidth = () => {\n      if (el.value?.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width\n        return Math.ceil(Number.parseFloat(width))\n      } else {\n        return 0\n      }\n    }\n\n    const updateLabelWidth = (action: 'update' | 'remove' = 'update') => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === 'update') {\n            computedWidth.value = getLabelWidth()\n          } else if (action === 'remove') {\n            formContext.deregisterLabelWidth(computedWidth.value)\n          }\n        }\n      })\n    }\n    const updateLabelWidthFn = () => updateLabelWidth('update')\n\n    onMounted(() => {\n      updateLabelWidthFn()\n    })\n    onBeforeUnmount(() => {\n      updateLabelWidth('remove')\n    })\n    onUpdated(() => updateLabelWidthFn())\n\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        formContext.registerLabelWidth(val, oldVal)\n      }\n    })\n\n    useResizeObserver(\n      computed(\n        () => (el.value?.firstElementChild ?? null) as HTMLElement | null\n      ),\n      updateLabelWidthFn\n    )\n\n    return () => {\n      if (!slots) return null\n\n      const { isAutoWidth } = props\n      if (isAutoWidth) {\n        const autoLabelWidth = formContext.autoLabelWidth\n        const style: CSSProperties = {}\n        if (autoLabelWidth && autoLabelWidth !== 'auto') {\n          const marginWidth = Math.max(\n            0,\n            Number.parseInt(autoLabelWidth, 10) - computedWidth.value\n          )\n          const marginPosition =\n            formContext.labelPosition === 'left' ? 'marginRight' : 'marginLeft'\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`\n          }\n        }\n        return (\n          <div ref={el} class={[ns.be('item', 'label-wrap')]} style={style}>\n            {slots.default?.()}\n          </div>\n        )\n      } else {\n        return <Fragment ref={el}>{slots.default?.()}</Fragment>\n      }\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}