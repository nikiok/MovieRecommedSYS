{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, nextTick, onMounted, onBeforeUnmount, toRefs, resolveComponent, resolveDirective, openBlock, createBlock, Transition, withCtx, withDirectives, createVNode, createElementVNode, createElementBlock, normalizeClass, normalizeStyle, withModifiers, resolveDynamicComponent, createCommentVNode, toDisplayString, withKeys, renderSlot, vShow, createTextVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport TrapFocus from '../../../directives/trap-focus/index.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nimport { on, off } from '../../../utils/dom/event.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport { useModal } from '../../../hooks/use-modal/index.mjs';\nimport { usePreventGlobal } from '../../../hooks/use-prevent-global/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\nimport { useRestoreActive } from '../../../hooks/use-restore-active/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElMessageBox\",\n  directives: {\n    TrapFocus\n  },\n  components: {\n    ElButton,\n    ElInput,\n    ElOverlay,\n    ElIcon,\n    ...TypeComponents\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean\n    },\n    container: {\n      type: String,\n      default: \"body\"\n    },\n    boxType: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"vanish\", \"action\"],\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const visible = ref(false);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const state = reactive({\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: \"\",\n      cancelButtonClass: \"\",\n      confirmButtonText: \"\",\n      confirmButtonClass: \"\",\n      customClass: \"\",\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: \"\",\n      inputPattern: null,\n      inputPlaceholder: \"\",\n      inputType: \"text\",\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: \"\",\n      message: null,\n      modalFade: true,\n      modalClass: \"\",\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: \"\",\n      title: void 0,\n      showInput: false,\n      action: \"\",\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: \"\",\n      validateError: false,\n      zIndex: nextZIndex()\n    });\n    const typeClass = computed(() => {\n      const type = state.type;\n      return type && TypeComponentsMap[type] ? `el-message-box-icon--${type}` : \"\";\n    });\n    const btnSize = useSize(computed(() => props.buttonSize), {\n      prop: true,\n      form: true,\n      formItem: true\n    });\n    const iconComponent = computed(() => state.icon || TypeComponentsMap[state.type] || \"\");\n    const hasMessage = computed(() => !!state.message);\n    const rootRef = ref();\n    const headerRef = ref();\n    const inputRef = ref();\n    const confirmRef = ref();\n    const confirmButtonClasses = computed(() => state.confirmButtonClass);\n    watch(() => state.inputValue, async val => {\n      await nextTick();\n      if (props.boxType === \"prompt\" && val !== null) {\n        validate();\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => visible.value, val => {\n      if (val) {\n        if (props.boxType === \"alert\" || props.boxType === \"confirm\") {\n          nextTick().then(() => {\n            var _a, _b, _c;\n            (_c = (_b = (_a = confirmRef.value) == null ? void 0 : _a.$el) == null ? void 0 : _b.focus) == null ? void 0 : _c.call(_b);\n          });\n        }\n        state.zIndex = nextZIndex();\n      }\n      if (props.boxType !== \"prompt\") return;\n      if (val) {\n        nextTick().then(() => {\n          if (inputRef.value && inputRef.value.$el) {\n            getInputElement().focus();\n          }\n        });\n      } else {\n        state.editorErrorMessage = \"\";\n        state.validateError = false;\n      }\n    });\n    const draggable = computed(() => props.draggable);\n    useDraggable(rootRef, headerRef, draggable);\n    onMounted(async () => {\n      await nextTick();\n      if (props.closeOnHashChange) {\n        on(window, \"hashchange\", doClose);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, \"hashchange\", doClose);\n      }\n    });\n    function doClose() {\n      if (!visible.value) return;\n      visible.value = false;\n      nextTick(() => {\n        if (state.action) emit(\"action\", state.action);\n      });\n    }\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? \"close\" : \"cancel\");\n      }\n    };\n    const overlayEvent = useSameTarget(handleWrapperClick);\n    const handleInputEnter = () => {\n      if (state.inputType !== \"textarea\") {\n        return handleAction(\"confirm\");\n      }\n    };\n    const handleAction = action => {\n      var _a;\n      if (props.boxType === \"prompt\" && action === \"confirm\" && !validate()) {\n        return;\n      }\n      state.action = action;\n      if (state.beforeClose) {\n        (_a = state.beforeClose) == null ? void 0 : _a.call(state, action, state, doClose);\n      } else {\n        doClose();\n      }\n    };\n    const validate = () => {\n      if (props.boxType === \"prompt\") {\n        const inputPattern = state.inputPattern;\n        if (inputPattern && !inputPattern.test(state.inputValue || \"\")) {\n          state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n          state.validateError = true;\n          return false;\n        }\n        const inputValidator = state.inputValidator;\n        if (typeof inputValidator === \"function\") {\n          const validateResult = inputValidator(state.inputValue);\n          if (validateResult === false) {\n            state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n            state.validateError = true;\n            return false;\n          }\n          if (typeof validateResult === \"string\") {\n            state.editorErrorMessage = validateResult;\n            state.validateError = true;\n            return false;\n          }\n        }\n      }\n      state.editorErrorMessage = \"\";\n      state.validateError = false;\n      return true;\n    };\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs;\n      return inputRefs.input || inputRefs.textarea;\n    };\n    const handleClose = () => {\n      handleAction(\"close\");\n    };\n    if (props.closeOnPressEscape) {\n      useModal({\n        handleClose\n      }, visible);\n    } else {\n      usePreventGlobal(visible, \"keydown\", e => e.code === EVENT_CODE.esc);\n    }\n    if (props.lockScroll) {\n      useLockscreen(visible);\n    }\n    useRestoreActive(visible);\n    return {\n      ...toRefs(state),\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose,\n      handleClose,\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = {\n  key: 0,\n  ref: \"headerRef\",\n  class: \"el-message-box__header\"\n};\nconst _hoisted_3 = {\n  class: \"el-message-box__title\"\n};\nconst _hoisted_4 = {\n  class: \"el-message-box__content\"\n};\nconst _hoisted_5 = {\n  class: \"el-message-box__container\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"el-message-box__message\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = [\"innerHTML\"];\nconst _hoisted_9 = {\n  class: \"el-message-box__input\"\n};\nconst _hoisted_10 = {\n  class: \"el-message-box__btns\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_close = resolveComponent(\"close\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_el_overlay = resolveComponent(\"el-overlay\");\n  const _directive_trap_focus = resolveDirective(\"trap-focus\");\n  return openBlock(), createBlock(Transition, {\n    name: \"fade-in-linear\",\n    onAfterLeave: _cache[11] || (_cache[11] = $event => _ctx.$emit(\"vanish\"))\n  }, {\n    default: withCtx(() => [withDirectives(createVNode(_component_el_overlay, {\n      \"z-index\": _ctx.zIndex,\n      \"overlay-class\": [\"is-message-box\", _ctx.modalClass],\n      mask: _ctx.modal\n    }, {\n      default: withCtx(() => [createElementVNode(\"div\", {\n        class: \"el-overlay-message-box\",\n        onClick: _cache[8] || (_cache[8] = (...args) => _ctx.overlayEvent.onClick && _ctx.overlayEvent.onClick(...args)),\n        onMousedown: _cache[9] || (_cache[9] = (...args) => _ctx.overlayEvent.onMousedown && _ctx.overlayEvent.onMousedown(...args)),\n        onMouseup: _cache[10] || (_cache[10] = (...args) => _ctx.overlayEvent.onMouseup && _ctx.overlayEvent.onMouseup(...args))\n      }, [withDirectives((openBlock(), createElementBlock(\"div\", {\n        ref: \"rootRef\",\n        role: \"dialog\",\n        \"aria-label\": _ctx.title || \"dialog\",\n        \"aria-modal\": \"true\",\n        class: normalizeClass([\"el-message-box\", _ctx.customClass, {\n          \"el-message-box--center\": _ctx.center,\n          \"is-draggable\": _ctx.draggable\n        }]),\n        style: normalizeStyle(_ctx.customStyle),\n        onClick: _cache[7] || (_cache[7] = withModifiers(() => {}, [\"stop\"]))\n      }, [_ctx.title !== null && _ctx.title !== void 0 ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [createElementVNode(\"div\", _hoisted_3, [_ctx.iconComponent && _ctx.center ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", null, toDisplayString(_ctx.title), 1)]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        type: \"button\",\n        class: \"el-message-box__headerbtn\",\n        \"aria-label\": \"Close\",\n        onClick: _cache[0] || (_cache[0] = $event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\")),\n        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers($event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, [createVNode(_component_el_icon, {\n        class: \"el-message-box__close\"\n      }, {\n        default: withCtx(() => [createVNode(_component_close)]),\n        _: 1\n      })], 32)) : createCommentVNode(\"v-if\", true)], 512)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", _hoisted_4, [createElementVNode(\"div\", _hoisted_5, [_ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), _ctx.hasMessage ? (openBlock(), createElementBlock(\"div\", _hoisted_6, [renderSlot(_ctx.$slots, \"default\", {}, () => [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", _hoisted_7, toDisplayString(_ctx.message), 1)) : (openBlock(), createElementBlock(\"p\", {\n        key: 1,\n        innerHTML: _ctx.message\n      }, null, 8, _hoisted_8))])])) : createCommentVNode(\"v-if\", true)]), withDirectives(createElementVNode(\"div\", _hoisted_9, [createVNode(_component_el_input, {\n        ref: \"inputRef\",\n        modelValue: _ctx.inputValue,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.inputValue = $event),\n        type: _ctx.inputType,\n        placeholder: _ctx.inputPlaceholder,\n        class: normalizeClass({\n          invalid: _ctx.validateError\n        }),\n        onKeydown: withKeys(withModifiers(_ctx.handleInputEnter, [\"prevent\"]), [\"enter\"])\n      }, null, 8, [\"modelValue\", \"type\", \"placeholder\", \"class\", \"onKeydown\"]), createElementVNode(\"div\", {\n        class: \"el-message-box__errormsg\",\n        style: normalizeStyle({\n          visibility: !!_ctx.editorErrorMessage ? \"visible\" : \"hidden\"\n        })\n      }, toDisplayString(_ctx.editorErrorMessage), 5)], 512), [[vShow, _ctx.showInput]])]), createElementVNode(\"div\", _hoisted_10, [_ctx.showCancelButton ? (openBlock(), createBlock(_component_el_button, {\n        key: 0,\n        loading: _ctx.cancelButtonLoading,\n        class: normalizeClass([_ctx.cancelButtonClass]),\n        round: _ctx.roundButton,\n        size: _ctx.btnSize,\n        onClick: _cache[3] || (_cache[3] = $event => _ctx.handleAction(\"cancel\")),\n        onKeydown: _cache[4] || (_cache[4] = withKeys(withModifiers($event => _ctx.handleAction(\"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.cancelButtonText || _ctx.t(\"el.messagebox.cancel\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"size\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(_component_el_button, {\n        ref: \"confirmRef\",\n        type: \"primary\",\n        loading: _ctx.confirmButtonLoading,\n        class: normalizeClass([_ctx.confirmButtonClasses]),\n        round: _ctx.roundButton,\n        disabled: _ctx.confirmButtonDisabled,\n        size: _ctx.btnSize,\n        onClick: _cache[5] || (_cache[5] = $event => _ctx.handleAction(\"confirm\")),\n        onKeydown: _cache[6] || (_cache[6] = withKeys(withModifiers($event => _ctx.handleAction(\"confirm\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.confirmButtonText || _ctx.t(\"el.messagebox.confirm\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"disabled\", \"size\"]), [[vShow, _ctx.showConfirmButton]])])], 14, _hoisted_1)), [[_directive_trap_focus]])], 32)]),\n      _: 3\n    }, 8, [\"z-index\", \"overlay-class\", \"mask\"]), [[vShow, _ctx.visible]])]),\n    _: 3\n  });\n}\nvar MessageBoxConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { MessageBoxConstructor as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","directives","TrapFocus","components","ElButton","ElInput","ElOverlay","ElIcon","inheritAttrs","props","buttonSize","type","validator","modal","default","lockScroll","showClose","closeOnClickModal","closeOnPressEscape","closeOnHashChange","center","draggable","roundButton","container","boxType","emits","setup","emit","t","visible","ref","nextZIndex","state","reactive","beforeClose","callback","cancelButtonText","cancelButtonClass","confirmButtonText","confirmButtonClass","customClass","customStyle","dangerouslyUseHTMLString","distinguishCancelAndClose","icon","inputPattern","inputPlaceholder","inputType","inputValue","inputValidator","inputErrorMessage","message","modalFade","modalClass","showCancelButton","showConfirmButton","title","showInput","action","confirmButtonLoading","cancelButtonLoading","confirmButtonDisabled","editorErrorMessage","validateError","zIndex","computed","useSize","prop","form","formItem","iconComponent","hasMessage","rootRef","headerRef","inputRef","confirmRef","watch","val","validate","immediate","value","nextTick","then","getInputElement","useDraggable","onMounted","on","onBeforeUnmount","off","doClose","handleWrapperClick","handleAction","overlayEvent","validateResult","useModal","handleClose","usePreventGlobal","useLockscreen","useRestoreActive","typeClass","btnSize","confirmButtonClasses","handleInputEnter","_hoisted_2","key","class","_hoisted_6","_directive_trap_focus","onClick","onMousedown","_withDirectives","role","_ctx","style","_","onKeydown","_createVNode","_hoisted_4","_createElementVNode","_renderSlot","modelValue","placeholder","invalid","visibility","loading","round","size","disabled"],"sources":["../../../../../../packages/components/message-box/src/index.vue"],"sourcesContent":["<template>\n  <transition name=\"fade-in-linear\" @after-leave=\"$emit('vanish')\">\n    <el-overlay\n      v-show=\"visible\"\n      :z-index=\"zIndex\"\n      :overlay-class=\"['is-message-box', modalClass]\"\n      :mask=\"modal\"\n    >\n      <div\n        class=\"el-overlay-message-box\"\n        @click=\"overlayEvent.onClick\"\n        @mousedown=\"overlayEvent.onMousedown\"\n        @mouseup=\"overlayEvent.onMouseup\"\n      >\n        <div\n          ref=\"rootRef\"\n          v-trap-focus\n          role=\"dialog\"\n          :aria-label=\"title || 'dialog'\"\n          aria-modal=\"true\"\n          :class=\"[\n            'el-message-box',\n            customClass,\n            { 'el-message-box--center': center, 'is-draggable': draggable },\n          ]\"\n          :style=\"customStyle\"\n          @click.stop=\"\"\n        >\n          <div\n            v-if=\"title !== null && title !== undefined\"\n            ref=\"headerRef\"\n            class=\"el-message-box__header\"\n          >\n            <div class=\"el-message-box__title\">\n              <el-icon\n                v-if=\"iconComponent && center\"\n                class=\"el-message-box__status\"\n                :class=\"typeClass\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <span>{{ title }}</span>\n            </div>\n            <button\n              v-if=\"showClose\"\n              type=\"button\"\n              class=\"el-message-box__headerbtn\"\n              aria-label=\"Close\"\n              @click=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n              @keydown.prevent.enter=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n            >\n              <el-icon class=\"el-message-box__close\">\n                <close />\n              </el-icon>\n            </button>\n          </div>\n          <div class=\"el-message-box__content\">\n            <div class=\"el-message-box__container\">\n              <el-icon\n                v-if=\"iconComponent && !center && hasMessage\"\n                class=\"el-message-box__status\"\n                :class=\"typeClass\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <div v-if=\"hasMessage\" class=\"el-message-box__message\">\n                <slot>\n                  <p v-if=\"!dangerouslyUseHTMLString\">{{ message }}</p>\n                  <p v-else v-html=\"message\" />\n                </slot>\n              </div>\n            </div>\n            <div v-show=\"showInput\" class=\"el-message-box__input\">\n              <el-input\n                ref=\"inputRef\"\n                v-model=\"inputValue\"\n                :type=\"inputType\"\n                :placeholder=\"inputPlaceholder\"\n                :class=\"{ invalid: validateError }\"\n                @keydown.prevent.enter=\"handleInputEnter\"\n              />\n              <div\n                class=\"el-message-box__errormsg\"\n                :style=\"{\n                  visibility: !!editorErrorMessage ? 'visible' : 'hidden',\n                }\"\n              >\n                {{ editorErrorMessage }}\n              </div>\n            </div>\n          </div>\n          <div class=\"el-message-box__btns\">\n            <el-button\n              v-if=\"showCancelButton\"\n              :loading=\"cancelButtonLoading\"\n              :class=\"[cancelButtonClass]\"\n              :round=\"roundButton\"\n              :size=\"btnSize\"\n              @click=\"handleAction('cancel')\"\n              @keydown.prevent.enter=\"handleAction('cancel')\"\n            >\n              {{ cancelButtonText || t('el.messagebox.cancel') }}\n            </el-button>\n            <el-button\n              v-show=\"showConfirmButton\"\n              ref=\"confirmRef\"\n              type=\"primary\"\n              :loading=\"confirmButtonLoading\"\n              :class=\"[confirmButtonClasses]\"\n              :round=\"roundButton\"\n              :disabled=\"confirmButtonDisabled\"\n              :size=\"btnSize\"\n              @click=\"handleAction('confirm')\"\n              @keydown.prevent.enter=\"handleAction('confirm')\"\n            >\n              {{ confirmButtonText || t('el.messagebox.confirm') }}\n            </el-button>\n          </div>\n        </div>\n      </div>\n    </el-overlay>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  onMounted,\n  onBeforeUnmount,\n  computed,\n  watch,\n  reactive,\n  ref,\n  toRefs,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport { TrapFocus } from '@element-plus/directives'\nimport {\n  useModal,\n  useLockscreen,\n  useLocale,\n  useRestoreActive,\n  usePreventGlobal,\n  useSize,\n  useDraggable,\n  useSameTarget,\n  useZIndex,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport {\n  on,\n  off,\n  isValidComponentSize,\n  TypeComponents,\n  TypeComponentsMap,\n} from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type {\n  Action,\n  MessageBoxState,\n  MessageBoxType,\n} from './message-box.type'\n\nexport default defineComponent({\n  name: 'ElMessageBox',\n  directives: {\n    TrapFocus,\n  },\n  components: {\n    ElButton,\n    ElInput,\n    ElOverlay,\n    ElIcon,\n    ...TypeComponents,\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    modal: {\n      type: Boolean,\n      default: true,\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true,\n    },\n    showClose: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true,\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean,\n    },\n    container: {\n      type: String, // default append to body\n      default: 'body',\n    },\n    boxType: {\n      type: String as PropType<MessageBoxType>,\n      default: '',\n    },\n  },\n  emits: ['vanish', 'action'],\n  setup(props, { emit }) {\n    // const popup = usePopup(props, doClose)\n    const { t } = useLocale()\n    const visible = ref(false)\n    const { nextZIndex } = useZIndex()\n    // s represents state\n    const state = reactive<MessageBoxState>({\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: '',\n      cancelButtonClass: '',\n      confirmButtonText: '',\n      confirmButtonClass: '',\n      customClass: '',\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: '',\n      inputPattern: null,\n      inputPlaceholder: '',\n      inputType: 'text',\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: '',\n      message: null,\n      modalFade: true,\n      modalClass: '',\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: '',\n      title: undefined,\n      showInput: false,\n      action: '' as Action,\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: '',\n      // refer to: https://github.com/ElemeFE/element/commit/2999279ae34ef10c373ca795c87b020ed6753eed\n      // seemed ok for now without this state.\n      // isOnComposition: false, // temporary remove\n      validateError: false,\n      zIndex: nextZIndex(),\n    })\n\n    const typeClass = computed(() => {\n      const type = state.type\n      return type && TypeComponentsMap[type]\n        ? `el-message-box-icon--${type}`\n        : ''\n    })\n\n    const btnSize = useSize(\n      computed(() => props.buttonSize),\n      { prop: true, form: true, formItem: true }\n    )\n\n    const iconComponent = computed(\n      () => state.icon || TypeComponentsMap[state.type] || ''\n    )\n    const hasMessage = computed(() => !!state.message)\n    const rootRef = ref<HTMLElement>()\n    const headerRef = ref<HTMLElement>()\n    const inputRef = ref<HTMLElement>()\n    const confirmRef = ref<HTMLElement>()\n\n    const confirmButtonClasses = computed(() => state.confirmButtonClass)\n\n    watch(\n      () => state.inputValue,\n      async (val) => {\n        await nextTick()\n        if (props.boxType === 'prompt' && val !== null) {\n          validate()\n        }\n      },\n      { immediate: true }\n    )\n\n    watch(\n      () => visible.value,\n      (val) => {\n        if (val) {\n          if (props.boxType === 'alert' || props.boxType === 'confirm') {\n            nextTick().then(() => {\n              confirmRef.value?.$el?.focus?.()\n            })\n          }\n          state.zIndex = nextZIndex()\n        }\n        if (props.boxType !== 'prompt') return\n        if (val) {\n          nextTick().then(() => {\n            if (inputRef.value && inputRef.value.$el) {\n              getInputElement().focus()\n            }\n          })\n        } else {\n          state.editorErrorMessage = ''\n          state.validateError = false\n        }\n      }\n    )\n\n    const draggable = computed(() => props.draggable)\n    useDraggable(rootRef, headerRef, draggable)\n\n    onMounted(async () => {\n      await nextTick()\n      if (props.closeOnHashChange) {\n        on(window, 'hashchange', doClose)\n      }\n    })\n\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, 'hashchange', doClose)\n      }\n    })\n\n    function doClose() {\n      if (!visible.value) return\n      visible.value = false\n      nextTick(() => {\n        if (state.action) emit('action', state.action)\n      })\n    }\n\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? 'close' : 'cancel')\n      }\n    }\n\n    const overlayEvent = useSameTarget(handleWrapperClick)\n\n    const handleInputEnter = () => {\n      if (state.inputType !== 'textarea') {\n        return handleAction('confirm')\n      }\n    }\n\n    const handleAction = (action: Action) => {\n      if (props.boxType === 'prompt' && action === 'confirm' && !validate()) {\n        return\n      }\n\n      state.action = action\n\n      if (state.beforeClose) {\n        state.beforeClose?.(action, state, doClose)\n      } else {\n        doClose()\n      }\n    }\n\n    const validate = () => {\n      if (props.boxType === 'prompt') {\n        const inputPattern = state.inputPattern\n        if (inputPattern && !inputPattern.test(state.inputValue || '')) {\n          state.editorErrorMessage =\n            state.inputErrorMessage || t('el.messagebox.error')\n          state.validateError = true\n          return false\n        }\n        const inputValidator = state.inputValidator\n        if (typeof inputValidator === 'function') {\n          const validateResult = inputValidator(state.inputValue)\n          if (validateResult === false) {\n            state.editorErrorMessage =\n              state.inputErrorMessage || t('el.messagebox.error')\n            state.validateError = true\n            return false\n          }\n          if (typeof validateResult === 'string') {\n            state.editorErrorMessage = validateResult\n            state.validateError = true\n            return false\n          }\n        }\n      }\n      state.editorErrorMessage = ''\n      state.validateError = false\n      return true\n    }\n\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs\n      return (inputRefs.input || inputRefs.textarea) as HTMLElement\n    }\n\n    const handleClose = () => {\n      handleAction('close')\n    }\n\n    // when close on press escape is disabled, pressing esc should not callout\n    // any other message box and close any other dialog-ish elements\n    // e.g. Dialog has a close on press esc feature, and when it closes, it calls\n    // props.beforeClose method to make a intermediate state by callout a message box\n    // for some verification or alerting. then if we allow global event liek this\n    // to dispatch, it could callout another message box.\n    if (props.closeOnPressEscape) {\n      useModal(\n        {\n          handleClose,\n        },\n        visible\n      )\n    } else {\n      usePreventGlobal(\n        visible,\n        'keydown',\n        (e: KeyboardEvent) => e.code === EVENT_CODE.esc\n      )\n    }\n\n    // locks the screen to prevent scroll\n    if (props.lockScroll) {\n      useLockscreen(visible)\n    }\n\n    // restore to prev active element.\n    useRestoreActive(visible)\n\n    return {\n      ...toRefs(state),\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose, // for outside usage\n      handleClose, // for out side usage\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}