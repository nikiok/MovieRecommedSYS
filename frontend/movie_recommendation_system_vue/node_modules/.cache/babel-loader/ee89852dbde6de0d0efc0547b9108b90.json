{"ast":null,"code":"import 'echarts-wordcloud';\nimport { inject, nextTick, ref } from \"vue\";\nexport default {\n  name: \"CommentsWordCloud\",\n  props: {\n    mid: {\n      type: String,\n      default: \"\"\n    },\n    wordCloudData: {\n      type: Array,\n      default: [],\n      required: true\n    }\n  },\n  setup(props) {\n    const echarts = inject('echarts');\n    const commentsWordCloud = ref(null);\n    let myChart = null;\n    let option = null;\n    const initChart = () => {\n      if (myChart === null) {\n        myChart = echarts.init(commentsWordCloud.value);\n      }\n      let maskImage = new Image();\n      //词云形状的黑白矢量图\n      maskImage.src = require('../../assets/movie_planet_2.webp');\n      option = {\n        series: [{\n          type: 'wordCloud',\n          // 要绘制的“云”的形状。可以是表示为回调函数或存在关键字的任何极坐标方程。\n          // 可用的礼物有圆形（默认）、心形（苹果或心形曲线，最知名的极坐标方程）、菱形（正方形的别名）、\n          // 正三角形、三角形、（正三角形、五边形和星形的别名)\n          // circle (default), cardioid (apple or heart shape curve, the most known polar equation), diamond (\n          // alias of square), triangle-forward, triangle, (alias of triangle-upright, pentagon, and star.\n          shape: 'circle',\n          // 保持 maskImage 的纵横比或形状为 1:1 此选项支持 echarts-wordcloud@2.1.0\n          keepAspect: false,\n          // 词云的形状，根据所选的黑白矢量图来生成形状\n          // maskImage: maskImage,\n\n          // 以下 left/top/right/bottom 用于定位词云 默认放置在中心，大小为 75% x 80%。\n          left: 'center',\n          top: 'center',\n          width: '100%',\n          height: '100%',\n          right: null,\n          bottom: null,\n          // 数据中的值将被映射到的文本大小范围。默认具有最小 12 像素和最大 60 像素的大小。\n          sizeRange: [12, 60],\n          // 文本旋转范围和步长。文本将在 [-90, 90] 范围内通过 rotationStep 45 随机旋转\n          rotationRange: [-45, 45],\n          rotationStep: 45,\n          // 用于标记画布可用性的网格大小（以像素为单位） 网格大小越大，单词之间的间隙越大。\n          gridSize: 8,\n          // 设置为 true 以允许在画布之外部分绘制单词。允许绘制大于画布大小的单词\n          drawOutOfBound: false,\n          // 如果执行布局动画。注意禁用它会导致当有很多单词时 UI 阻塞。\n          layoutAnimation: true,\n          // 全局文本样式\n          textStyle: {\n            fontFamily: 'sans-serif',\n            fontWeight: 'bold',\n            // 颜色可以是回调函数或颜色字符串\n            color: function () {\n              // 随机颜色\n              return 'rgb(' + [Math.round(Math.random() * 160), Math.round(Math.random() * 160), Math.round(Math.random() * 160)].join(',') + ')';\n            }\n          },\n          emphasis: {\n            focus: 'self',\n            textStyle: {\n              textShadowBlur: 10,\n              textShadowColor: '#333'\n            }\n          },\n          // 数据是一个数组。每个数组项都必须具有 name 和 value 属性。\n          data: props.wordCloudData\n        }]\n      };\n\n      // 绘制图表\n      maskImage.onload = function () {\n        myChart.setOption(option);\n      };\n      // 自适应，屏幕大小变化时，图像重新渲染\n      window.onresize = function () {\n        myChart.resize();\n      };\n    };\n    let isFirst = true;\n    let isShow = ref(false);\n    const handleShow = () => {\n      isShow.value = !isShow.value;\n      if (isShow.value === true && isFirst) {\n        // 只需再第一次的时候初始化词云图\n        isFirst = false;\n        // 将回调延迟到下次 DOM 更新循环之后执行\n        nextTick(() => {\n          initChart();\n        });\n      }\n    };\n    return {\n      commentsWordCloud,\n      isShow,\n      handleShow\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["inject","nextTick","ref","name","props","mid","type","String","default","wordCloudData","Array","required","setup","echarts","commentsWordCloud","myChart","option","initChart","init","value","maskImage","Image","src","require","series","shape","keepAspect","left","top","width","height","right","bottom","sizeRange","rotationRange","rotationStep","gridSize","drawOutOfBound","layoutAnimation","textStyle","fontFamily","fontWeight","color","Math","round","random","join","emphasis","focus","textShadowBlur","textShadowColor","data","onload","setOption","window","onresize","resize","isFirst","isShow","handleShow"],"sourceRoot":"","sources":["F:\\personalSpace\\lx-bishe\\movie_recommendation_system_vue\\src\\components\\charts\\CommentsWordCloud.vue"],"sourcesContent":["<template>\r\n  <el-button @click=\"handleShow\" type=\"info\">\r\n    评论词云图\r\n    <template #icon>\r\n      <el-icon><MostlyCloudy /></el-icon>\r\n    </template>\r\n  </el-button>\r\n  <el-dialog\r\n      v-model=\"isShow\"\r\n      title=\"评论词云图\"\r\n      draggable\r\n      :lock-scroll=\"false\"\r\n      width=\"100%\"\r\n  >\r\n    <div ref=\"commentsWordCloud\" style=\"width: 100%; height: 30rem;\"></div>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script>\r\nimport 'echarts-wordcloud';\r\nimport {inject, nextTick, ref} from \"vue\";\r\n\r\nexport default {\r\n  name: \"CommentsWordCloud\",\r\n  props: {\r\n    mid: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    wordCloudData: {\r\n      type: Array,\r\n      default: [],\r\n      required: true,\r\n    }\r\n  },\r\n  setup(props) {\r\n    const echarts = inject('echarts');\r\n    const commentsWordCloud = ref(null);\r\n\r\n    let myChart = null;\r\n    let option = null;\r\n    const initChart = () => {\r\n      if (myChart === null) {\r\n        myChart = echarts.init(commentsWordCloud.value);\r\n      }\r\n\r\n      let maskImage = new Image();\r\n      //词云形状的黑白矢量图\r\n      maskImage.src = require('../../assets/movie_planet_2.webp');\r\n      option = {\r\n        series: [{\r\n          type: 'wordCloud',\r\n          // 要绘制的“云”的形状。可以是表示为回调函数或存在关键字的任何极坐标方程。\r\n          // 可用的礼物有圆形（默认）、心形（苹果或心形曲线，最知名的极坐标方程）、菱形（正方形的别名）、\r\n          // 正三角形、三角形、（正三角形、五边形和星形的别名)\r\n          // circle (default), cardioid (apple or heart shape curve, the most known polar equation), diamond (\r\n          // alias of square), triangle-forward, triangle, (alias of triangle-upright, pentagon, and star.\r\n          shape: 'circle',\r\n          // 保持 maskImage 的纵横比或形状为 1:1 此选项支持 echarts-wordcloud@2.1.0\r\n          keepAspect: false,\r\n\r\n          // 词云的形状，根据所选的黑白矢量图来生成形状\r\n          // maskImage: maskImage,\r\n\r\n          // 以下 left/top/right/bottom 用于定位词云 默认放置在中心，大小为 75% x 80%。\r\n          left: 'center',\r\n          top: 'center',\r\n          width: '100%',\r\n          height: '100%',\r\n          right: null,\r\n          bottom: null,\r\n          // 数据中的值将被映射到的文本大小范围。默认具有最小 12 像素和最大 60 像素的大小。\r\n          sizeRange: [12, 60],\r\n          // 文本旋转范围和步长。文本将在 [-90, 90] 范围内通过 rotationStep 45 随机旋转\r\n          rotationRange: [-45, 45],\r\n          rotationStep: 45,\r\n          // 用于标记画布可用性的网格大小（以像素为单位） 网格大小越大，单词之间的间隙越大。\r\n          gridSize: 8,\r\n          // 设置为 true 以允许在画布之外部分绘制单词。允许绘制大于画布大小的单词\r\n          drawOutOfBound: false,\r\n          // 如果执行布局动画。注意禁用它会导致当有很多单词时 UI 阻塞。\r\n          layoutAnimation: true,\r\n          // 全局文本样式\r\n          textStyle: {\r\n            fontFamily: 'sans-serif',\r\n            fontWeight: 'bold',\r\n            // 颜色可以是回调函数或颜色字符串\r\n            color: function () {\r\n              // 随机颜色\r\n              return 'rgb(' + [\r\n                Math.round(Math.random() * 160),\r\n                Math.round(Math.random() * 160),\r\n                Math.round(Math.random() * 160)\r\n              ].join(',') + ')';\r\n            }\r\n          },\r\n          emphasis: {\r\n            focus: 'self',\r\n            textStyle: {\r\n              textShadowBlur: 10,\r\n              textShadowColor: '#333'\r\n            }\r\n          },\r\n\r\n          // 数据是一个数组。每个数组项都必须具有 name 和 value 属性。\r\n          data: props.wordCloudData,\r\n        }]\r\n      };\r\n\r\n      // 绘制图表\r\n      maskImage.onload = function () {\r\n        myChart.setOption(option);\r\n      };\r\n      // 自适应，屏幕大小变化时，图像重新渲染\r\n      window.onresize = function () {\r\n        myChart.resize();\r\n      };\r\n    }\r\n\r\n    let isFirst = true;\r\n    let isShow = ref(false);\r\n    const handleShow = () => {\r\n      isShow.value = !isShow.value;\r\n      if (isShow.value === true && isFirst) {\r\n        // 只需再第一次的时候初始化词云图\r\n        isFirst = false;\r\n        // 将回调延迟到下次 DOM 更新循环之后执行\r\n        nextTick(() => {\r\n          initChart();\r\n        })\r\n      }\r\n    }\r\n\r\n    return {\r\n      commentsWordCloud,\r\n      isShow,\r\n      handleShow,\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}