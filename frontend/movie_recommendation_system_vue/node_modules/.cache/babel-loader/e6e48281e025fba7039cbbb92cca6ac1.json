{"ast":null,"code":"import { defineComponent, inject, computed, unref, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../roving-focus-group/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { DROPDOWN_INJECTION_KEY } from './tokens.mjs';\nimport { dropdownMenuProps, DROPDOWN_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY, FIRST_LAST_KEYS, LAST_KEYS } from './dropdown.mjs';\nimport { useDropdown } from './useDropdown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { FOCUS_TRAP_INJECTION_KEY } from '../../focus-trap/src/tokens.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY } from '../../roving-focus-group/src/tokens.mjs';\nimport { ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY$1 } from '../../roving-focus-group/src/roving-focus-group.mjs';\nimport { composeRefs } from '../../../utils/vue/refs.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusFirst } from '../../roving-focus-group/src/utils.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElDropdownMenu\",\n  props: dropdownMenuProps,\n  setup(props) {\n    const ns = useNamespace(\"dropdown\");\n    const {\n      _elDropdownSize\n    } = useDropdown();\n    const size = _elDropdownSize.value;\n    const {\n      focusTrapRef,\n      onKeydown\n    } = inject(FOCUS_TRAP_INJECTION_KEY, void 0);\n    const {\n      contentRef\n    } = inject(DROPDOWN_INJECTION_KEY, void 0);\n    const {\n      collectionRef: dropdownCollectionRef,\n      getItems\n    } = inject(COLLECTION_INJECTION_KEY, void 0);\n    const {\n      rovingFocusGroupRef,\n      rovingFocusGroupRootStyle,\n      tabIndex,\n      onBlur,\n      onFocus,\n      onMousedown\n    } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);\n    const {\n      collectionRef: rovingFocusGroupCollectionRef\n    } = inject(COLLECTION_INJECTION_KEY$1, void 0);\n    const dropdownKls = computed(() => {\n      return [ns.b(\"menu\"), ns.bm(\"menu\", size == null ? void 0 : size.value)];\n    });\n    const dropdownListWrapperRef = composeRefs(contentRef, dropdownCollectionRef, focusTrapRef, rovingFocusGroupRef, rovingFocusGroupCollectionRef);\n    const composedKeydown = composeEventHandlers(e => {\n      var _a;\n      (_a = props.onKeydown) == null ? void 0 : _a.call(props, e);\n    }, e => {\n      const {\n        currentTarget,\n        code,\n        target\n      } = e;\n      const isKeydownContained = currentTarget.contains(target);\n      if (isKeydownContained) {}\n      if (EVENT_CODE.tab === code) {\n        e.stopImmediatePropagation();\n      }\n      e.preventDefault();\n      if (target !== unref(contentRef)) return;\n      if (!FIRST_LAST_KEYS.includes(code)) return;\n      const items = getItems().filter(item => !item.disabled);\n      const targets = items.map(item => item.ref);\n      if (LAST_KEYS.includes(code)) {\n        targets.reverse();\n      }\n      focusFirst(targets);\n    });\n    const handleKeydown = e => {\n      composedKeydown(e);\n      onKeydown(e);\n    };\n    return {\n      size,\n      rovingFocusGroupRootStyle,\n      tabIndex,\n      dropdownKls,\n      dropdownListWrapperRef,\n      handleKeydown,\n      onBlur,\n      onFocus,\n      onMousedown\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"ul\", {\n    ref: _ctx.dropdownListWrapperRef,\n    class: normalizeClass(_ctx.dropdownKls),\n    style: normalizeStyle(_ctx.rovingFocusGroupRootStyle),\n    tabindex: -1,\n    role: \"menu\",\n    onBlur: _cache[0] || (_cache[0] = (...args) => _ctx.onBlur && _ctx.onBlur(...args)),\n    onFocus: _cache[1] || (_cache[1] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),\n    onKeydown: _cache[2] || (_cache[2] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args)),\n    onMousedown: _cache[3] || (_cache[3] = (...args) => _ctx.onMousedown && _ctx.onMousedown(...args))\n  }, [renderSlot(_ctx.$slots, \"default\")], 38);\n}\nvar DropdownMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { DropdownMenu as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAmCA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,KAAO;EACPC,MAAMD,KAAO;IACX,MAAME,KAAKC,YAAa;IACxB,MAAM;MAAEC;IAAoB;IAC5B,MAAMC,OAAOD,eAAgB;IAE7B,MAAM;MAAEE;MAAcC;IAAc,WAClCC,wBACA;IAGI;MAAEC;IAAe,WAAOC,sBAAwB;IAEtD,MAAM;MAAEC,eAAeC,qBAAuB;MAAAC;IAAA,IAAaC,OACzDC,wBACA;IAGI;MACJC;MACAC;MACAC;MACAC;MACAC;MACAC;IAAA,IACEP,OAAOQ,gCAAkC;IAE7C,MAAM;MAAEX,eAAeY;IAAkC,WACvDC,0BACA;IAGI,oBAAcC,SAAS,MAAM;MACjC,OAAO,CAACvB,EAAG,GAAE,SAASA,EAAG,IAAG,QAAQG,IAAM;IAAA;IAG5C,MAAMqB,sBAAyB,eAC7BjB,UACA,yBACAH,cACAU,mBACA;IAGI,wBAAkBW,oBACtB,CAACC,CAAqB;MACpB,MAAM;MAAY,CAEpBC,EAAO;IACL,CAAM,OAAE;MACF;QAAAC;QAAAC,IAAsB;QAAAC;MAAA,KAAuB;MAInD,MAAwBC;MAAA,yBAIxB;MACI;QAAAL;MAGJ;MAEAA,gBAAqB;MAAa,kCAC9B;MAAiC,qCACrC;MAGA,MAAMM,KAAU,WAAM,EAAI,YAAe;MACrC,yBAA0B;MACpB;QAAAC;MAEV;MAAWC;IAIf,CAAM;IACY;MACNC;MAAA9B;IAGZ,CAAO;IACL;MACAF;MACAY;MACAC;MACAoB;MACAZ;MACAa;MACApB;MACAC;MAAAC;IAAA;EAAA;;yBAnHC;EAAA,OAXGmB;IACLC,SAAO;IACPC,OAAKC,cAAE;IACPC,KAAU;IACXC,QAAK;IACJC,YAAM;IACN3B,cAAO;IACPC,eAAS;IACTb,iBAAW;IAAAc;KAEJ","names":["_sfc_main","defineComponent","name","props","setup","ns","useNamespace","_elDropdownSize","size","focusTrapRef","onKeydown","FOCUS_TRAP_INJECTION_KEY","contentRef","DROPDOWN_INJECTION_KEY","collectionRef","dropdownCollectionRef","getItems","inject","DROPDOWN_COLLECTION_INJECTION_KEY","rovingFocusGroupRef","rovingFocusGroupRootStyle","tabIndex","onBlur","onFocus","onMousedown","ROVING_FOCUS_GROUP_INJECTION_KEY","rovingFocusGroupCollectionRef","ROVING_FOCUS_COLLECTION_INJECTION_KEY","computed","dropdownListWrapperRef","composeEventHandlers","e","_a","currentTarget","code","target","isKeydownContained","items","targets","focusFirst","composedKeydown","dropdownKls","handleKeydown","_openBlock","ref","class","_normalizeClass","style","tabindex","role"],"sources":["../../../../../../packages/components/dropdown/src/dropdown-menu.vue"],"sourcesContent":["<template>\n  <ul\n    :ref=\"dropdownListWrapperRef\"\n    :class=\"dropdownKls\"\n    :style=\"rovingFocusGroupRootStyle\"\n    :tabindex=\"-1\"\n    role=\"menu\"\n    @blur=\"onBlur\"\n    @focus=\"onFocus\"\n    @keydown=\"handleKeydown\"\n    @mousedown=\"onMousedown\"\n  >\n    <slot />\n  </ul>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, inject, unref } from 'vue'\nimport { composeRefs, composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport {\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n  ROVING_FOCUS_GROUP_INJECTION_KEY,\n  focusFirst,\n} from '@element-plus/components/roving-focus-group'\nimport { useNamespace } from '@element-plus/hooks'\nimport { DROPDOWN_INJECTION_KEY } from './tokens'\nimport {\n  DROPDOWN_COLLECTION_INJECTION_KEY,\n  dropdownMenuProps,\n  FIRST_LAST_KEYS,\n  LAST_KEYS,\n} from './dropdown'\nimport { useDropdown } from './useDropdown'\n\nexport default defineComponent({\n  name: 'ElDropdownMenu',\n  props: dropdownMenuProps,\n  setup(props) {\n    const ns = useNamespace('dropdown')\n    const { _elDropdownSize } = useDropdown()\n    const size = _elDropdownSize.value\n\n    const { focusTrapRef, onKeydown } = inject(\n      FOCUS_TRAP_INJECTION_KEY,\n      undefined\n    )!\n\n    const { contentRef } = inject(DROPDOWN_INJECTION_KEY, undefined)!\n\n    const { collectionRef: dropdownCollectionRef, getItems } = inject(\n      DROPDOWN_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const {\n      rovingFocusGroupRef,\n      rovingFocusGroupRootStyle,\n      tabIndex,\n      onBlur,\n      onFocus,\n      onMousedown,\n    } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, undefined)!\n\n    const { collectionRef: rovingFocusGroupCollectionRef } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const dropdownKls = computed(() => {\n      return [ns.b('menu'), ns.bm('menu', size?.value)]\n    })\n\n    const dropdownListWrapperRef = composeRefs(\n      contentRef,\n      dropdownCollectionRef,\n      focusTrapRef,\n      rovingFocusGroupRef,\n      rovingFocusGroupCollectionRef\n    )\n\n    const composedKeydown = composeEventHandlers(\n      (e: KeyboardEvent) => {\n        props.onKeydown?.(e)\n      },\n      (e) => {\n        const { currentTarget, code, target } = e\n        const isKeydownContained = (currentTarget as Node).contains(\n          target as Node\n        )\n\n        if (isKeydownContained) {\n          // TODO: implement typeahead search\n        }\n\n        if (EVENT_CODE.tab === code) {\n          e.stopImmediatePropagation()\n        }\n\n        e.preventDefault()\n\n        if (target !== unref(contentRef)) return\n        if (!FIRST_LAST_KEYS.includes(code)) return\n        const items = getItems<{ disabled: boolean }>().filter(\n          (item) => !item.disabled\n        )\n        const targets = items.map((item) => item.ref!)\n        if (LAST_KEYS.includes(code)) {\n          targets.reverse()\n        }\n        focusFirst(targets)\n      }\n    )\n\n    const handleKeydown = (e: KeyboardEvent) => {\n      composedKeydown(e)\n      onKeydown(e)\n    }\n\n    return {\n      size,\n      rovingFocusGroupRootStyle,\n      tabIndex,\n      dropdownKls,\n      dropdownListWrapperRef,\n      handleKeydown,\n      onBlur,\n      onFocus,\n      onMousedown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}