{"ast":null,"code":"import { inject, onMounted, ref } from \"vue\";\nimport axios from \"axios\";\nimport { useRouter } from \"vue-router\";\nimport recommendationRequest from \"@/api/recommendation\";\nexport default {\n  name: \"MovieRelationsGraphChart\",\n  setup() {\n    const echarts = inject('echarts');\n    let MovieRelationsGraphChart = ref('MovieRelationsGraphChart');\n    let option;\n    onMounted(() => {\n      const router = useRouter();\n      let myChart = echarts.init(MovieRelationsGraphChart.value);\n\n      // 如果数据还没加载出来，会展示loading的动画\n      myChart.showLoading();\n      recommendationRequest.getLinksBetweenWatchedMoviesAndRecommendedMovies().then(res => {\n        myChart.hideLoading();\n        option = {\n          color: ['#fa7e23', '#5dbe8a'],\n          // 图表标题\n          title: {\n            text: '电影星球',\n            x: 'center',\n            y: 'top',\n            textStyle: {\n              fontSize: 30,\n              fontFamily: '宋体',\n              fontWeight: 'bolder',\n              color: '#36a4ff'\n            }\n          },\n          // 图例\n          legend: {\n            orient: 'vertical',\n            data: ['看过的电影', '推荐的电影'],\n            x: 'left',\n            // 水平安放位置\n            backgroundColor: 'rgb(40, 61, 72)',\n            borderColor: '#000000',\n            // 图例边框颜色\n            borderWidth: 0,\n            // 图例边框线宽，单位px，默认为0（无边框）\n            padding: 20,\n            // 图例内边距，单位px，默认各方向内边距为5，\n            itemGap: 15,\n            // 各个item之间的间隔，单位px，默认为10\n            textStyle: {\n              color: ['#fa7e23', '#5dbe8a'] // 图例文字颜色\n            }\n          },\n\n          tooltip: {\n            trigger: 'item',\n            showDelay: 20,\n            // 显示延迟，添加显示延迟可以避免频繁切换，单位ms\n            hideDelay: 200,\n            // 隐藏延迟，单位ms\n            formatter: param => {\n              //为了保证和原来的效果一样，这里自己实现了一个点的效果\n              let htmlStr = '';\n              const color = param.color;\n              const data = param.data;\n              if (color) {\n                htmlStr += '<span style=\"display:inline-block; width:10px; height:10px; border-radius:5px; background-color:' + color + ';\"></span>';\n                htmlStr += ' ' + data.name + ' : ' + data.value + ' 分<br/>';\n                htmlStr += '类型: ' + data.types + '<br/>';\n                htmlStr += '地区: ' + data.regions;\n              } else {\n                htmlStr += '相似指数: ' + data.idx.toFixed(2) + '%';\n              }\n              return htmlStr;\n            }\n          },\n          series: [{\n            type: 'graph',\n            layout: 'force',\n            animation: false,\n            label: {\n              normal: {\n                show: true,\n                textStyle: {\n                  fontSize: 10,\n                  color: '#B0CEFC'\n                },\n                position: 'top',\n                formatter: '{b}'\n              }\n            },\n            draggable: true,\n            data: res.data.nodes,\n            categories: res.data.categories,\n            force: {\n              //边的两个节点之间的距离.\n              edgeLength: 50,\n              // 节点之间的斥力因子。支持数组表达斥力范围，值越大斥力越大。\n              repulsion: 300,\n              // 节点受到的向中心的引力因子。该值越大节点越往中心点靠拢。\n              gravity: 0.2,\n              // 因为力引导布局会在多次迭代后才会稳定，这个参数决定是否显示布局的迭代动画，在浏览器端节点数据较多（>100）的时候不建议关闭，布局过程会造成浏览器假死。\n              layoutAnimation: true\n            },\n            edges: res.data.links\n          }]\n        };\n        myChart.setOption(option);\n        // 自适应，屏幕大小变化时，图像重新渲染\n        window.onresize = function () {\n          myChart.resize();\n        };\n      });\n      myChart.on('click', param => {\n        router.push({\n          name: 'movieInfo',\n          params: {\n            id: param.data.mid\n          }\n        });\n      });\n    });\n    return {\n      MovieRelationsGraphChart\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["inject","onMounted","ref","axios","useRouter","recommendationRequest","name","setup","echarts","MovieRelationsGraphChart","option","router","myChart","init","value","showLoading","getLinksBetweenWatchedMoviesAndRecommendedMovies","then","res","hideLoading","color","title","text","x","y","textStyle","fontSize","fontFamily","fontWeight","legend","orient","data","backgroundColor","borderColor","borderWidth","padding","itemGap","tooltip","trigger","showDelay","hideDelay","formatter","param","htmlStr","types","regions","idx","toFixed","series","type","layout","animation","label","normal","show","position","draggable","nodes","categories","force","edgeLength","repulsion","gravity","layoutAnimation","edges","links","setOption","window","onresize","resize","on","push","params","id","mid"],"sourceRoot":"","sources":["F:\\personalSpace\\lx-bishe\\movie_recommendation_system_vue\\src\\components\\charts\\MovieRelationsGraphChart.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div ref=\"MovieRelationsGraphChart\" class=\"movie-relations-chart-div\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {inject, onMounted, ref} from \"vue\";\r\nimport axios from \"axios\";\r\nimport {useRouter} from \"vue-router\";\r\nimport recommendationRequest from \"@/api/recommendation\";\r\n\r\nexport default {\r\n  name: \"MovieRelationsGraphChart\",\r\n  setup() {\r\n    const echarts = inject('echarts')\r\n\r\n    let MovieRelationsGraphChart = ref('MovieRelationsGraphChart')\r\n    let option;\r\n\r\n    onMounted(() => {\r\n      const router = useRouter();\r\n      let myChart = echarts.init(MovieRelationsGraphChart.value);\r\n\r\n      // 如果数据还没加载出来，会展示loading的动画\r\n      myChart.showLoading();\r\n      recommendationRequest.getLinksBetweenWatchedMoviesAndRecommendedMovies().then(res => {\r\n        myChart.hideLoading();\r\n        option = {\r\n          color: ['#fa7e23', '#5dbe8a'],\r\n          // 图表标题\r\n          title: {\r\n            text: '电影星球',\r\n            x: 'center',\r\n            y: 'top',\r\n            textStyle: {\r\n              fontSize: 30,\r\n              fontFamily: '宋体',\r\n              fontWeight: 'bolder',\r\n              color: '#36a4ff'\r\n            },\r\n          },\r\n          // 图例\r\n          legend: {\r\n            orient: 'vertical',\r\n            data: ['看过的电影', '推荐的电影'],\r\n            x: 'left',                 // 水平安放位置\r\n            backgroundColor: 'rgb(40, 61, 72)',\r\n            borderColor: '#000000',    // 图例边框颜色\r\n            borderWidth: 0,            // 图例边框线宽，单位px，默认为0（无边框）\r\n            padding: 20,               // 图例内边距，单位px，默认各方向内边距为5，\r\n            itemGap: 15,               // 各个item之间的间隔，单位px，默认为10\r\n            textStyle: {\r\n              color: ['#fa7e23', '#5dbe8a'],    // 图例文字颜色\r\n            }\r\n          },\r\n          tooltip: {\r\n            trigger: 'item',\r\n            showDelay: 20,             // 显示延迟，添加显示延迟可以避免频繁切换，单位ms\r\n            hideDelay: 200,           // 隐藏延迟，单位ms\r\n            formatter: (param) => {\r\n              //为了保证和原来的效果一样，这里自己实现了一个点的效果\r\n              let htmlStr = ''\r\n              const color = param.color\r\n              const data = param.data\r\n              if (color) {\r\n                htmlStr += '<span style=\"display:inline-block; width:10px; height:10px; border-radius:5px; background-color:' + color + ';\"></span>'\r\n                htmlStr += ' ' + data.name + ' : ' + data.value + ' 分<br/>'\r\n                htmlStr += '类型: ' + data.types + '<br/>'\r\n                htmlStr += '地区: ' + data.regions\r\n              } else {\r\n                htmlStr += '相似指数: ' + data.idx.toFixed(2) + '%'\r\n              }\r\n              return htmlStr\r\n            }\r\n          },\r\n          series: [{\r\n            type: 'graph',\r\n            layout: 'force',\r\n            animation: false,\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                textStyle: {\r\n                  fontSize: 10,\r\n                  color: '#B0CEFC'\r\n                },\r\n                position: 'top',\r\n                formatter: '{b}'\r\n              },\r\n            },\r\n            draggable: true,\r\n            data: res.data.nodes,\r\n            categories: res.data.categories,\r\n            force: {\r\n              //边的两个节点之间的距离.\r\n              edgeLength: 50,\r\n              // 节点之间的斥力因子。支持数组表达斥力范围，值越大斥力越大。\r\n              repulsion: 300,\r\n              // 节点受到的向中心的引力因子。该值越大节点越往中心点靠拢。\r\n              gravity: 0.2,\r\n              // 因为力引导布局会在多次迭代后才会稳定，这个参数决定是否显示布局的迭代动画，在浏览器端节点数据较多（>100）的时候不建议关闭，布局过程会造成浏览器假死。\r\n              layoutAnimation: true,\r\n            },\r\n            edges: res.data.links,\r\n          }\r\n          ]\r\n        };\r\n\r\n        myChart.setOption(option);\r\n        // 自适应，屏幕大小变化时，图像重新渲染\r\n        window.onresize = function () {\r\n          myChart.resize();\r\n        };\r\n      })\r\n\r\n      myChart.on('click', param => {\r\n        router.push({\r\n          name: 'movieInfo',\r\n          params: {\r\n            id: param.data.mid\r\n          }\r\n        })\r\n      })\r\n    })\r\n\r\n    return {\r\n      MovieRelationsGraphChart\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.movie-relations-chart-div {\r\n  background: url(\"../../assets/movie_planet_3.webp\");\r\n  background-size: cover;\r\n  width: 100%;\r\n  height: 1000px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}