{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, toRef, computed, reactive, onMounted, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createBlock, withCtx, renderSlot, createElementVNode, Fragment } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport useMenu from './use-menu.mjs';\nimport { menuItemProps, menuItemEmits } from './menu-item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { Effect } from '../../popper/src/popper.mjs';\nconst COMPONENT_NAME = \"ElMenuItem\";\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip\n  },\n  props: menuItemProps,\n  emits: menuItemEmits,\n  setup(props, {\n    emit\n  }) {\n    const instance = getCurrentInstance();\n    const rootMenu = inject(\"rootMenu\");\n    if (!rootMenu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const {\n      parentMenu,\n      paddingStyle,\n      indexPath\n    } = useMenu(instance, toRef(props, \"index\"));\n    const subMenu = inject(`subMenu:${parentMenu.value.uid}`);\n    if (!subMenu) throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    const active = computed(() => props.index === rootMenu.activeIndex);\n    const item = reactive({\n      index: props.index,\n      indexPath,\n      active\n    });\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route\n        });\n        emit(\"click\", item);\n      }\n    };\n    onMounted(() => {\n      subMenu.addSubMenu(item);\n      rootMenu.addMenuItem(item);\n    });\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeMenuItem(item);\n    });\n    return {\n      Effect,\n      parentMenu,\n      rootMenu,\n      paddingStyle,\n      active,\n      handleClick\n    };\n  }\n});\nconst _hoisted_1 = {\n  class: \"el-menu-tooltip__trigger\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  return openBlock(), createElementBlock(\"li\", {\n    class: normalizeClass([\"el-menu-item\", {\n      \"is-active\": _ctx.active,\n      \"is-disabled\": _ctx.disabled\n    }]),\n    role: \"menuitem\",\n    tabindex: \"-1\",\n    style: normalizeStyle(_ctx.paddingStyle),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, [_ctx.parentMenu.type.name === \"ElMenu\" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? (openBlock(), createBlock(_component_el_tooltip, {\n    key: 0,\n    effect: _ctx.Effect.DARK,\n    placement: \"right\",\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [renderSlot(_ctx.$slots, \"title\")]),\n    default: withCtx(() => [createElementVNode(\"div\", _hoisted_1, [renderSlot(_ctx.$slots, \"default\")])]),\n    _: 3\n  }, 8, [\"effect\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [renderSlot(_ctx.$slots, \"default\"), renderSlot(_ctx.$slots, \"title\")], 64))], 6);\n}\nvar MenuItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { MenuItem as default };","map":{"version":3,"mappings":";;;;;;;;;AAuDA,MAAMA,cAAiB;AACvB,MAAKC,YAAaC,eAAa;EAC7BC,IAAM;EACNC,UAAY;IACVC;EAAA;EAGFC,KAAO;EACPC,KAAO;EAEPC,MAAMF,KAAO;IAAEG;EAAQ;IACrB,MAAMC,QAAW;IACjB,MAAMC,WAAWC,MAAqB;IACtC,IAAI,CAACD,UAAUE,WAAWb,cAAgB;IAE1C,MAAM;MAAEc,UAAY;MAAAC;MAAcC;IAAA,IAAcC,OAC9C,WACAC,MAAMZ,KAAO;IAGf,MAAMa,OAAU,UAAmC,sBAAWC,KAAM;IACpE,IAAI,CAACD,SAASN,WAAWb,cAAgB;IAEzC,MAAMqB,MAAS,YAAS,MAAMf,MAAMgB,UAAUX,QAAS;IACvD,MAAMY,OAA2BC,QAAS;MACxCF,OAAOhB,KAAM;MACbU;MACAK;IAAA;IAGF,MAAMI,cAAcA,MAAM;MACpB,KAACnB,MAAMoB,QAAU;QACnBf,SAASgB,mBAAoB;UAC3BL,OAAOhB,KAAM;UACbU,WAAWA,SAAU;UACrBY,OAAOtB,KAAM;QAAA;QAEfG,KAAK,OAAS;MAAA;IAAA;IAIlBoB,UAAU,MAAM;MACdV,QAAQW,UAAW;MACnBnB,SAASoB,WAAY;IAAA;IAGvBC,gBAAgB,MAAM;MACpBb,QAAQc,aAAc;MACtBtB,SAASuB,cAAe;IAAA;IAGnB;MACLC;MACArB;MACAH;MACAI;MACAM;MAEAI;IAAA;EAAA;AAAA;;EAxFKW,KAAM;AAAA;;;sBAxBfC,kBAgCK;IA/BHD,OAAKE,gBAAC,cAAc;MAIS;MAA6B;IAAA;IAH1DC,IAAK;IACLC,QAAS;IACRC,OAAKC,cAAE;IAKPC,SAAKC,MAAE;EAAA,IAGSC,IAAW,iBAAK1C,SAAI,QAAyB,kBAASG,MAAMwC,QAAoB,gBAAOC,sBADxGC,WAgBa;IAAAC;IAVVC,QAAQL,IAAO;IAChBM,SAAU;IACVC;EAAA;IAEWC,SAAOC,QAChB,MAAqB,CAArBC,UAAqB;IAAAC,iBAEvB,MAEM,CAFNC,mBAEM,OAFNC,UAEM,GADJH,UAAQ;IAAAI;qCAGZtB,kBAGW;IAAAY;EAAA,IAFTM,UAAQ,0BACRA,UAAqB","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","components","ElTooltip","props","emits","setup","emit","instance","rootMenu","inject","throwError","parentMenu","paddingStyle","indexPath","useMenu","toRef","subMenu","value","active","index","item","reactive","handleClick","disabled","handleMenuItemClick","route","onMounted","addSubMenu","addMenuItem","onBeforeUnmount","removeSubMenu","removeMenuItem","Effect","class","_createElementBlock","_normalizeClass","role","tabindex","style","_normalizeStyle","onClick","_cache","_ctx","collapse","title","_createBlock","key","effect","placement","persistent","content","_withCtx","_renderSlot","default","_createElementVNode","_hoisted_1","_"],"sources":["../../../../../../packages/components/menu/src/menu-item.vue"],"sourcesContent":["<template>\n  <li\n    class=\"el-menu-item\"\n    role=\"menuitem\"\n    tabindex=\"-1\"\n    :style=\"paddingStyle\"\n    :class=\"{\n      'is-active': active,\n      'is-disabled': disabled,\n    }\"\n    @click=\"handleClick\"\n  >\n    <el-tooltip\n      v-if=\"\n        parentMenu.type.name === 'ElMenu' &&\n        rootMenu.props.collapse &&\n        $slots.title\n      \"\n      :effect=\"Effect.DARK\"\n      placement=\"right\"\n      persistent\n    >\n      <template #content>\n        <slot name=\"title\" />\n      </template>\n      <div class=\"el-menu-tooltip__trigger\">\n        <slot />\n      </div>\n    </el-tooltip>\n    <template v-else>\n      <slot />\n      <slot name=\"title\" />\n    </template>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  onMounted,\n  onBeforeUnmount,\n  inject,\n  getCurrentInstance,\n  toRef,\n  reactive,\n} from 'vue'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { Effect } from '@element-plus/components/popper'\nimport { throwError } from '@element-plus/utils'\nimport useMenu from './use-menu'\nimport { menuItemEmits, menuItemProps } from './menu-item'\n\nimport type { MenuItemRegistered, MenuProvider, SubMenuProvider } from './types'\n\nconst COMPONENT_NAME = 'ElMenuItem'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip,\n  },\n\n  props: menuItemProps,\n  emits: menuItemEmits,\n\n  setup(props, { emit }) {\n    const instance = getCurrentInstance()!\n    const rootMenu = inject<MenuProvider>('rootMenu')\n    if (!rootMenu) throwError(COMPONENT_NAME, 'can not inject root menu')\n\n    const { parentMenu, paddingStyle, indexPath } = useMenu(\n      instance,\n      toRef(props, 'index')\n    )\n\n    const subMenu = inject<SubMenuProvider>(`subMenu:${parentMenu.value.uid}`)\n    if (!subMenu) throwError(COMPONENT_NAME, 'can not inject sub menu')\n\n    const active = computed(() => props.index === rootMenu.activeIndex)\n    const item: MenuItemRegistered = reactive({\n      index: props.index,\n      indexPath,\n      active,\n    })\n\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route,\n        })\n        emit('click', item)\n      }\n    }\n\n    onMounted(() => {\n      subMenu.addSubMenu(item)\n      rootMenu.addMenuItem(item)\n    })\n\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item)\n      rootMenu.removeMenuItem(item)\n    })\n\n    return {\n      Effect,\n      parentMenu,\n      rootMenu,\n      paddingStyle,\n      active,\n\n      handleClick,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}