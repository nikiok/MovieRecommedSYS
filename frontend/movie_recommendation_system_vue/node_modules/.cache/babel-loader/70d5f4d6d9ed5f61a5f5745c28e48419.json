{"ast":null,"code":"import request from \"@/utils/request\";\nconst movieRequest = {\n  /**\r\n   *\r\n   * @param currentPage 当前页面\r\n   * @param pageSize 每页电影数\r\n   * @param type 电影类型\r\n   * @param region 电影地区\r\n   * @param searchWord 搜索关键字\r\n   * @returns {*}\r\n   */\n  getMovies: (currentPage, pageSize, type, region, searchWord) => {\n    return request({\n      url: '/movie',\n      method: 'get',\n      headers: {\n        isNeedToken: false\n      },\n      params: {\n        'currentPage': currentPage,\n        'pageSize': pageSize,\n        'type': type,\n        'region': region,\n        'search': searchWord\n      }\n    });\n  },\n  /**\r\n   * 获取某部电影基本信息\r\n   * @param movieId 电影id\r\n   * @returns {*}\r\n   */\n  getMovieInfo: movieId => {\n    return request({\n      url: '/movie/info',\n      method: 'get',\n      headers: {\n        isNeedToken: false\n      },\n      params: {\n        'id': movieId\n      }\n    });\n  },\n  /**\r\n   * 通过电影id获取“喜欢这部电影的人也喜欢...”的推荐电影\r\n   * @param movieId 待查询的电影id\r\n   * @returns {*}\r\n   */\n  getRecommendedMovieByMovieId: movieId => {\n    return request({\n      url: '/movie/recommend',\n      method: 'get',\n      headers: {\n        isNeedToken: false\n      },\n      params: {\n        'id': movieId\n      }\n    });\n  },\n  /**\r\n   * 获取用户评价过的所有电影的基本信息\r\n   * @returns {*}\r\n   */\n  getMoreReviewedMovies: (currentPage, pageSize) => {\n    return request({\n      url: '/movie/reviewed',\n      method: 'get',\n      headers: {\n        isNeedToken: true\n      },\n      params: {\n        currentPage,\n        pageSize\n      }\n    });\n  },\n  /**\r\n   * 获取搜索关键字模糊匹配的电影名称列表\r\n   * @param keywords 搜索关键字\r\n   * @returns {*} 模糊匹配查询到的电影名称列表\r\n   */\n  getMatchMovieName: keywords => {\n    return request({\n      url: '/movie/match/name',\n      method: 'get',\n      headers: {\n        isNeedToken: false\n      },\n      params: {\n        'keywords': keywords\n      }\n    });\n  },\n  /**\r\n   * 获取最多人看过的（评论过的）电影列表\r\n   * @returns {*}\r\n   */\n  getMostWatchedMovies: () => {\n    return request({\n      url: '/movie/most/watched',\n      method: 'get',\n      headers: {\n        isNeedToken: false\n      }\n    });\n  },\n  /**\r\n   * 获得评分最高的前n部电影列表\r\n   * @returns {*}\r\n   */\n  getHighestRatedMovies: () => {\n    return request({\n      url: '/movie/highest/score',\n      method: 'get',\n      headers: {\n        isNeedToken: false\n      }\n    });\n  }\n};\nexport default movieRequest;","map":{"version":3,"names":["request","movieRequest","getMovies","currentPage","pageSize","type","region","searchWord","url","method","headers","isNeedToken","params","getMovieInfo","movieId","getRecommendedMovieByMovieId","getMoreReviewedMovies","getMatchMovieName","keywords","getMostWatchedMovies","getHighestRatedMovies"],"sources":["F:/personalSpace/lx-bishe/movie_recommendation_system_vue/src/api/movie.js"],"sourcesContent":["import request from \"@/utils/request\";\r\n\r\nconst movieRequest = {\r\n    /**\r\n     *\r\n     * @param currentPage 当前页面\r\n     * @param pageSize 每页电影数\r\n     * @param type 电影类型\r\n     * @param region 电影地区\r\n     * @param searchWord 搜索关键字\r\n     * @returns {*}\r\n     */\r\n    getMovies: (currentPage, pageSize, type, region, searchWord) => {\r\n        return request({\r\n            url: '/movie',\r\n            method: 'get',\r\n            headers: {\r\n                isNeedToken: false\r\n            },\r\n            params: {\r\n                'currentPage': currentPage,\r\n                'pageSize': pageSize,\r\n                'type': type,\r\n                'region': region,\r\n                'search': searchWord,\r\n            }\r\n        })\r\n    },\r\n    /**\r\n     * 获取某部电影基本信息\r\n     * @param movieId 电影id\r\n     * @returns {*}\r\n     */\r\n    getMovieInfo: (movieId) => {\r\n        return request({\r\n            url: '/movie/info',\r\n            method: 'get',\r\n            headers: {\r\n                isNeedToken: false\r\n            },\r\n            params: {\r\n                'id': movieId,\r\n            }\r\n        })\r\n    },\r\n    /**\r\n     * 通过电影id获取“喜欢这部电影的人也喜欢...”的推荐电影\r\n     * @param movieId 待查询的电影id\r\n     * @returns {*}\r\n     */\r\n    getRecommendedMovieByMovieId: (movieId) => {\r\n        return request({\r\n            url: '/movie/recommend',\r\n            method: 'get',\r\n            headers: {\r\n                isNeedToken: false\r\n            },\r\n            params: {\r\n                'id': movieId\r\n            }\r\n        })\r\n    },\r\n    /**\r\n     * 获取用户评价过的所有电影的基本信息\r\n     * @returns {*}\r\n     */\r\n    getMoreReviewedMovies: (currentPage, pageSize) => {\r\n        return request({\r\n            url: '/movie/reviewed',\r\n            method: 'get',\r\n            headers: {\r\n                isNeedToken: true\r\n            },\r\n            params: {\r\n                currentPage,\r\n                pageSize\r\n            }\r\n        })\r\n    },\r\n    /**\r\n     * 获取搜索关键字模糊匹配的电影名称列表\r\n     * @param keywords 搜索关键字\r\n     * @returns {*} 模糊匹配查询到的电影名称列表\r\n     */\r\n    getMatchMovieName: (keywords) => {\r\n        return request({\r\n            url: '/movie/match/name',\r\n            method: 'get',\r\n            headers: {\r\n                isNeedToken: false\r\n            },\r\n            params: {\r\n                'keywords': keywords\r\n            }\r\n        })\r\n    },\r\n    /**\r\n     * 获取最多人看过的（评论过的）电影列表\r\n     * @returns {*}\r\n     */\r\n    getMostWatchedMovies: () => {\r\n        return request({\r\n            url: '/movie/most/watched',\r\n            method: 'get',\r\n            headers: {\r\n                isNeedToken: false\r\n            },\r\n        })\r\n    },\r\n    /**\r\n     * 获得评分最高的前n部电影列表\r\n     * @returns {*}\r\n     */\r\n    getHighestRatedMovies: () => {\r\n        return request({\r\n            url: '/movie/highest/score',\r\n            method: 'get',\r\n            headers: {\r\n                isNeedToken: false\r\n            },\r\n        })\r\n    }\r\n}\r\n\r\nexport default movieRequest\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,iBAAiB;AAErC,MAAMC,YAAY,GAAG;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAAS,EAAEA,CAACC,WAAW,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,KAAK;IAC5D,OAAOP,OAAO,CAAC;MACXQ,GAAG,EAAE,QAAQ;MACbC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,WAAW,EAAE;MACjB,CAAC;MACDC,MAAM,EAAE;QACJ,aAAa,EAAET,WAAW;QAC1B,UAAU,EAAEC,QAAQ;QACpB,MAAM,EAAEC,IAAI;QACZ,QAAQ,EAAEC,MAAM;QAChB,QAAQ,EAAEC;MACd;IACJ,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIM,YAAY,EAAGC,OAAO,IAAK;IACvB,OAAOd,OAAO,CAAC;MACXQ,GAAG,EAAE,aAAa;MAClBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,WAAW,EAAE;MACjB,CAAC;MACDC,MAAM,EAAE;QACJ,IAAI,EAAEE;MACV;IACJ,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIC,4BAA4B,EAAGD,OAAO,IAAK;IACvC,OAAOd,OAAO,CAAC;MACXQ,GAAG,EAAE,kBAAkB;MACvBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,WAAW,EAAE;MACjB,CAAC;MACDC,MAAM,EAAE;QACJ,IAAI,EAAEE;MACV;IACJ,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACIE,qBAAqB,EAAEA,CAACb,WAAW,EAAEC,QAAQ,KAAK;IAC9C,OAAOJ,OAAO,CAAC;MACXQ,GAAG,EAAE,iBAAiB;MACtBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,WAAW,EAAE;MACjB,CAAC;MACDC,MAAM,EAAE;QACJT,WAAW;QACXC;MACJ;IACJ,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIa,iBAAiB,EAAGC,QAAQ,IAAK;IAC7B,OAAOlB,OAAO,CAAC;MACXQ,GAAG,EAAE,mBAAmB;MACxBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,WAAW,EAAE;MACjB,CAAC;MACDC,MAAM,EAAE;QACJ,UAAU,EAAEM;MAChB;IACJ,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACIC,oBAAoB,EAAEA,CAAA,KAAM;IACxB,OAAOnB,OAAO,CAAC;MACXQ,GAAG,EAAE,qBAAqB;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,WAAW,EAAE;MACjB;IACJ,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACIS,qBAAqB,EAAEA,CAAA,KAAM;IACzB,OAAOpB,OAAO,CAAC;MACXQ,GAAG,EAAE,sBAAsB;MAC3BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,WAAW,EAAE;MACjB;IACJ,CAAC,CAAC;EACN;AACJ,CAAC;AAED,eAAeV,YAAY"},"metadata":{},"sourceType":"module"}