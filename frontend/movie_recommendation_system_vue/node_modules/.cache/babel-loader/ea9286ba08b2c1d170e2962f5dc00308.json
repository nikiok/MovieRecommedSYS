{"ast":null,"code":"import { defineComponent, ref, computed, onMounted, resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, resolveDynamicComponent, createCommentVNode, toDisplayString, renderSlot, createElementBlock, Fragment, vShow, withModifiers, createVNode } from 'vue';\nimport { useTimeoutFn, useEventListener } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { notificationProps, notificationEmits } from './notification.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElNotification\",\n  components: {\n    ElIcon,\n    ...TypeComponents\n  },\n  props: notificationProps,\n  emits: notificationEmits,\n  setup(props) {\n    const ns = useNamespace(\"notification\");\n    const visible = ref(false);\n    let timer = void 0;\n    const typeClass = computed(() => {\n      const type = props.type;\n      return type && TypeComponentsMap[props.type] ? ns.m(type) : \"\";\n    });\n    const iconComponent = computed(() => {\n      return TypeComponentsMap[props.type] || props.icon || \"\";\n    });\n    const horizontalClass = computed(() => props.position.endsWith(\"right\") ? \"right\" : \"left\");\n    const verticalProperty = computed(() => props.position.startsWith(\"top\") ? \"top\" : \"bottom\");\n    const positionStyle = computed(() => {\n      return {\n        [verticalProperty.value]: `${props.offset}px`,\n        zIndex: props.zIndex\n      };\n    });\n    function startTimer() {\n      if (props.duration > 0) {\n        ;\n        ({\n          stop: timer\n        } = useTimeoutFn(() => {\n          if (visible.value) close();\n        }, props.duration));\n      }\n    }\n    function clearTimer() {\n      timer == null ? void 0 : timer();\n    }\n    function close() {\n      visible.value = false;\n    }\n    function onKeydown({\n      code\n    }) {\n      if (code === EVENT_CODE.delete || code === EVENT_CODE.backspace) {\n        clearTimer();\n      } else if (code === EVENT_CODE.esc) {\n        if (visible.value) {\n          close();\n        }\n      } else {\n        startTimer();\n      }\n    }\n    onMounted(() => {\n      startTimer();\n      visible.value = true;\n    });\n    useEventListener(document, \"keydown\", onKeydown);\n    return {\n      ns,\n      horizontalClass,\n      typeClass,\n      iconComponent,\n      positionStyle,\n      visible,\n      close,\n      clearTimer,\n      startTimer\n    };\n  }\n});\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = [\"textContent\"];\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = [\"innerHTML\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_close = resolveComponent(\"close\");\n  return openBlock(), createBlock(Transition, {\n    name: _ctx.ns.b(\"fade\"),\n    onBeforeLeave: _ctx.onClose,\n    onAfterLeave: _cache[3] || (_cache[3] = $event => _ctx.$emit(\"destroy\"))\n  }, {\n    default: withCtx(() => [withDirectives(createElementVNode(\"div\", {\n      id: _ctx.id,\n      class: normalizeClass([_ctx.ns.b(), _ctx.customClass, _ctx.horizontalClass]),\n      style: normalizeStyle(_ctx.positionStyle),\n      role: \"alert\",\n      onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.clearTimer && _ctx.clearTimer(...args)),\n      onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.startTimer && _ctx.startTimer(...args)),\n      onClick: _cache[2] || (_cache[2] = (...args) => _ctx.onClick && _ctx.onClick(...args))\n    }, [_ctx.iconComponent ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass([_ctx.ns.e(\"icon\"), _ctx.typeClass])\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n      _: 1\n    }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"group\"))\n    }, [createElementVNode(\"h2\", {\n      class: normalizeClass(_ctx.ns.e(\"title\")),\n      textContent: toDisplayString(_ctx.title)\n    }, null, 10, _hoisted_2), withDirectives(createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"content\")),\n      style: normalizeStyle(!!_ctx.title ? void 0 : {\n        margin: 0\n      })\n    }, [renderSlot(_ctx.$slots, \"default\", {}, () => [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", _hoisted_3, toDisplayString(_ctx.message), 1)) : (openBlock(), createElementBlock(Fragment, {\n      key: 1\n    }, [createCommentVNode(\" Caution here, message could've been compromized, nerver use user's input as message \"), createCommentVNode(\" eslint-disable-next-line \"), createElementVNode(\"p\", {\n      innerHTML: _ctx.message\n    }, null, 8, _hoisted_4)], 2112))])], 6), [[vShow, _ctx.message]]), _ctx.showClose ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass(_ctx.ns.e(\"closeBtn\")),\n      onClick: withModifiers(_ctx.close, [\"stop\"])\n    }, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 2)], 46, _hoisted_1), [[vShow, _ctx.visible]])]),\n    _: 3\n  }, 8, [\"name\", \"onBeforeLeave\"]);\n}\nvar NotificationConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { NotificationConstructor as default };","map":{"version":3,"mappings":";;;;;;;;;;;AAmDA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EAENC,UAAY;IACVC;IACG;EAAA;EAGLC,KAAO;EACPC,KAAO;EAEPC,MAAMF,KAAO;IACX,MAAMG,KAAKC,YAAa;IACxB,MAAMC,UAAUC,GAAI;IACpB,IAAIC,KAAkC;IAEhC,kBAAYC,SAAS,MAAM;MAC/B,MAAMC,OAAOT,KAAM;MACnB,OAAOS,QAAQC,iBAAkB,OAAMD,IAAQ,OAAGE,EAAEF,IAAQ;IAAA;IAGxD,sBAAgBD,SAAS,MAAM;MACnC,OAAOE,iBAAkB,OAAMD,IAAS,WAAMG,IAAQ;IAAA;IAGxD,MAAMC,kBAAkBL,QAAS,OAC/BR,MAAMc,QAAS,UAAS,WAAW,OAAU;IAG/C,MAAMC,mBAAmBP,QAAS,OAChCR,MAAMc,QAAS,YAAW,SAAS,KAAQ;IAGvC,sBAAgBN,SAAwB,MAAM;MAC3C;QACJ,kBAAiBQ,KAAQ,MAAGhB,KAAM;QACnCiB,QAAQjB,KAAM;MAAA;IAAA;IAII;MAChB,UAAMkB,WAAW,CAAG;QACtB;QAAE,CAAE;UAAAC,MAAMZ;QAAU,iBAAa,MAAM;UACrC,IAAIF,OAAQ,QAAOe;QAAA,GAClBpB,KAAM;MAAA;IAAA;IAIS;MACpBO;IAAA;IAGe;MACfF,QAAQW,KAAQ;IAAA;IAGlB,mBAAmB;MAAEK;IAAuB;MAC1C,IAAIA,IAAS,gBAAWC,MAAU,aAASC,WAAWC,SAAW;QAC/DC;MAAA,CACS,mBAASF,WAAWG,GAAK;QAElC,IAAIrB,QAAQW,KAAO;UACjBI;QAAA;MAAA,CAEG;QACLO;MAAA;IAAA;IAKJC,UAAU,MAAM;MACdD;MACAtB,QAAQW,KAAQ;IAAA;IAGlBa,iBAAiBC,UAAU,SAAW;IAE/B;MACL3B;MACAU;MACAkB;MACAC;MACAC;MACA5B;MAEAe;MACAK;MACAE;IAAA;EAAA;AAAA;;;;;;;;;;sBAzIJO,WAqCa;IApCVrC,MAAMsC,QAAGC,CAAC;IACVC,aAAc;IACdC,cAAWC,oCAAEJ,IAAK;EAAA;qBAEnB,MA+BM,gBA/BNK,kBA+BM;MA7BHC,EAAI;MACJC,KAAK,kBAAGP,IAAG,SAAKA,IAAa;MAC7BQ,OAAKC,cAAE;MACRC,IAAK;MACJC,cAAUP,MAAE;MACZQ,cAAUR,MAAE;MACZS,SAAKT,MAAE;IAAA,IAEOJ,mCAAfD,WAEU;MAAAe;MAFqBP,KAAK,kBAAGP,IAAG,MAAC,MAAU;IAAA;uBACnD,MAAiC,eAAjCD,YAAiCgB,uBAAjB;MAAAC;0DAElBX,kBAiBM;MAjBAE,OAAKU,cAAE,SAAGC,CAAC;IAAA,IACfb,kBAA4C;MAAvCE,OAAKU,cAAE,SAAGC,CAAC;MAAAC,aAAWC,gBAAQpB,IAAM;IAAA,yCACzCK,kBAWM;MATHE,OAAKU,cAAE,SAAGC,CAAC;MACXV,OAAKC,cAAI,gBAAQ,KAAS;QAAAY;MAAA;IAAA,IAE3BC,WAKOtB,4BALP,MAKO,EAJKA,IAAV,6DAAqD,GAAd,6CAAO,oBAG9CuB,kBAA+B;MAAAT;IAAA,IAF/BU,6GACAA,kDACAnB,mBAA+B,GAArB;MAAAoB,WAAQzB,IAAO;IAAA,0CARnB,yBAWKA,+BAAfD,WAEU;MAAAe;MAFiBP,KAAK,iBAAEP,QAAGkB,CAAC;MAAeL,SAAKa,cAAO1B,IAAK;IAAA;uBACpE,MAAS,CAAT2B,WAAS;MAAAX;6FA3BL;IAAAA","names":["_sfc_main","defineComponent","name","components","ElIcon","props","emits","setup","ns","useNamespace","visible","ref","timer","computed","type","TypeComponentsMap","m","icon","horizontalClass","position","verticalProperty","value","zIndex","duration","stop","close","code","delete","EVENT_CODE","backspace","clearTimer","esc","startTimer","onMounted","useEventListener","document","typeClass","iconComponent","positionStyle","_createBlock","_ctx","b","onBeforeLeave","onAfterLeave","_cache","_createElementVNode","id","class","style","_normalizeStyle","role","onMouseenter","onMouseleave","onClick","key","_resolveDynamicComponent","_","_normalizeClass","e","textContent","_toDisplayString","margin","_renderSlot","_createElementBlock","_createCommentVNode","innerHTML","_withModifiers","_createVNode"],"sources":["../../../../../../packages/components/notification/src/notification.vue"],"sourcesContent":["<template>\n  <transition\n    :name=\"ns.b('fade')\"\n    @before-leave=\"onClose\"\n    @after-leave=\"$emit('destroy')\"\n  >\n    <div\n      v-show=\"visible\"\n      :id=\"id\"\n      :class=\"[ns.b(), customClass, horizontalClass]\"\n      :style=\"positionStyle\"\n      role=\"alert\"\n      @mouseenter=\"clearTimer\"\n      @mouseleave=\"startTimer\"\n      @click=\"onClick\"\n    >\n      <el-icon v-if=\"iconComponent\" :class=\"[ns.e('icon'), typeClass]\">\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <div :class=\"ns.e('group')\">\n        <h2 :class=\"ns.e('title')\" v-text=\"title\" />\n        <div\n          v-show=\"message\"\n          :class=\"ns.e('content')\"\n          :style=\"!!title ? undefined : { margin: 0 }\"\n        >\n          <slot>\n            <p v-if=\"!dangerouslyUseHTMLString\">{{ message }}</p>\n            <!-- Caution here, message could've been compromized, nerver use user's input as message -->\n            <!-- eslint-disable-next-line -->\n            <p v-else v-html=\"message\"></p>\n          </slot>\n        </div>\n        <el-icon v-if=\"showClose\" :class=\"ns.e('closeBtn')\" @click.stop=\"close\">\n          <close />\n        </el-icon>\n      </div>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, computed, ref, onMounted } from 'vue'\nimport { useEventListener, useTimeoutFn } from '@vueuse/core'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { notificationProps, notificationEmits } from './notification'\n\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElNotification',\n\n  components: {\n    ElIcon,\n    ...TypeComponents,\n  },\n\n  props: notificationProps,\n  emits: notificationEmits,\n\n  setup(props) {\n    const ns = useNamespace('notification')\n    const visible = ref(false)\n    let timer: (() => void) | undefined = undefined\n\n    const typeClass = computed(() => {\n      const type = props.type\n      return type && TypeComponentsMap[props.type] ? ns.m(type) : ''\n    })\n\n    const iconComponent = computed(() => {\n      return TypeComponentsMap[props.type] || props.icon || ''\n    })\n\n    const horizontalClass = computed(() =>\n      props.position.endsWith('right') ? 'right' : 'left'\n    )\n\n    const verticalProperty = computed(() =>\n      props.position.startsWith('top') ? 'top' : 'bottom'\n    )\n\n    const positionStyle = computed<CSSProperties>(() => {\n      return {\n        [verticalProperty.value]: `${props.offset}px`,\n        zIndex: props.zIndex,\n      }\n    })\n\n    function startTimer() {\n      if (props.duration > 0) {\n        ;({ stop: timer } = useTimeoutFn(() => {\n          if (visible.value) close()\n        }, props.duration))\n      }\n    }\n\n    function clearTimer() {\n      timer?.()\n    }\n\n    function close() {\n      visible.value = false\n    }\n\n    function onKeydown({ code }: KeyboardEvent) {\n      if (code === EVENT_CODE.delete || code === EVENT_CODE.backspace) {\n        clearTimer() // press delete/backspace clear timer\n      } else if (code === EVENT_CODE.esc) {\n        // press esc to close the notification\n        if (visible.value) {\n          close()\n        }\n      } else {\n        startTimer() // resume timer\n      }\n    }\n\n    // lifecycle\n    onMounted(() => {\n      startTimer()\n      visible.value = true\n    })\n\n    useEventListener(document, 'keydown', onKeydown)\n\n    return {\n      ns,\n      horizontalClass,\n      typeClass,\n      iconComponent,\n      positionStyle,\n      visible,\n\n      close,\n      clearTimer,\n      startTimer,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}