{"ast":null,"code":"/**\r\n * 防抖\r\n * @param {*} fn  待包装的事件回调\r\n * @param {*} delay 每次推迟执行的等待时间\r\n */\nexport function debounce(fn, delay = 500) {\n  // 利用闭包保存同一个定时器\n  let timer = null;\n  return () => {\n    // 取debounce执行作用域的this\n    let _self = this;\n    // 利用闭包保存参数数组\n    let _arg = arguments;\n    // 不断执行函数，那么将定时器删除\n    if (timer) {\n      clearTimeout(timer);\n    }\n    // 设定新计时器\n    timer = setTimeout(() => {\n      // 用apply指向调用debounce的对象，相当于_this.handler(args);\n      fn.apply(_self, _arg);\n    }, delay);\n  };\n}\n\n/**\r\n * 节流\r\n * 保证第一次和最后一次都执行\r\n * @param {*} fn 待包装的事件回调\r\n * @param {*} delay 每次推迟执行的等待时间\r\n */\nexport function throttle(fn, delay = 500) {\n  // 上一次执行时间\n  let last = 0;\n  // 利用闭包保存同一个定时器\n  let timer = null;\n  return function () {\n    // 取debounce执行作用域的this\n    let _self = this;\n    // 利用闭包保存参数数组\n    let _arg = arguments;\n\n    // 当前时间\n    let now = Date.now();\n    // 上一次执行到这次执行的中间间隔时间 和 等待时间 之间的差值\n    // 如果小于0，表示可以执行了；如果大于>=0，表示还未到执行时间\n    let duration = delay - (now - last);\n    // 清除定时器，保证最后一次执行\n    if (timer) {\n      clearTimeout(timer);\n    }\n    if (duration < 0) {\n      fn.apply(_self, _arg);\n      last = now;\n    } else {\n      // 还未到执行时间，如果这是最后一次执行，则等待duration时间后，将会执行回调函数\n      timer = setTimeout(() => {\n        fn.apply(_self, _arg);\n      }, duration);\n    }\n  };\n}","map":{"version":3,"names":["debounce","fn","delay","timer","_self","_arg","arguments","clearTimeout","setTimeout","apply","throttle","last","now","Date","duration"],"sources":["F:/personalSpace/lx-bishe/movie_recommendation_system_vue/src/utils/debounce-throttle.js"],"sourcesContent":["/**\r\n * 防抖\r\n * @param {*} fn  待包装的事件回调\r\n * @param {*} delay 每次推迟执行的等待时间\r\n */\r\nexport function debounce(fn, delay = 500) {\r\n    // 利用闭包保存同一个定时器\r\n    let timer = null;\r\n    return () => {\r\n        // 取debounce执行作用域的this\r\n        let _self = this;\r\n        // 利用闭包保存参数数组\r\n        let _arg = arguments;\r\n        // 不断执行函数，那么将定时器删除\r\n        if (timer) {\r\n            clearTimeout(timer)\r\n        }\r\n        // 设定新计时器\r\n        timer = setTimeout(() => {\r\n            // 用apply指向调用debounce的对象，相当于_this.handler(args);\r\n            fn.apply(_self, _arg)\r\n        }, delay);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 节流\r\n * 保证第一次和最后一次都执行\r\n * @param {*} fn 待包装的事件回调\r\n * @param {*} delay 每次推迟执行的等待时间\r\n */\r\nexport function throttle(fn, delay = 500) {\r\n    // 上一次执行时间\r\n    let last = 0;\r\n    // 利用闭包保存同一个定时器\r\n    let timer = null;\r\n    return function () {\r\n        // 取debounce执行作用域的this\r\n        let _self = this;\r\n        // 利用闭包保存参数数组\r\n        let _arg = arguments;\r\n\r\n        // 当前时间\r\n        let now = Date.now();\r\n        // 上一次执行到这次执行的中间间隔时间 和 等待时间 之间的差值\r\n        // 如果小于0，表示可以执行了；如果大于>=0，表示还未到执行时间\r\n        let duration = delay - (now - last);\r\n        // 清除定时器，保证最后一次执行\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n        }\r\n        if (duration < 0) {\r\n            fn.apply(_self, _arg);\r\n            last = now;\r\n        } else {\r\n            // 还未到执行时间，如果这是最后一次执行，则等待duration时间后，将会执行回调函数\r\n            timer = setTimeout(() => {\r\n                fn.apply(_self, _arg);\r\n            }, duration);\r\n        }\r\n    }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQA,CAACC,EAAE,EAAEC,KAAK,GAAG,GAAG,EAAE;EACtC;EACA,IAAIC,KAAK,GAAG,IAAI;EAChB,OAAO,MAAM;IACT;IACA,IAAIC,KAAK,GAAG,IAAI;IAChB;IACA,IAAIC,IAAI,GAAGC,SAAS;IACpB;IACA,IAAIH,KAAK,EAAE;MACPI,YAAY,CAACJ,KAAK,CAAC;IACvB;IACA;IACAA,KAAK,GAAGK,UAAU,CAAC,MAAM;MACrB;MACAP,EAAE,CAACQ,KAAK,CAACL,KAAK,EAAEC,IAAI,CAAC;IACzB,CAAC,EAAEH,KAAK,CAAC;EACb,CAAC;AACL;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,QAAQA,CAACT,EAAE,EAAEC,KAAK,GAAG,GAAG,EAAE;EACtC;EACA,IAAIS,IAAI,GAAG,CAAC;EACZ;EACA,IAAIR,KAAK,GAAG,IAAI;EAChB,OAAO,YAAY;IACf;IACA,IAAIC,KAAK,GAAG,IAAI;IAChB;IACA,IAAIC,IAAI,GAAGC,SAAS;;IAEpB;IACA,IAAIM,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;IACpB;IACA;IACA,IAAIE,QAAQ,GAAGZ,KAAK,IAAIU,GAAG,GAAGD,IAAI,CAAC;IACnC;IACA,IAAIR,KAAK,EAAE;MACPI,YAAY,CAACJ,KAAK,CAAC;IACvB;IACA,IAAIW,QAAQ,GAAG,CAAC,EAAE;MACdb,EAAE,CAACQ,KAAK,CAACL,KAAK,EAAEC,IAAI,CAAC;MACrBM,IAAI,GAAGC,GAAG;IACd,CAAC,MAAM;MACH;MACAT,KAAK,GAAGK,UAAU,CAAC,MAAM;QACrBP,EAAE,CAACQ,KAAK,CAACL,KAAK,EAAEC,IAAI,CAAC;MACzB,CAAC,EAAES,QAAQ,CAAC;IAChB;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module"}