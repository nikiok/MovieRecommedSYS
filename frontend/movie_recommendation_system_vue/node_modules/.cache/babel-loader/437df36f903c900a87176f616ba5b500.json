{"ast":null,"code":"import { defineComponent, inject, ref, unref, toRef, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, renderSlot } from 'vue';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport { useTooltipTriggerProps } from './tooltip.mjs';\nimport { whenTrigger } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElPopperTrigger from '../../popper/src/trigger.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTooltipTrigger\",\n  components: {\n    ElPopperTrigger\n  },\n  props: useTooltipTriggerProps,\n  setup(props) {\n    const ns = useNamespace(\"tooltip\");\n    const {\n      controlled,\n      id,\n      open,\n      onOpen,\n      onClose,\n      onToggle\n    } = inject(TOOLTIP_INJECTION_KEY, void 0);\n    const triggerRef = ref(null);\n    const stopWhenControlledOrDisabled = () => {\n      if (unref(controlled) || props.disabled) {\n        return true;\n      }\n    };\n    const trigger = toRef(props, \"trigger\");\n    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onOpen));\n    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onClose));\n    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"click\", e => {\n      if (e.button === 0) {\n        onToggle(e);\n      }\n    }));\n    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onOpen));\n    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onClose));\n    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"contextmenu\", e => {\n      e.preventDefault();\n      onToggle(e);\n    }));\n    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, e => {\n      const {\n        code\n      } = e;\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {\n        onToggle(e);\n      }\n    });\n    return {\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onMouseenter,\n      onMouseleave,\n      onClick,\n      onKeydown,\n      open,\n      id,\n      triggerRef,\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_popper_trigger = resolveComponent(\"el-popper-trigger\");\n  return openBlock(), createBlock(_component_el_popper_trigger, {\n    id: _ctx.id,\n    \"virtual-ref\": _ctx.virtualRef,\n    open: _ctx.open,\n    \"virtual-triggering\": _ctx.virtualTriggering,\n    class: normalizeClass(_ctx.ns.e(\"trigger\")),\n    onBlur: _ctx.onBlur,\n    onClick: _ctx.onClick,\n    onContextmenu: _ctx.onContextMenu,\n    onFocus: _ctx.onFocus,\n    onMouseenter: _ctx.onMouseenter,\n    onMouseleave: _ctx.onMouseleave,\n    onKeydown: _ctx.onKeydown\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 8, [\"id\", \"virtual-ref\", \"open\", \"virtual-triggering\", \"class\", \"onBlur\", \"onClick\", \"onContextmenu\", \"onFocus\", \"onMouseenter\", \"onMouseleave\", \"onKeydown\"]);\n}\nvar ElTooltipTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ElTooltipTrigger as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;AA+BA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,UAAY;IACVC;EAAA;EAEFC,KAAO;EACPC,MAAMD,KAAO;IACX,MAAME,KAAKC,YAAa;IAClB;MAAEC;MAAYC,EAAI;MAAAC;MAAMC;MAAQC,OAAS;MAAAC;IAAA,IAAaC,OAC1DC,qBACA;IAEF,MAAMC,aAAaC,GAA4B;IAE/C,MAAMC,+BAA+BA,MAAM;MACrC,UAAMV,UAAe,WAAMW,QAAU;QAChC;MAAA;IAAA;IAGL,gBAAUC,MAAMhB,KAAO;IAC7B,MAAMiB,YAAe,wBACnBH,4BACA,cAAYI,SAAS,OAAS;IAEhC,MAAMC,YAAe,wBACnBL,4BACA,cAAYI,SAAS,OAAS;IAEhC,MAAME,UAAUC,oBACd,+BACAC,YAAYJ,OAAS,WAAUK,CAAM;MAE9B,MAAiBC,WAAW,CAAG;QACzBf;MAAA;IAAA;IAKf,MAAMgB,OAAU,wBACdX,4BACA,cAAYI,SAAS,OAAS;IAGhC,MAAMQ,MAAS,wBACbZ,4BACA,cAAYI,SAAS,OAAS;IAGhC,MAAMS,gBAAgBN,oBACpB,+BACAC,YAAYJ,OAAS,iBAAgBK,CAAa;MAC9CA;MACOd;IAAA;IAIb,MAAMmB,SAAY,wBAChBd,4BACA,EAACS,CAAqB;MACpB,MAAM;QAAEM;MAAS;MACjB,IAAIA,IAAS,gBAAWC,KAAS,aAASC,WAAWC,KAAO;QACjDvB;MAAA;IAAA;IAKR;MACLiB;MACAC;MACAF;MACAR;MACAE;MACAC;MACAQ;MACAtB;MACAD;MACAO;MACAV;IAAA;EAAA;AAAA;;;sBA3GJ+B,WAeoB;IAdjB5B,EAAI;IACJ,aAAa;IACbC,IAAM;IACN,oBAAoB;IACpB4B,OAAKC,cAAE,SAAGZ,CAAC;IACXG,MAAM;IACNN,OAAO;IACPgB,aAAa;IACbX,OAAO;IACPR,YAAY;IACZE,YAAY;IACZS,SAAS;EAAA;qBAEV,MAAQ,CAARS,UAAQ;IAAAC","names":["_sfc_main","defineComponent","name","components","ElPopperTrigger","props","setup","ns","useNamespace","controlled","id","open","onOpen","onClose","onToggle","inject","TOOLTIP_INJECTION_KEY","triggerRef","ref","stopWhenControlledOrDisabled","disabled","toRef","onMouseenter","trigger","onMouseleave","onClick","composeEventHandlers","whenTrigger","e","button","onFocus","onBlur","onContextMenu","onKeydown","code","enter","EVENT_CODE","space","_createBlock","class","_normalizeClass","onContextmenu","_renderSlot","_"],"sources":["../../../../../../packages/components/tooltip/src/trigger.vue"],"sourcesContent":["<template>\n  <el-popper-trigger\n    :id=\"id\"\n    :virtual-ref=\"virtualRef\"\n    :open=\"open\"\n    :virtual-triggering=\"virtualTriggering\"\n    :class=\"ns.e('trigger')\"\n    @blur=\"onBlur\"\n    @click=\"onClick\"\n    @contextmenu=\"onContextMenu\"\n    @focus=\"onFocus\"\n    @mouseenter=\"onMouseenter\"\n    @mouseleave=\"onMouseleave\"\n    @keydown=\"onKeydown\"\n  >\n    <slot />\n  </el-popper-trigger>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, ref, unref, toRef } from 'vue'\nimport { ElPopperTrigger } from '@element-plus/components/popper'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\nimport { useTooltipTriggerProps } from './tooltip'\nimport { whenTrigger } from './utils'\n\nimport type { OnlyChildExpose } from '@element-plus/components/slot'\n\nexport default defineComponent({\n  name: 'ElTooltipTrigger',\n  components: {\n    ElPopperTrigger,\n  },\n  props: useTooltipTriggerProps,\n  setup(props) {\n    const ns = useNamespace('tooltip')\n    const { controlled, id, open, onOpen, onClose, onToggle } = inject(\n      TOOLTIP_INJECTION_KEY,\n      undefined\n    )!\n    const triggerRef = ref<OnlyChildExpose | null>(null)\n\n    const stopWhenControlledOrDisabled = () => {\n      if (unref(controlled) || props.disabled) {\n        return true\n      }\n    }\n    const trigger = toRef(props, 'trigger')\n    const onMouseenter = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'hover', onOpen)\n    )\n    const onMouseleave = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'hover', onClose)\n    )\n    const onClick = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'click', (e) => {\n        // distinguish left click\n        if ((e as MouseEvent).button === 0) {\n          onToggle(e)\n        }\n      })\n    )\n\n    const onFocus = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'focus', onOpen)\n    )\n\n    const onBlur = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'focus', onClose)\n    )\n\n    const onContextMenu = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'contextmenu', (e: Event) => {\n        e.preventDefault()\n        onToggle(e)\n      })\n    )\n\n    const onKeydown = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      (e: KeyboardEvent) => {\n        const { code } = e\n        if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {\n          onToggle(e)\n        }\n      }\n    )\n\n    return {\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onMouseenter,\n      onMouseleave,\n      onClick,\n      onKeydown,\n      open,\n      id,\n      triggerRef,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}