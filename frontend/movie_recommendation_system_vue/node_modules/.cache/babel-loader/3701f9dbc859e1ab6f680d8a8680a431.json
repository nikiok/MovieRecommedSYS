{"ast":null,"code":"import { defineComponent, ref, inject, watch, onMounted, unref, onBeforeUnmount, openBlock, createElementBlock, normalizeClass } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { usePopperArrowProps } from './popper.mjs';\nimport { POPPER_CONTENT_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElPopperArrow\",\n  props: usePopperArrowProps,\n  setup(props) {\n    const ns = useNamespace(\"popper\");\n    const arrowRef = ref(null);\n    const popperContentInjection = inject(POPPER_CONTENT_INJECTION_KEY, void 0);\n    watch(() => props.arrowOffset, val => {\n      popperContentInjection.arrowOffset.value = val;\n    });\n    onMounted(() => {\n      popperContentInjection.arrowRef.value = unref(arrowRef);\n    });\n    onBeforeUnmount(() => {\n      popperContentInjection.arrowRef.value = null;\n    });\n    return {\n      ns,\n      arrowRef\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", {\n    ref: \"arrowRef\",\n    class: normalizeClass(_ctx.ns.e(\"arrow\")),\n    \"data-popper-arrow\": \"\"\n  }, null, 2);\n}\nvar ElPopperArrow = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ElPopperArrow as default };","map":{"version":3,"mappings":";;;;;;AAkBA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,KAAO;EACPC,MAAMD,KAAO;IACX,MAAME,KAAKC,YAAa;IACxB,MAAMC,WAAWC,GAA4B;IACvC,+BAAyBC,OAC7BC,4BACA;IAGFC,MACE,MAAMR,MAAMS,WACZ,EAACC,GAAQ;MACPC,uBAAuBF,YAAYG,KAAQ;IAAA;IAI/CC,UAAU,MAAM;MACSF,gCAASC,QAAQE,KAAM;IAAA;IAGhDC,gBAAgB,MAAM;MACpBJ,uBAAuBP,SAASQ,KAAQ;IAAA;IAGnC;MACLV;MACAE;IAAA;EAAA;AAAA;;sBA7CJY,kBAAmE;IAA7DX,GAAI;IAAYY,OAAKC,cAAE,SAAGC,CAAC;IAAW,mBAAkB;EAAA","names":["_sfc_main","defineComponent","name","props","setup","ns","useNamespace","arrowRef","ref","inject","POPPER_CONTENT_INJECTION_KEY","watch","arrowOffset","val","popperContentInjection","value","onMounted","unref","onBeforeUnmount","_createElementBlock","class","_normalizeClass","e"],"sources":["../../../../../../packages/components/popper/src/arrow.vue"],"sourcesContent":["<template>\n  <span ref=\"arrowRef\" :class=\"ns.e('arrow')\" data-popper-arrow=\"\" />\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  inject,\n  ref,\n  onMounted,\n  onBeforeUnmount,\n  watch,\n  unref,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { usePopperArrowProps } from './popper'\nimport { POPPER_CONTENT_INJECTION_KEY } from './tokens'\n\nexport default defineComponent({\n  name: 'ElPopperArrow',\n  props: usePopperArrowProps,\n  setup(props) {\n    const ns = useNamespace('popper')\n    const arrowRef = ref<HTMLSpanElement | null>(null)\n    const popperContentInjection = inject(\n      POPPER_CONTENT_INJECTION_KEY,\n      undefined\n    )!\n\n    watch(\n      () => props.arrowOffset,\n      (val) => {\n        popperContentInjection.arrowOffset.value = val\n      }\n    )\n\n    onMounted(() => {\n      popperContentInjection.arrowRef.value = unref(arrowRef)\n    })\n\n    onBeforeUnmount(() => {\n      popperContentInjection.arrowRef.value = null\n    })\n\n    return {\n      ns,\n      arrowRef,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}