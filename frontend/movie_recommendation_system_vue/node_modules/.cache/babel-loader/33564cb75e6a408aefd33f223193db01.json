{"ast":null,"code":"import { defineComponent, reactive, toRefs, getCurrentInstance, onBeforeUnmount, nextTick, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, renderSlot, createElementVNode, toDisplayString, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { useOption } from './useOption.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElOption\",\n  componentName: \"ElOption\",\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object]\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const ns = useNamespace(\"select\");\n    const states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false\n    });\n    const {\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem\n    } = useOption(props, states);\n    const {\n      visible,\n      hover\n    } = toRefs(states);\n    const vm = getCurrentInstance().proxy;\n    const key = vm.value;\n    select.onOptionCreate(vm);\n    onBeforeUnmount(() => {\n      const {\n        selected\n      } = select;\n      const selectedOptions = select.props.multiple ? selected : [selected];\n      const doesSelected = selectedOptions.some(item => {\n        return item.value === vm.value;\n      });\n      if (select.cachedOptions.get(key) === vm && !doesSelected) {\n        nextTick(() => {\n          select.cachedOptions.delete(key);\n        });\n      }\n      select.onOptionDestroy(key, vm);\n    });\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true);\n      }\n    }\n    return {\n      ns,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      visible,\n      hover,\n      selectOptionClick,\n      states\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((openBlock(), createElementBlock(\"li\", {\n    class: normalizeClass([_ctx.ns.be(\"dropdown\", \"item\"), _ctx.ns.is(\"disabled\", _ctx.isDisabled), {\n      selected: _ctx.itemSelected,\n      hover: _ctx.hover\n    }]),\n    onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), [\"stop\"]))\n  }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createElementVNode(\"span\", null, toDisplayString(_ctx.currentLabel), 1)])], 34)), [[vShow, _ctx.visible]]);\n}\nvar Option = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Option as default };","map":{"version":3,"mappings":";;;;;AAiCA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,aAAe;EAEfC,KAAO;IACLC,KAAO;MACLC,QAAU;MACVC,IAAM,GAACC,MAAQ,UAAQC,OAAS;IAAA;IAElCC,OAAO,CAACF,MAAQ;IAChBG,OAAS;IACTC,QAAU;MACRL,IAAM;MACNM,OAAS;IAAA;EAAA;EAIbC,MAAMV,KAAO;IACX,MAAMW,KAAKC,YAAa;IACxB,MAAMC,SAASC,QAAS;MACtBC,KAAO;MACPC,aAAe;MACfC,OAAS;MACTC,QAAU;MACVC,KAAO;IAAA;IAGT,MAAM;MAAEC,YAAc;MAAAC;MAAcC;MAAYC,MAAQ;MAAAC;IAAA,IACtDC,UAAUzB,KAAO;IAEb;MAAEiB,OAAS;MAAAE;IAAA,IAAUO,MAAO;IAElC,MAAMC,KAAKC,kBAAqB;IAChC,MAAMC,MAAOF,EAAoC;IACjDJ,OAAOO,cAAe;IAEtBC,gBAAgB,MAAM;MACpB,MAAM;QAAEC;MAAa;MACrB,MAAMC,eAAkB,UAAOjC,KAAM,YAAWgC,WAAW,CAACA;MAC5D,MAAME,YAAe,mBAAgBC,IAAK,CAACC,IAAS;QAC3C,YAAKnC,UAAW0B,EAAoC;MAAA;MAG7D,IAAIJ,OAAOc,aAAc,KAAIR,GAAS,YAAM,CAACK,YAAc;QACzDI,SAAS,MAAM;UACbf,OAAOc,cAAcE,MAAO;QAAA;MAAA;MAGhChB,OAAOiB,gBAAgBX,GAAK;IAAA;IAGD;MAC3B,IAAI7B,KAAM,cAAa,IAAQ,WAAOgB,kBAAkB,IAAM;QAC5DO,OAAOkB,mBAAmBd,EAAI;MAAA;IAAA;IAI3B;MACLhB;MACAS;MACAC;MACAC;MACAC;MACAC;MACAP;MACAE;MACAuB;MACA7B;IAAA;EAAA;AAAA;;sCAnGJ8B,kBAgBK;IAdFC,KAAK,kBAAUC,QAAGC,EAAE,sBAA4BD,QAAGE,GAAE,UAAa;MAAuCf;MAAsBb;IAAA;IAQ/H6B,cAAUC,MAAE;IACZC,SAAKD,qDAAOJ,IAAiB;EAAA,IAE9BM,WAEON,4BAFP,MAEO,CADLO,mBAA+B,8BAAtBP,IAAY,8BAbf;AAAA","names":["_sfc_main","defineComponent","name","componentName","props","value","required","type","String","Boolean","label","created","disabled","default","setup","ns","useNamespace","states","reactive","index","groupDisabled","visible","hitState","hover","currentLabel","itemSelected","isDisabled","select","hoverItem","useOption","toRefs","vm","getCurrentInstance","key","onOptionCreate","onBeforeUnmount","selected","selectedOptions","doesSelected","some","item","cachedOptions","nextTick","delete","onOptionDestroy","handleOptionSelect","selectOptionClick","_createElementBlock","class","_ctx","be","is","onMouseenter","_cache","onClick","_renderSlot","_createElementVNode"],"sources":["../../../../../../packages/components/select/src/option.vue"],"sourcesContent":["<template>\n  <li\n    v-show=\"visible\"\n    :class=\"[\n      ns.be('dropdown', 'item'),\n      ns.is('disabled', isDisabled),\n      {\n        selected: itemSelected,\n        hover,\n      },\n    ]\"\n    @mouseenter=\"hoverItem\"\n    @click.stop=\"selectOptionClick\"\n  >\n    <slot>\n      <span>{{ currentLabel }}</span>\n    </slot>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport {\n  toRefs,\n  defineComponent,\n  getCurrentInstance,\n  onBeforeUnmount,\n  reactive,\n  nextTick,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useOption } from './useOption'\nimport type { SelectOptionProxy } from './token'\n\nexport default defineComponent({\n  name: 'ElOption',\n  componentName: 'ElOption',\n\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object],\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  setup(props) {\n    const ns = useNamespace('select')\n    const states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false,\n    })\n\n    const { currentLabel, itemSelected, isDisabled, select, hoverItem } =\n      useOption(props, states)\n\n    const { visible, hover } = toRefs(states)\n\n    const vm = getCurrentInstance().proxy\n    const key = (vm as unknown as SelectOptionProxy).value\n    select.onOptionCreate(vm as unknown as SelectOptionProxy)\n\n    onBeforeUnmount(() => {\n      const { selected } = select\n      const selectedOptions = select.props.multiple ? selected : [selected]\n      const doesSelected = selectedOptions.some((item) => {\n        return item.value === (vm as unknown as SelectOptionProxy).value\n      })\n      // if option is not selected, remove it from cache\n      if (select.cachedOptions.get(key) === vm && !doesSelected) {\n        nextTick(() => {\n          select.cachedOptions.delete(key)\n        })\n      }\n      select.onOptionDestroy(key, vm)\n    })\n\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true)\n      }\n    }\n\n    return {\n      ns,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      visible,\n      hover,\n      selectOptionClick,\n      states,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}