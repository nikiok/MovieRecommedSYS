{"ast":null,"code":"import { defineComponent, computed, ref, watch, nextTick, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, withKeys, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, toDisplayString, normalizeStyle, Fragment, createVNode } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { switchProps, switchEmits } from './switch.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useDisabled, useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn, throwError } from '../../../utils/error.mjs';\nimport { isBoolean } from '@vueuse/core';\nconst COMPONENT_NAME = \"ElSwitch\";\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElIcon,\n    Loading\n  },\n  props: switchProps,\n  emits: switchEmits,\n  setup(props, {\n    emit\n  }) {\n    const {\n      formItem\n    } = useFormItem();\n    const switchDisabled = useDisabled(computed(() => props.loading));\n    const ns = useNamespace(\"switch\");\n    const switchSize = useSize();\n    const isModelValue = ref(props.modelValue !== false);\n    const input = ref();\n    const core = ref();\n    const switchKls = computed(() => [ns.b(), ns.m(switchSize.value), ns.is(\"disabled\", switchDisabled.value), ns.is(\"checked\", checked.value)]);\n    watch(() => props.modelValue, () => {\n      isModelValue.value = true;\n    });\n    watch(() => props.value, () => {\n      isModelValue.value = false;\n    });\n    const actualValue = computed(() => {\n      return isModelValue.value ? props.modelValue : props.value;\n    });\n    const checked = computed(() => actualValue.value === props.activeValue);\n    if (![props.activeValue, props.inactiveValue].includes(actualValue.value)) {\n      emit(UPDATE_MODEL_EVENT, props.inactiveValue);\n      emit(CHANGE_EVENT, props.inactiveValue);\n      emit(INPUT_EVENT, props.inactiveValue);\n    }\n    watch(checked, () => {\n      var _a;\n      input.value.checked = checked.value;\n      if (props.activeColor || props.inactiveColor) {\n        setBackgroundColor();\n      }\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      }\n    });\n    const handleChange = () => {\n      const val = checked.value ? props.inactiveValue : props.activeValue;\n      emit(UPDATE_MODEL_EVENT, val);\n      emit(CHANGE_EVENT, val);\n      emit(INPUT_EVENT, val);\n      nextTick(() => {\n        input.value.checked = checked.value;\n      });\n    };\n    const switchValue = () => {\n      if (switchDisabled.value) return;\n      const {\n        beforeChange\n      } = props;\n      if (!beforeChange) {\n        handleChange();\n        return;\n      }\n      const shouldChange = beforeChange();\n      const isExpectType = [isPromise(shouldChange), isBoolean(shouldChange)].some(i => i);\n      if (!isExpectType) {\n        throwError(COMPONENT_NAME, \"beforeChange must return type `Promise<boolean>` or `boolean`\");\n      }\n      if (isPromise(shouldChange)) {\n        shouldChange.then(result => {\n          if (result) {\n            handleChange();\n          }\n        }).catch(e => {\n          debugWarn(COMPONENT_NAME, `some error occurred: ${e}`);\n        });\n      } else if (shouldChange) {\n        handleChange();\n      }\n    };\n    const setBackgroundColor = () => {\n      const newColor = checked.value ? props.activeColor : props.inactiveColor;\n      const coreEl = core.value;\n      if (props.borderColor) coreEl.style.borderColor = props.borderColor;else if (!props.borderColor) coreEl.style.borderColor = newColor;\n      coreEl.style.backgroundColor = newColor;\n      coreEl.children[0].style.color = newColor;\n    };\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    onMounted(() => {\n      if (props.activeColor || props.inactiveColor || props.borderColor) {\n        setBackgroundColor();\n      }\n      input.value.checked = checked.value;\n    });\n    return {\n      ns,\n      input,\n      core,\n      switchDisabled,\n      checked,\n      switchKls,\n      handleChange,\n      switchValue,\n      focus\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-checked\", \"aria-disabled\"];\nconst _hoisted_2 = [\"id\", \"name\", \"true-value\", \"false-value\", \"disabled\"];\nconst _hoisted_3 = [\"aria-hidden\"];\nconst _hoisted_4 = [\"aria-hidden\"];\nconst _hoisted_5 = [\"aria-hidden\"];\nconst _hoisted_6 = [\"aria-hidden\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_loading = resolveComponent(\"loading\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.switchKls),\n    role: \"switch\",\n    \"aria-checked\": _ctx.checked,\n    \"aria-disabled\": _ctx.switchDisabled,\n    onClick: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.switchValue && _ctx.switchValue(...args), [\"prevent\"]))\n  }, [createElementVNode(\"input\", {\n    id: _ctx.id,\n    ref: \"input\",\n    class: normalizeClass(_ctx.ns.e(\"input\")),\n    type: \"checkbox\",\n    name: _ctx.name,\n    \"true-value\": _ctx.activeValue,\n    \"false-value\": _ctx.inactiveValue,\n    disabled: _ctx.switchDisabled,\n    onChange: _cache[0] || (_cache[0] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onKeydown: _cache[1] || (_cache[1] = withKeys((...args) => _ctx.switchValue && _ctx.switchValue(...args), [\"enter\"]))\n  }, null, 42, _hoisted_2), !_ctx.inlinePrompt && (_ctx.inactiveIcon || _ctx.inactiveText) ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass([_ctx.ns.e(\"label\"), _ctx.ns.em(\"label\", \"left\"), _ctx.ns.is(\"active\", !_ctx.checked)])\n  }, [_ctx.inactiveIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.inactiveIcon)))]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), !_ctx.inactiveIcon && _ctx.inactiveText ? (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    \"aria-hidden\": _ctx.checked\n  }, toDisplayString(_ctx.inactiveText), 9, _hoisted_3)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", {\n    ref: \"core\",\n    class: normalizeClass(_ctx.ns.e(\"core\")),\n    style: normalizeStyle({\n      width: (_ctx.width || 40) + \"px\"\n    })\n  }, [_ctx.inlinePrompt ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"inner\"))\n  }, [_ctx.activeIcon || _ctx.inactiveIcon ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [_ctx.activeIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.is(\"icon\"), _ctx.checked ? _ctx.ns.is(\"show\") : _ctx.ns.is(\"hide\")])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.activeIcon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), _ctx.inactiveIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: normalizeClass([_ctx.ns.is(\"icon\"), !_ctx.checked ? _ctx.ns.is(\"show\") : _ctx.ns.is(\"hide\")])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.inactiveIcon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 64)) : _ctx.activeText || _ctx.inactiveIcon ? (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [_ctx.activeText ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass([_ctx.ns.is(\"text\"), _ctx.checked ? _ctx.ns.is(\"show\") : _ctx.ns.is(\"hide\")]),\n    \"aria-hidden\": !_ctx.checked\n  }, toDisplayString(_ctx.activeText.substring(0, 3)), 11, _hoisted_4)) : createCommentVNode(\"v-if\", true), _ctx.inactiveText ? (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    class: normalizeClass([_ctx.ns.is(\"text\"), !_ctx.checked ? _ctx.ns.is(\"show\") : _ctx.ns.is(\"hide\")]),\n    \"aria-hidden\": _ctx.checked\n  }, toDisplayString(_ctx.inactiveText.substring(0, 3)), 11, _hoisted_5)) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"action\"))\n  }, [_ctx.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.ns.is(\"loading\"))\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 6), !_ctx.inlinePrompt && (_ctx.activeIcon || _ctx.activeText) ? (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    class: normalizeClass([_ctx.ns.e(\"label\"), _ctx.ns.em(\"label\", \"right\"), _ctx.ns.is(\"active\", _ctx.checked)])\n  }, [_ctx.activeIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.activeIcon)))]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), !_ctx.activeIcon && _ctx.activeText ? (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    \"aria-hidden\": !_ctx.checked\n  }, toDisplayString(_ctx.activeText), 9, _hoisted_6)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\nvar Switch = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Switch as default };","map":{"version":3,"mappings":"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","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","components","ElIcon","Loading","props","emits","setup","emit","formItem","switchDisabled","computed","ns","useNamespace","switchSize","ref","modelValue","input","core","m","is","checked","watch","isModelValue","value","actualValue","inactiveValue","UPDATE_MODEL_EVENT","CHANGE_EVENT","INPUT_EVENT","setBackgroundColor","val","nextTick","switchValue","beforeChange","handleChange","shouldChange","isExpectType","isPromise","isBoolean","throwError","debugWarn","newColor","coreEl","style","borderColor","onMounted","switchKls","focus","_openBlock","class","role","onClick","_createElementVNode","id","type","disabled","onChange","onKeydown","_ctx","key","e","default","_","width","_createElementBlock","_component_el_icon","_createBlock","_createCommentVNode"],"sources":["../../../../../../packages/components/switch/src/switch.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"switchKls\"\n    role=\"switch\"\n    :aria-checked=\"checked\"\n    :aria-disabled=\"switchDisabled\"\n    @click.prevent=\"switchValue\"\n  >\n    <input\n      :id=\"id\"\n      ref=\"input\"\n      :class=\"ns.e('input')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :true-value=\"activeValue\"\n      :false-value=\"inactiveValue\"\n      :disabled=\"switchDisabled\"\n      @change=\"handleChange\"\n      @keydown.enter=\"switchValue\"\n    />\n    <span\n      v-if=\"!inlinePrompt && (inactiveIcon || inactiveText)\"\n      :class=\"[\n        ns.e('label'),\n        ns.em('label', 'left'),\n        ns.is('active', !checked),\n      ]\"\n    >\n      <el-icon v-if=\"inactiveIcon\"><component :is=\"inactiveIcon\" /></el-icon>\n      <span v-if=\"!inactiveIcon && inactiveText\" :aria-hidden=\"checked\">{{\n        inactiveText\n      }}</span>\n    </span>\n    <span\n      ref=\"core\"\n      :class=\"ns.e('core')\"\n      :style=\"{ width: (width || 40) + 'px' }\"\n    >\n      <div v-if=\"inlinePrompt\" :class=\"ns.e('inner')\">\n        <template v-if=\"activeIcon || inactiveIcon\">\n          <el-icon\n            v-if=\"activeIcon\"\n            :class=\"[ns.is('icon'), checked ? ns.is('show') : ns.is('hide')]\"\n          >\n            <component :is=\"activeIcon\" />\n          </el-icon>\n          <el-icon\n            v-if=\"inactiveIcon\"\n            :class=\"[ns.is('icon'), !checked ? ns.is('show') : ns.is('hide')]\"\n          >\n            <component :is=\"inactiveIcon\" />\n          </el-icon>\n        </template>\n        <template v-else-if=\"activeText || inactiveIcon\">\n          <span\n            v-if=\"activeText\"\n            :class=\"[ns.is('text'), checked ? ns.is('show') : ns.is('hide')]\"\n            :aria-hidden=\"!checked\"\n          >\n            {{ activeText.substring(0, 3) }}\n          </span>\n          <span\n            v-if=\"inactiveText\"\n            :class=\"[ns.is('text'), !checked ? ns.is('show') : ns.is('hide')]\"\n            :aria-hidden=\"checked\"\n          >\n            {{ inactiveText.substring(0, 3) }}\n          </span>\n        </template>\n      </div>\n      <div :class=\"ns.e('action')\">\n        <el-icon v-if=\"loading\" :class=\"ns.is('loading')\"><loading /></el-icon>\n      </div>\n    </span>\n    <span\n      v-if=\"!inlinePrompt && (activeIcon || activeText)\"\n      :class=\"[\n        ns.e('label'),\n        ns.em('label', 'right'),\n        ns.is('active', checked),\n      ]\"\n    >\n      <el-icon v-if=\"activeIcon\"><component :is=\"activeIcon\" /></el-icon>\n      <span v-if=\"!activeIcon && activeText\" :aria-hidden=\"!checked\">{{\n        activeText\n      }}</span>\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, onMounted, ref, nextTick, watch } from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { isBoolean, throwError, debugWarn } from '@element-plus/utils'\nimport ElIcon from '@element-plus/components/icon'\nimport { Loading } from '@element-plus/icons-vue'\nimport {\n  UPDATE_MODEL_EVENT,\n  CHANGE_EVENT,\n  INPUT_EVENT,\n} from '@element-plus/constants'\nimport {\n  useDisabled,\n  useFormItem,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { switchProps, switchEmits } from './switch'\n\nconst COMPONENT_NAME = 'ElSwitch'\n\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  components: { ElIcon, Loading },\n\n  props: switchProps,\n  emits: switchEmits,\n\n  setup(props, { emit }) {\n    const { formItem } = useFormItem()\n    const switchDisabled = useDisabled(computed(() => props.loading))\n    const ns = useNamespace('switch')\n\n    const switchSize = useSize()\n    const isModelValue = ref(props.modelValue !== false)\n    const input = ref<HTMLInputElement>()\n    const core = ref<HTMLSpanElement>()\n\n    const switchKls = computed(() => [\n      ns.b(),\n      ns.m(switchSize.value),\n      ns.is('disabled', switchDisabled.value),\n      ns.is('checked', checked.value),\n    ])\n\n    watch(\n      () => props.modelValue,\n      () => {\n        isModelValue.value = true\n      }\n    )\n\n    watch(\n      () => props.value,\n      () => {\n        isModelValue.value = false\n      }\n    )\n\n    const actualValue = computed(() => {\n      return isModelValue.value ? props.modelValue : props.value\n    })\n\n    const checked = computed(() => actualValue.value === props.activeValue)\n\n    if (![props.activeValue, props.inactiveValue].includes(actualValue.value)) {\n      emit(UPDATE_MODEL_EVENT, props.inactiveValue)\n      emit(CHANGE_EVENT, props.inactiveValue)\n      emit(INPUT_EVENT, props.inactiveValue)\n    }\n\n    watch(checked, () => {\n      input.value!.checked = checked.value\n\n      if (props.activeColor || props.inactiveColor) {\n        setBackgroundColor()\n      }\n\n      if (props.validateEvent) {\n        formItem?.validate?.('change').catch((err) => debugWarn(err))\n      }\n    })\n\n    const handleChange = (): void => {\n      const val = checked.value ? props.inactiveValue : props.activeValue\n      emit(UPDATE_MODEL_EVENT, val)\n      emit(CHANGE_EVENT, val)\n      emit(INPUT_EVENT, val)\n      nextTick(() => {\n        input.value!.checked = checked.value\n      })\n    }\n\n    const switchValue = (): void => {\n      if (switchDisabled.value) return\n\n      const { beforeChange } = props\n      if (!beforeChange) {\n        handleChange()\n        return\n      }\n\n      const shouldChange = beforeChange()\n\n      const isExpectType = [\n        isPromise(shouldChange),\n        isBoolean(shouldChange),\n      ].some((i) => i)\n      if (!isExpectType) {\n        throwError(\n          COMPONENT_NAME,\n          'beforeChange must return type `Promise<boolean>` or `boolean`'\n        )\n      }\n\n      if (isPromise(shouldChange)) {\n        shouldChange\n          .then((result) => {\n            if (result) {\n              handleChange()\n            }\n          })\n          .catch((e) => {\n            debugWarn(COMPONENT_NAME, `some error occurred: ${e}`)\n          })\n      } else if (shouldChange) {\n        handleChange()\n      }\n    }\n\n    const setBackgroundColor = (): void => {\n      const newColor = checked.value ? props.activeColor : props.inactiveColor\n      const coreEl = core.value\n      if (props.borderColor) coreEl!.style.borderColor = props.borderColor\n      else if (!props.borderColor) coreEl!.style.borderColor = newColor\n      coreEl!.style.backgroundColor = newColor\n      ;(coreEl!.children[0] as HTMLDivElement).style.color = newColor\n    }\n\n    const focus = (): void => {\n      input.value?.focus?.()\n    }\n\n    onMounted(() => {\n      if (props.activeColor || props.inactiveColor || props.borderColor) {\n        setBackgroundColor()\n      }\n\n      input.value!.checked = checked.value\n    })\n\n    return {\n      ns,\n      input,\n      core,\n      switchDisabled,\n      checked,\n      switchKls,\n      handleChange,\n      switchValue,\n      focus,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}