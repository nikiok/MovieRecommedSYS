{"ast":null,"code":"import { defineComponent, inject, computed, ref, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { selectKey } from './token.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/dom/resize-event.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElSelectDropdown\",\n  componentName: \"ElSelectDropdown\",\n  setup() {\n    const select = inject(selectKey);\n    const ns = useNamespace(\"select\");\n    const popperClass = computed(() => select.props.popperClass);\n    const isMultiple = computed(() => select.props.multiple);\n    const isFitInputWidth = computed(() => select.props.fitInputWidth);\n    const minWidth = ref(\"\");\n    function updateMinWidth() {\n      var _a;\n      minWidth.value = `${(_a = select.selectWrapper) == null ? void 0 : _a.getBoundingClientRect().width}px`;\n    }\n    onMounted(() => {\n      updateMinWidth();\n      addResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    onBeforeUnmount(() => {\n      removeResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    return {\n      ns,\n      minWidth,\n      popperClass,\n      isMultiple,\n      isFitInputWidth\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(\"dropdown\"), _ctx.ns.is(\"multiple\", _ctx.isMultiple), _ctx.popperClass]),\n    style: normalizeStyle({\n      [_ctx.isFitInputWidth ? \"width\" : \"minWidth\"]: _ctx.minWidth\n    })\n  }, [renderSlot(_ctx.$slots, \"default\")], 6);\n}\nvar ElSelectMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ElSelectMenu as default };","map":{"version":3,"mappings":";;;;;;;AAuBA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EAENC,aAAe;EAEfC,KAAQA;IACN,MAAMC,SAASC,MAAO;IACtB,MAAMC,KAAKC,YAAa;IAGxB,MAAMC,WAAc,YAAS,MAAMJ,OAAOK,KAAM;IAChD,MAAMC,UAAa,YAAS,MAAMN,OAAOK,KAAM;IAC/C,MAAME,eAAkB,YAAS,MAAMP,OAAOK,KAAM;IACpD,MAAMG,WAAWC,GAAI;IAEK;MACxB;MACgDD;IAIlD;IAGEE;MACAC;MAEEC;IAIJ;IACEC;MAEEC;IAIJ,CAAO;IACL;MACAZ;MACAM;MACAJ;MACAE;MAAAC;IAAA;EAAA;;yBA5DE;EAJH;IACAQ,OAAKC,cAAK,6BAAyC;IAAAC;MAAA;IAAA;KAE5C","names":["_sfc_main","defineComponent","name","componentName","setup","select","inject","ns","useNamespace","popperClass","props","isMultiple","isFitInputWidth","minWidth","ref","onMounted","updateMinWidth","addResizeListener","onBeforeUnmount","removeResizeListener","class","_normalizeClass","style"],"sources":["../../../../../../packages/components/select/src/select-dropdown.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('dropdown'), ns.is('multiple', isMultiple), popperClass]\"\n    :style=\"{ [isFitInputWidth ? 'width' : 'minWidth']: minWidth }\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  onMounted,\n  onBeforeUnmount,\n  inject,\n  ref,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { addResizeListener, removeResizeListener } from '@element-plus/utils'\nimport { selectKey } from './token'\nimport type { ResizableElement } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  componentName: 'ElSelectDropdown',\n\n  setup() {\n    const select = inject(selectKey)!\n    const ns = useNamespace('select')\n\n    // computed\n    const popperClass = computed(() => select.props.popperClass)\n    const isMultiple = computed(() => select.props.multiple)\n    const isFitInputWidth = computed(() => select.props.fitInputWidth)\n    const minWidth = ref('')\n\n    function updateMinWidth() {\n      minWidth.value = `${\n        select.selectWrapper?.getBoundingClientRect().width\n      }px`\n    }\n\n    onMounted(() => {\n      // TODO: updatePopper\n      // popper.value.update()\n      updateMinWidth()\n      addResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    return {\n      ns,\n      minWidth,\n      popperClass,\n      isMultiple,\n      isFitInputWidth,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}