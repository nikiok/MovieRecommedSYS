{"ast":null,"code":"import { defineComponent, inject, ref, getCurrentInstance, provide, watch, nextTick, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode, Fragment, renderList, vShow } from 'vue';\nimport { isFunction, isString } from '@vue/shared';\nimport _CollapseTransition from '../../collapse-transition/index.mjs';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading, CaretRight } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport _sfc_main$1 from './tree-node-content.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { dragEventsKey } from './model/useDragNode.mjs';\nimport Node from './model/node.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElCollapseTransition: _CollapseTransition,\n    ElCheckbox,\n    NodeContent: _sfc_main$1,\n    ElIcon,\n    Loading\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({})\n    },\n    props: {\n      type: Object,\n      default: () => ({})\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"node-expand\"],\n  setup(props, ctx) {\n    const ns = useNamespace(\"tree\");\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const tree = inject(\"RootTree\");\n    const expanded = ref(false);\n    const childNodeRendered = ref(false);\n    const oldChecked = ref(null);\n    const oldIndeterminate = ref(null);\n    const node$ = ref(null);\n    const dragEvents = inject(dragEventsKey);\n    const instance = getCurrentInstance();\n    provide(\"NodeInstance\", instance);\n    if (!tree) {\n      debugWarn(\"Tree\", \"Can not find node's tree.\");\n    }\n    if (props.node.expanded) {\n      expanded.value = true;\n      childNodeRendered.value = true;\n    }\n    const childrenKey = tree.props[\"children\"] || \"children\";\n    watch(() => {\n      const children = props.node.data[childrenKey];\n      return children && [...children];\n    }, () => {\n      props.node.updateChildren();\n    });\n    watch(() => props.node.indeterminate, val => {\n      handleSelectChange(props.node.checked, val);\n    });\n    watch(() => props.node.checked, val => {\n      handleSelectChange(val, props.node.indeterminate);\n    });\n    watch(() => props.node.expanded, val => {\n      nextTick(() => expanded.value = val);\n      if (val) {\n        childNodeRendered.value = true;\n      }\n    });\n    const getNodeKey$1 = node => {\n      return getNodeKey(tree.props.nodeKey, node.data);\n    };\n    const getNodeClass = node => {\n      const nodeClassFunc = props.props.class;\n      if (!nodeClassFunc) {\n        return {};\n      }\n      let className;\n      if (isFunction(nodeClassFunc)) {\n        const {\n          data\n        } = node;\n        className = nodeClassFunc(data, node);\n      } else {\n        className = nodeClassFunc;\n      }\n      if (isString(className)) {\n        return {\n          [className]: true\n        };\n      } else {\n        return className;\n      }\n    };\n    const handleSelectChange = (checked, indeterminate) => {\n      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {\n        tree.ctx.emit(\"check-change\", props.node.data, checked, indeterminate);\n      }\n      oldChecked.value = checked;\n      oldIndeterminate.value = indeterminate;\n    };\n    const handleClick = e => {\n      const store = tree.store.value;\n      store.setCurrentNode(props.node);\n      tree.ctx.emit(\"current-change\", store.currentNode ? store.currentNode.data : null, store.currentNode);\n      tree.currentNode.value = props.node;\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick();\n      }\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: {\n            checked: !props.node.checked\n          }\n        });\n      }\n      tree.ctx.emit(\"node-click\", props.node.data, props.node, instance, e);\n    };\n    const handleContextMenu = event => {\n      if (tree.instance.vnode.props[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      tree.ctx.emit(\"node-contextmenu\", event, props.node.data, props.node, instance);\n    };\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return;\n      if (expanded.value) {\n        tree.ctx.emit(\"node-collapse\", props.node.data, props.node, instance);\n        props.node.collapse();\n      } else {\n        props.node.expand();\n        ctx.emit(\"node-expand\", props.node.data, props.node, instance);\n      }\n    };\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);\n      nextTick(() => {\n        const store = tree.store.value;\n        tree.ctx.emit(\"check\", props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    };\n    const handleChildNodeExpand = (nodeData, node, instance2) => {\n      broadcastExpanded(node);\n      tree.ctx.emit(\"node-expand\", nodeData, node, instance2);\n    };\n    const handleDragStart = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragStart({\n        event,\n        treeNode: props\n      });\n    };\n    const handleDragOver = event => {\n      event.preventDefault();\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: {\n          $el: node$.value,\n          node: props.node\n        }\n      });\n    };\n    const handleDrop = event => {\n      event.preventDefault();\n    };\n    const handleDragEnd = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragEnd(event);\n    };\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey: getNodeKey$1,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"];\nconst _hoisted_2 = [\"aria-expanded\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_loading = resolveComponent(\"loading\");\n  const _component_node_content = resolveComponent(\"node-content\");\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.node.isCurrent), _ctx.ns.is(\"hidden\", !_ctx.node.visible), _ctx.ns.is(\"focusable\", !_ctx.node.disabled), _ctx.ns.is(\"checked\", !_ctx.node.disabled && _ctx.node.checked), _ctx.getNodeClass(_ctx.node)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),\n    onDragstart: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), [\"stop\"])),\n    onDragover: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), [\"stop\"])),\n    onDragend: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), [\"stop\"])),\n    onDrop: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: normalizeStyle({\n      paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    })\n  }, [_ctx.tree.props.icon || _ctx.CaretRight ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"expand-icon\"), _ctx.ns.is(\"leaf\", _ctx.node.isLeaf), {\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"])),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"loading-icon\"), _ctx.ns.is(\"loading\")])\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 6), createVNode(_component_el_collapse_transition, null, {\n    default: withCtx(() => [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"node\", \"children\")),\n      role: \"group\",\n      \"aria-expanded\": _ctx.expanded\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.node.childNodes, child => {\n      return openBlock(), createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        \"render-content\": _ctx.renderContent,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        node: child,\n        accordion: _ctx.accordion,\n        props: _ctx.props,\n        onNodeExpand: _ctx.handleChildNodeExpand\n      }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"accordion\", \"props\", \"onNodeExpand\"]);\n    }), 128))], 10, _hoisted_2)), [[vShow, _ctx.expanded]]) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  })], 42, _hoisted_1)), [[vShow, _ctx.node.visible]]);\n}\nvar ElTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ElTreeNode as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AA8GA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,UAAY;IAAAC,sBACVA;IACAC;IAAAC,aACAA;IACAC;IACAC;EAAA;EAEFC,KAAO;IACLC,IAAM;MACJC,IAAM;MACNC,SAASA,OAAO;IAAA;IAElBH,KAAO;MACLE,IAAM;MACNC,SAASA,OAAO;IAAA;IAElBC,SAAW;IACXC,aAAe;IACfC,iBAAmB;IACnBC,YAAc;MACZL,IAAM;MACNC,OAAS;IAAA;EAAA;EAGbK,OAAO,CAAC;EACRC,MAAMT,OAAOU,GAAK;IAChB,MAAMC,KAAKC,YAAa;IAClB;MAAEC;IAAA,IAAsBC,2BAA4B;IAC1D,MAAMC,OAAOC,MAAqB;IAClC,MAAMC,WAAWC,GAAI;IACrB,MAAMC,oBAAoBD,GAAI;IAC9B,MAAME,aAAaF,GAAa;IAChC,MAAMG,mBAAmBH,GAAa;IACtC,MAAMI,QAAQJ,GAA2B;IACzC,MAAMK,aAAaP,MAAO;IAC1B,MAAMQ,QAAW;IAEjBC,QAAQ,cAAgB;IACxB,IAAI,CAACV,IAAM;MACTW,UAAU,MAAQ;IAAA;IAGhB,UAAMzB,KAAKgB,QAAU;MACvBA,SAASU,KAAQ;MACjBR,kBAAkBQ,KAAQ;IAAA;IAGtB,oBAAcZ,IAAK,OAAM,UAAe;IAC9Ca,MACE,MAAM;MACE,iBAAW5B,KAAM,MAAK6B,IAAK;MAC1B,mBAAY,CAAC,GAAGC;IAAA,GAEzB,MAAM;MACJ9B,MAAMC,IAAK;IAAA;IAIf2B,MACE,MAAM5B,MAAMC,IAAK,gBAChB8B,GAAQ;MACYC,yBAAM/B,KAAKgC,OAAS;IAAA;IAI3CL,MACE,MAAM5B,MAAMC,IAAK,UAChB8B,GAAQ;MACYC,wBAAKhC,MAAMC,IAAK;IAAA;IAIvC2B,MACE,MAAM5B,MAAMC,IAAK,WAChB8B,GAAQ;MACEG,eAAOjB,SAASU,KAAQ;MACjC,IAAII,GAAK;QACPZ,kBAAkBQ,KAAQ;MAAA;IAAA;IAK1B,qBAAc1B,IAAoB;MACtC,OAAOkC,UAAe,MAAKnC,KAAM,UAASC,IAAK;IAAA;IAG3C,qBAAgBA,IAAe;MAC7B,sBAAgBD,MAAMA,KAAM;MAClC,IAAI,CAACoC,aAAe;QACX;MAAA;MAEL;MACJ,IAAIC,WAAWD,aAAgB;QAC7B,MAAM;UAAEP;QAAS;QACjBS,YAAYF,cAAcP,IAAM;MAAA,CAC3B;QACOS;MAAA;MAGd,IAAIC,SAASD,SAAY;QACvB,OAAO;UAAA,CAAGA,SAAY;QAAA;MAAA,CACjB;QACE;MAAA;IAAA;IAIL,2BAAqBN,CAACC,SAAkBO,aAA2B;MACvE,IACEpB,UAAW,WAAUa,OACrB,qBAAiBN,UAAUa,aAC3B;QACAzB,KAAKL,IAAI+B,IAAK,iBAAgBzC,KAAM,MAAK6B,MAAMI,OAAS;MAAA;MAE1Db,WAAWO,KAAQ;MACnBN,iBAAiBM,KAAQ;IAAA;IAGrB,oBAAee,CAAkB;MAC/B,cAAQ3B,KAAK4B,KAAM;MACzBA,MAAMC,eAAe5C,KAAM;MACtBe,SAAI0B,KACP,gBACA,QAAMI,cAAcF,KAAM,aAAYd,IAAO,SAC7Cc,KAAM;MAEH5B,iBAAYY,QAAQ3B,KAAM;MAE3B,SAAKA,MAAM8C,iBAAmB;QAChCC;MAAA;MAGF,IAAIhC,KAAKf,KAAM,qBAAoB,CAACA,MAAMC,KAAK+C,QAAU;QACvDC,kBAAkB,IAAM;UACtBC,MAAQ;YAAEjB,OAAS,GAACjC,MAAMC,IAAK;UAAA;QAAA;MAAA;MAG9Bc,SAAI0B,KAAK,YAAc,QAAMxC,KAAK4B,IAAM,QAAM5B,MAAMuB,QAAU;IAAA;IAG/D,0BAAqB2B,KAAiB;MAC1C,IAAIpC,IAAK,UAASqC,KAAM,OAAM,mBAAsB;QAC5CD;QACAA;MAAA;MAEHpC,SAAI0B,KACP,kBACA,SACAzC,MAAMC,IAAK,OACXD,MAAMC,IACN;IAAA;IAIJ,MAAM8C,wBAAwBA,MAAM;MAClC,IAAI/C,MAAMC,IAAK,SAAQ;MACvB,IAAIgB,SAASU,KAAO;QAClBZ,KAAKL,IAAI+B,IAAK,kBAAiBzC,MAAMC,IAAK,OAAMD,MAAMC,IAAM;QAC5DD,MAAMC,IAAK;MAAA,CACN;QACLD,MAAMC,IAAK;QACXS,IAAI+B,KAAK,aAAe,QAAMxC,IAAK,OAAMD,MAAMC,IAAM;MAAA;IAAA;IAInD,0BAAoBgD,CAACtB,OAAO0B,EAAO;MACvCrD,MAAMC,KAAKqD,UAAW,IAAGJ,OAAOjB,OAAS,GAAClB,KAAKf,KAAM;MACrDkC,SAAS,MAAM;QACP,cAAQnB,KAAK4B,KAAM;QACzB5B,KAAKL,GAAI,MAAK,OAAS,QAAMT,KAAK4B,IAAM;UACtC0B,cAAcZ,KAAM;UACpBa,aAAab,KAAM;UACnBc,kBAAkBd,KAAM;UACxBe,iBAAiBf,KAAM;QAAA;MAAA;IAAA;IAK7B,MAAMgB,qBAAwB,IAC5BC,QACA,QACAC,SACG;MACehD;MAClBE,KAAKL,GAAI,MAAK,aAAe,YAAUT,IAAM;IAAA;IAGzC,wBAAmBkD,KAAqB;MACxC,KAACpC,KAAKf,KAAM,YAAW;MAChBuB,6BAAkB;QAAE4B;QAAOW,QAAU;MAAA;IAAA;IAG5C,uBAAkBX,KAAqB;MACrCA;MACF,KAACpC,KAAKf,KAAM,YAAW;MAC3BuB,WAAWwC,gBAAiB;QAC1BZ;QACAW,UAAU;UAAEE,KAAK1C,KAAM;UAAOrB,MAAMD,KAAM;QAAA;MAAA;IAAA;IAIxC,mBAAcmD,KAAqB;MACjCA;IAAA;IAGF,sBAAiBA,KAAqB;MACtC,KAACpC,KAAKf,KAAM,YAAW;MAC3BuB,WAAW0C,eAAgB;IAAA;IAGtB;MACLtD;MACAW;MACAP;MACAE;MACAE;MACAC;MACAC;MAAA6C,YACAA;MACAC;MACAnC;MACAoC;MACAC;MACAtB;MACAE;MACAU;MACAW;MACAC;MACAC;MACAC;MACAC;IAAA;EAAA;AAAA;;;;;;;;;;sCApVJC,kBAgFM;IA9EJzD,GAAI;IACH0D,KAAK,kBAAUC,QAAGC,CAAC,UAAgBD,QAAGE,GAAE,UAAa,kBAAiBF,QAAGE,EAAE,YAAYF,IAAK,kBAAkBA,QAAGE,EAAE,YAAYF,IAAK,gBAAgBA,QAAGE,EAAE,eAAeF,IAAK,iBAAiBA,IAAG,OAAE,SAAa,aAAK7B,YAAY6B,IAAK,gBAAgBA,IAAa;IASpQG,IAAK;IACLC,QAAS;IACR,eAAe;IACf,iBAAeJ,IAAK;IACpB,gBAAcA,IAAK;IACnBK,WAAWL,UAAK7E,KAAM;IACtB,YAAU6E,IAAW;IACrBM,SAAKC,qDAAOP,IAAW;IACvBQ,eAAWD,MAAE;IACbE,aAASF,qDAAOP,IAAe;IAC/BU,YAAQH,qDAAOP,IAAc;IAC7BW,WAAOJ,qDAAOP,IAAa;IAC3BY,QAAIL,qDAAOP,IAAU;EAAA,IAEtBa,kBAgCM;IA/BHd,OAAKe,cAAE,SAAGC,EAAE;IACZC,OAAKC,cAAkB;MAAAC,wBAAKC,QAAK,CAAQ,cAAKhG,MAAMiG,MAAM;IAAA;EAAA,IAGnDpB,IAAK,YAAMqB,IAAQ,oCAD3BC,WAYU;IAAAC;IAVPxB,KAAK,kBAAcC,QAAGe,EAAE,yBAAmCf,QAAGE,EAAE,SAASF,IAAK;MAA4C5D,qBAAKoF,MAAU;IAAA;IAOzIlB,SAAKmB,cAAOzB,IAAqB;EAAA;qBAElC,MAAiD,eAAjDsB,WAAiD,yBAAjCtB,IAAK,YAAMqB,IAAQ;IAAAK;mEAG7B1B,kCADRsB,WAOE;IAAAC;IALC,eAAavB,IAAK;IAClBrC,eAAeqC,IAAK;IACpB7B,UAAQ,EAAI6B,IAAK;IACjBM,SAAKC,MAAN,0CAAW;IACVoB,QAAQ;EAAA,2GAGH3B,UAAK4B,wBADbN,WAKU;IAAAC;IAHPxB,OAAKe,cAAG,UAAGC,EAAE,0BAA0Bf,QAAGE,EAAE;EAAA;qBAE7C,MAAW,CAAX2B,WAAW;IAAAH;wDAEbG,WAA6D;IAA9CzG,IAAM;IAAO,gBAAgB;EAAA,8CAE9CyG,WAoByB;IAAAvG,iBAnBvB,MAkBM,CAjBG,2BAAqB0E,sDAD9BF,kBAkBM;MAAAyB;MAfHxB,KAAK,iBAAEC,QAAGe,EAAE;MACbZ,IAAK;MACJ,eAAe;IAAA,KAEhB2B,oCAUEC,QATgB,6BAAKC,UAAU,EAAxBC,KAAK;0BADdX,WAUE;QARCC,KAAKvB,IAAW;QAChB,gBAAgB;QAChB,qBAAqB;QACrB,eAAe;QACf5E,IAAM;QACNG,SAAW;QACXJ,KAAO;QACP+G,YAAa;MAAA;mCAdR;;kCA7DJlC,IAAK;AAAA","names":["_sfc_main","defineComponent","name","components","ElCollapseTransition","ElCheckbox","NodeContent","ElIcon","Loading","props","node","type","default","accordion","renderContent","renderAfterExpand","showCheckbox","emits","setup","ctx","ns","useNamespace","broadcastExpanded","useNodeExpandEventBroadcast","tree","inject","expanded","ref","childNodeRendered","oldChecked","oldIndeterminate","node$","dragEvents","instance","provide","debugWarn","value","watch","data","children","val","handleSelectChange","checked","nextTick","getNodeKeyUtil","nodeClassFunc","isFunction","className","isString","indeterminate","emit","e","store","setCurrentNode","currentNode","expandOnClickNode","handleExpandIconClick","disabled","handleCheckChange","target","event","vnode","ev","setChecked","checkedNodes","checkedKeys","halfCheckedNodes","halfCheckedKeys","handleChildNodeExpand","nodeData","instance2","treeNode","treeNodeDragOver","$el","treeNodeDragEnd","getNodeKey","getNodeClass","handleClick","handleContextMenu","handleDragStart","handleDragOver","handleDrop","handleDragEnd","CaretRight","_createElementBlock","class","_ctx","b","is","role","tabindex","draggable","onClick","_cache","onContextmenu","onDragstart","onDragover","onDragend","onDrop","_createElementVNode","_normalizeClass","be","style","_normalizeStyle","paddingLeft","level","indent","icon","_createBlock","key","isLeaf","_withModifiers","_","onChange","loading","_createVNode","_openBlock","_Fragment","childNodes","child","onNodeExpand"],"sources":["../../../../../../packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  getCurrentInstance,\n  ref,\n  watch,\n  nextTick,\n  inject,\n  provide,\n} from 'vue'\nimport { isString, isFunction } from '@vue/shared'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { TreeOptionProps, TreeNodeData, RootTreeType } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      const store = tree.store.value\n      store.setCurrentNode(props.node)\n      tree.ctx.emit(\n        'current-change',\n        store.currentNode ? store.currentNode.data : null,\n        store.currentNode\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}