{"ast":null,"code":"import { defineComponent, inject, reactive, ref, computed, watch, h, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withCtx, renderSlot, createElementVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport TransferPanel from './transfer-panel.mjs';\nimport { useComputedData } from './useComputedData.mjs';\nimport { LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT, useCheckedChange } from './useCheckedChange.mjs';\nimport { useMove } from './useMove.mjs';\nimport './transfer.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { formItemContextKey } from '../../../tokens/form.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTransfer\",\n  components: {\n    TransferPanel,\n    ElButton,\n    ElIcon,\n    ArrowLeft,\n    ArrowRight\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    titles: {\n      type: Array,\n      default: () => []\n    },\n    buttonTexts: {\n      type: Array,\n      default: () => []\n    },\n    filterPlaceholder: {\n      type: String,\n      default: \"\"\n    },\n    filterMethod: Function,\n    leftDefaultChecked: {\n      type: Array,\n      default: () => []\n    },\n    rightDefaultChecked: {\n      type: Array,\n      default: () => []\n    },\n    renderContent: Function,\n    modelValue: {\n      type: Array,\n      default: () => []\n    },\n    format: {\n      type: Object,\n      default: () => ({})\n    },\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    props: {\n      type: Object,\n      default: () => ({\n        label: \"label\",\n        key: \"key\",\n        disabled: \"disabled\"\n      })\n    },\n    targetOrder: {\n      type: String,\n      default: \"original\",\n      validator: val => {\n        return [\"original\", \"push\", \"unshift\"].includes(val);\n      }\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"transfer\");\n    const elFormItem = inject(formItemContextKey, {});\n    const checkedState = reactive({\n      leftChecked: [],\n      rightChecked: []\n    });\n    const {\n      propsKey,\n      sourceData,\n      targetData\n    } = useComputedData(props);\n    const {\n      onSourceCheckedChange,\n      onTargetCheckedChange\n    } = useCheckedChange(checkedState, emit);\n    const {\n      addToLeft,\n      addToRight\n    } = useMove(props, checkedState, propsKey, emit);\n    const leftPanel = ref();\n    const rightPanel = ref();\n    const clearQuery = which => {\n      switch (which) {\n        case \"left\":\n          leftPanel.value.query = \"\";\n          break;\n        case \"right\":\n          rightPanel.value.query = \"\";\n          break;\n      }\n    };\n    const hasButtonTexts = computed(() => props.buttonTexts.length === 2);\n    const leftPanelTitle = computed(() => props.titles[0] || t(\"el.transfer.titles.0\"));\n    const rightPanelTitle = computed(() => props.titles[1] || t(\"el.transfer.titles.1\"));\n    const panelFilterPlaceholder = computed(() => props.filterPlaceholder || t(\"el.transfer.filterPlaceholder\"));\n    watch(() => props.modelValue, () => {\n      var _a;\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n    });\n    const optionRender = computed(() => option => {\n      if (props.renderContent) return props.renderContent(h, option);\n      if (slots.default) return slots.default({\n        option\n      });\n      return h(\"span\", option[props.props.label] || option[props.props.key]);\n    });\n    return {\n      ns,\n      sourceData,\n      targetData,\n      onSourceCheckedChange,\n      onTargetCheckedChange,\n      addToLeft,\n      addToRight,\n      ...toRefs(checkedState),\n      hasButtonTexts,\n      leftPanelTitle,\n      rightPanelTitle,\n      panelFilterPlaceholder,\n      clearQuery,\n      leftPanel,\n      rightPanel,\n      optionRender\n    };\n  }\n});\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 0\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_transfer_panel = resolveComponent(\"transfer-panel\");\n  const _component_arrow_left = resolveComponent(\"arrow-left\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_arrow_right = resolveComponent(\"arrow-right\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [createVNode(_component_transfer_panel, {\n    ref: \"leftPanel\",\n    data: _ctx.sourceData,\n    \"option-render\": _ctx.optionRender,\n    placeholder: _ctx.panelFilterPlaceholder,\n    title: _ctx.leftPanelTitle,\n    filterable: _ctx.filterable,\n    format: _ctx.format,\n    \"filter-method\": _ctx.filterMethod,\n    \"default-checked\": _ctx.leftDefaultChecked,\n    props: _ctx.props,\n    onCheckedChange: _ctx.onSourceCheckedChange\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"left-footer\")]),\n    _: 3\n  }, 8, [\"data\", \"option-render\", \"placeholder\", \"title\", \"filterable\", \"format\", \"filter-method\", \"default-checked\", \"props\", \"onCheckedChange\"]), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"buttons\"))\n  }, [createVNode(_component_el_button, {\n    type: \"primary\",\n    class: normalizeClass([_ctx.ns.e(\"button\"), _ctx.ns.is(\"with-texts\", _ctx.hasButtonTexts)]),\n    disabled: _ctx.rightChecked.length === 0,\n    onClick: _ctx.addToLeft\n  }, {\n    default: withCtx(() => [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_left)]),\n      _: 1\n    }), _ctx.buttonTexts[0] !== void 0 ? (openBlock(), createElementBlock(\"span\", _hoisted_1, toDisplayString(_ctx.buttonTexts[0]), 1)) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  }, 8, [\"class\", \"disabled\", \"onClick\"]), createVNode(_component_el_button, {\n    type: \"primary\",\n    class: normalizeClass([_ctx.ns.e(\"button\"), _ctx.ns.is(\"with-texts\", _ctx.hasButtonTexts)]),\n    disabled: _ctx.leftChecked.length === 0,\n    onClick: _ctx.addToRight\n  }, {\n    default: withCtx(() => [_ctx.buttonTexts[1] !== void 0 ? (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString(_ctx.buttonTexts[1]), 1)) : createCommentVNode(\"v-if\", true), createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_right)]),\n      _: 1\n    })]),\n    _: 1\n  }, 8, [\"class\", \"disabled\", \"onClick\"])], 2), createVNode(_component_transfer_panel, {\n    ref: \"rightPanel\",\n    data: _ctx.targetData,\n    \"option-render\": _ctx.optionRender,\n    placeholder: _ctx.panelFilterPlaceholder,\n    filterable: _ctx.filterable,\n    format: _ctx.format,\n    \"filter-method\": _ctx.filterMethod,\n    title: _ctx.rightPanelTitle,\n    \"default-checked\": _ctx.rightDefaultChecked,\n    props: _ctx.props,\n    onCheckedChange: _ctx.onTargetCheckedChange\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"right-footer\")]),\n    _: 3\n  }, 8, [\"data\", \"option-render\", \"placeholder\", \"filterable\", \"format\", \"filter-method\", \"title\", \"default-checked\", \"props\", \"onCheckedChange\"])], 2);\n}\nvar Transfer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Transfer as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","TransferPanel","ElButton","ElIcon","ArrowLeft","ArrowRight","props","data","type","default","titles","buttonTexts","filterPlaceholder","filterMethod","leftDefaultChecked","rightDefaultChecked","renderContent","modelValue","format","filterable","label","key","disabled","targetOrder","validator","val","includes","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","LEFT_CHECK_CHANGE_EVENT","RIGHT_CHECK_CHANGE_EVENT","setup","emit","slots","t","ns","useNamespace","inject","formItemContextKey","checkedState","reactive","leftChecked","rightChecked","propsKey","sourceData","targetData","useComputedData","onSourceCheckedChange","onTargetCheckedChange","addToLeft","addToRight","useMove","leftPanel","rightPanel","which","value","query","hasButtonTexts","length","leftPanelTitle","computed","rightPanelTitle","panelFilterPlaceholder","watch","optionRender","option","clearQuery","class","ref","placeholder","title","onCheckedChange","_createElementVNode","onClick","_ctx"],"sources":["../../../../../../packages/components/transfer/src/index.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <transfer-panel\n      ref=\"leftPanel\"\n      :data=\"sourceData\"\n      :option-render=\"optionRender\"\n      :placeholder=\"panelFilterPlaceholder\"\n      :title=\"leftPanelTitle\"\n      :filterable=\"filterable\"\n      :format=\"format\"\n      :filter-method=\"filterMethod\"\n      :default-checked=\"leftDefaultChecked\"\n      :props=\"props\"\n      @checked-change=\"onSourceCheckedChange\"\n    >\n      <slot name=\"left-footer\" />\n    </transfer-panel>\n    <div :class=\"ns.e('buttons')\">\n      <el-button\n        type=\"primary\"\n        :class=\"[ns.e('button'), ns.is('with-texts', hasButtonTexts)]\"\n        :disabled=\"rightChecked.length === 0\"\n        @click=\"addToLeft\"\n      >\n        <el-icon><arrow-left /></el-icon>\n        <span v-if=\"buttonTexts[0] !== undefined\">{{ buttonTexts[0] }}</span>\n      </el-button>\n      <el-button\n        type=\"primary\"\n        :class=\"[ns.e('button'), ns.is('with-texts', hasButtonTexts)]\"\n        :disabled=\"leftChecked.length === 0\"\n        @click=\"addToRight\"\n      >\n        <span v-if=\"buttonTexts[1] !== undefined\">{{ buttonTexts[1] }}</span>\n        <el-icon><arrow-right /></el-icon>\n      </el-button>\n    </div>\n    <transfer-panel\n      ref=\"rightPanel\"\n      :data=\"targetData\"\n      :option-render=\"optionRender\"\n      :placeholder=\"panelFilterPlaceholder\"\n      :filterable=\"filterable\"\n      :format=\"format\"\n      :filter-method=\"filterMethod\"\n      :title=\"rightPanelTitle\"\n      :default-checked=\"rightDefaultChecked\"\n      :props=\"props\"\n      @checked-change=\"onTargetCheckedChange\"\n    >\n      <slot name=\"right-footer\" />\n    </transfer-panel>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  h,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElIcon from '@element-plus/components/icon'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/tokens'\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils'\nimport TransferPanel from './transfer-panel.vue'\nimport { useComputedData } from './useComputedData'\nimport {\n  useCheckedChange,\n  LEFT_CHECK_CHANGE_EVENT,\n  RIGHT_CHECK_CHANGE_EVENT,\n} from './useCheckedChange'\nimport { useMove } from './useMove'\nimport { CHANGE_EVENT } from './transfer'\n\nimport type { PropType, VNode } from 'vue'\nimport type { FormItemContext } from '@element-plus/tokens'\nimport type { DataItem, Format, Key, Props, TargetOrder } from './transfer'\n\ntype TransferType = InstanceType<typeof TransferPanel>\n\nexport default defineComponent({\n  name: 'ElTransfer',\n\n  components: {\n    TransferPanel,\n    ElButton,\n    ElIcon,\n    ArrowLeft,\n    ArrowRight,\n  },\n\n  props: {\n    data: {\n      type: Array as PropType<DataItem[]>,\n      default: () => [],\n    },\n    titles: {\n      type: Array as PropType<any> as PropType<[string, string]>,\n      default: () => [],\n    },\n    buttonTexts: {\n      type: Array as PropType<any> as PropType<[string, string]>,\n      default: () => [],\n    },\n    filterPlaceholder: {\n      type: String,\n      default: '',\n    },\n    filterMethod: Function as PropType<\n      (query: string, item: DataItem) => boolean\n    >,\n    leftDefaultChecked: {\n      type: Array as PropType<Key[]>,\n      default: () => [],\n    },\n    rightDefaultChecked: {\n      type: Array as PropType<Key[]>,\n      default: () => [],\n    },\n    renderContent: Function as PropType<(h, option) => VNode>,\n    modelValue: {\n      type: Array as PropType<Key[]>,\n      default: () => [],\n    },\n    format: {\n      type: Object as PropType<Format>,\n      default: () => ({}),\n    },\n    filterable: {\n      type: Boolean,\n      default: false,\n    },\n    props: {\n      type: Object as PropType<Props>,\n      default: () => ({\n        label: 'label',\n        key: 'key',\n        disabled: 'disabled',\n      }),\n    },\n    targetOrder: {\n      type: String as PropType<TargetOrder>,\n      default: 'original',\n      validator: (val: string) => {\n        return ['original', 'push', 'unshift'].includes(val)\n      },\n    },\n  },\n\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    LEFT_CHECK_CHANGE_EVENT,\n    RIGHT_CHECK_CHANGE_EVENT,\n  ],\n\n  setup(props, { emit, slots }) {\n    const { t } = useLocale()\n    const ns = useNamespace('transfer')\n    const elFormItem = inject(formItemContextKey, {} as FormItemContext)\n\n    const checkedState = reactive({\n      leftChecked: [],\n      rightChecked: [],\n    })\n\n    const { propsKey, sourceData, targetData } = useComputedData(props)\n\n    const { onSourceCheckedChange, onTargetCheckedChange } = useCheckedChange(\n      checkedState,\n      emit\n    )\n\n    const { addToLeft, addToRight } = useMove(\n      props,\n      checkedState,\n      propsKey,\n      emit\n    )\n\n    const leftPanel = ref<TransferType>()\n    const rightPanel = ref<TransferType>()\n\n    const clearQuery = (which: 'left' | 'right') => {\n      switch (which) {\n        case 'left':\n          leftPanel.value!.query = ''\n          break\n        case 'right':\n          rightPanel.value!.query = ''\n          break\n      }\n    }\n\n    const hasButtonTexts = computed(() => props.buttonTexts.length === 2)\n\n    const leftPanelTitle = computed(\n      () => props.titles[0] || t('el.transfer.titles.0')\n    )\n\n    const rightPanelTitle = computed(\n      () => props.titles[1] || t('el.transfer.titles.1')\n    )\n\n    const panelFilterPlaceholder = computed(\n      () => props.filterPlaceholder || t('el.transfer.filterPlaceholder')\n    )\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change').catch((err) => debugWarn(err))\n      }\n    )\n\n    const optionRender = computed(() => (option) => {\n      if (props.renderContent) return props.renderContent(h, option)\n\n      if (slots.default) return slots.default({ option })\n\n      return h('span', option[props.props.label] || option[props.props.key])\n    })\n\n    return {\n      ns,\n      sourceData,\n      targetData,\n      onSourceCheckedChange,\n      onTargetCheckedChange,\n      addToLeft,\n      addToRight,\n\n      ...toRefs(checkedState),\n\n      hasButtonTexts,\n      leftPanelTitle,\n      rightPanelTitle,\n      panelFilterPlaceholder,\n      clearQuery,\n      leftPanel,\n      rightPanel,\n\n      optionRender,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}