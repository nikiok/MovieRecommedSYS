{"ast":null,"code":"import { defineComponent, provide, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, createTextVNode, toDisplayString, createCommentVNode, Fragment, renderList, createBlock } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport DescriptionsRow from './descriptions-row.mjs';\nimport { elDescriptionsKey } from './token.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElDescriptions\",\n  components: {\n    [DescriptionsRow.name]: DescriptionsRow\n  },\n  props: {\n    border: {\n      type: Boolean,\n      default: false\n    },\n    column: {\n      type: Number,\n      default: 3\n    },\n    direction: {\n      type: String,\n      default: \"horizontal\"\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    title: {\n      type: String,\n      default: \"\"\n    },\n    extra: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup(props, {\n    slots\n  }) {\n    provide(elDescriptionsKey, props);\n    const descriptionsSize = useSize();\n    const ns = useNamespace(\"descriptions\");\n    const descriptionKls = computed(() => [ns.b(), ns.is(ns.m(descriptionsSize.value), !!descriptionsSize.value)]);\n    const flattedChildren = children => {\n      const temp = Array.isArray(children) ? children : [children];\n      const res = [];\n      temp.forEach(child => {\n        if (Array.isArray(child.children)) {\n          res.push(...flattedChildren(child.children));\n        } else {\n          res.push(child);\n        }\n      });\n      return res;\n    };\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {};\n      }\n      if (span > count) {\n        node.props.span = count;\n      }\n      if (isLast) {\n        node.props.span = span;\n      }\n      return node;\n    };\n    const getRows = () => {\n      var _a;\n      const children = flattedChildren((_a = slots.default) == null ? void 0 : _a.call(slots)).filter(node => {\n        var _a2;\n        return ((_a2 = node == null ? void 0 : node.type) == null ? void 0 : _a2.name) === \"ElDescriptionsItem\";\n      });\n      const rows = [];\n      let temp = [];\n      let count = props.column;\n      let totalSpan = 0;\n      children.forEach((node, index) => {\n        var _a2;\n        const span = ((_a2 = node.props) == null ? void 0 : _a2.span) || 1;\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span;\n        }\n        if (index === children.length - 1) {\n          const lastSpan = props.column - totalSpan % props.column;\n          temp.push(filledNode(node, lastSpan, count, true));\n          rows.push(temp);\n          return;\n        }\n        if (span < count) {\n          count -= span;\n          temp.push(node);\n        } else {\n          temp.push(filledNode(node, span, count));\n          rows.push(temp);\n          count = props.column;\n          temp = [];\n        }\n      });\n      return rows;\n    };\n    return {\n      descriptionKls,\n      getRows,\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_descriptions_row = resolveComponent(\"el-descriptions-row\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.descriptionKls)\n  }, [_ctx.title || _ctx.extra || _ctx.$slots.title || _ctx.$slots.extra ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"header\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"title\"))\n  }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title), 1)])], 2), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"extra\"))\n  }, [renderSlot(_ctx.$slots, \"extra\", {}, () => [createTextVNode(toDisplayString(_ctx.extra), 1)])], 2)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"body\"))\n  }, [createElementVNode(\"table\", {\n    class: normalizeClass([_ctx.ns.e(\"table\"), _ctx.ns.is(\"bordered\", _ctx.border)])\n  }, [createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.getRows(), (row, index) => {\n    return openBlock(), createBlock(_component_el_descriptions_row, {\n      key: index,\n      row\n    }, null, 8, [\"row\"]);\n  }), 128))])], 2)], 2)], 2);\n}\nvar Descriptions = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Descriptions as default };","map":{"version":3,"mappings":";;;;;;;;;AAoCA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,UAAY;IAAA,CACTC,gBAAgBF,IAAO;EAAA;EAE1BG,KAAO;IACLC,MAAQ;MACNC,IAAM;MACNC,OAAS;IAAA;IAEXC,MAAQ;MACNF,IAAM;MACNC,OAAS;IAAA;IAEXE,SAAW;MACTH,IAAM;MACNC,OAAS;IAAA;IAEXG,IAAM;MACJJ,IAAM;MACNK,SAAW;IAAA;IAEbC,KAAO;MACLN,IAAM;MACNC,OAAS;IAAA;IAEXM,KAAO;MACLP,IAAM;MACNC,OAAS;IAAA;EAAA;EAGbO,MAAMV,KAAO;IAAEW;EAAS;IACtBC,QAAQC,iBAAmB;IAE3B,MAAMC,gBAAmB;IACzB,MAAMC,KAAKC,YAAa;IAElB,uBAAiBC,SAAS,MAAM,CACpCF,EAAG,MACHA,GAAGG,GAAGH,EAAG,GAAED,iBAAiBK,KAAQ,IAAC,CAACL,gBAAiB;IAGnD,wBAAmBM,QAAa;MACpC,MAAMC,IAAO,SAAMC,OAAQ,aAAYF,WAAW,CAACA;MACnD,MAAMG,GAAM;MACPF,aAASG,KAAU;QAClB,UAAMF,OAAQ,OAAMF,QAAW;UAC7BG,SAAK,GAAGE,gBAAgBD,KAAM;QAAA,CAC7B;UACLD,IAAIG,IAAK;QAAA;MAAA;MAGN;IAAA;IAGT,MAAMC,aAAaA,CAACC,MAAMC,IAAM,SAAOC,SAAS,KAAU;MACpD,KAACF,KAAK5B,KAAO;QACf4B,KAAK5B,KAAQ;MAAA;MAEf,IAAI6B,OAAOE,KAAO;QAChBH,KAAK5B,MAAM6B,IAAO;MAAA;MAEpB,IAAIC,MAAQ;QAEVF,KAAK5B,MAAM6B,IAAO;MAAA;MAEb;IAAA;IAGT,MAAMG,UAAUA,MAAM;MACd;MAGN,MAAMZ,QAAO;QACb,IAAWa;QACX,YAAkB;MAClB;MAES;MACD;MAEF,iBAAiB;MACN;MAAuBb;QAGlC;QAEF,UAAiB,eAAM,CAAUpB,sBAAkB;QACnD,SAAU,kBAAiB;UAC3BkC,SAAU;QACV;QAAA;UAGF,cAAkB;UACPb;UACTc,KAAKT,IAAK;UACL;QACL;QACA,QAAU;UACVK,SAAcF;UACPR;QAAA;UAAAA;UAIJc;UAAAJ;UAGFV;QAAA;MACL,CACA;MACA;IAAA;IAAA;MAAAe;;;;;AA3HE;AApBI,oBAAkBC,6BAAgB;EASpC;SAREC,+BAAM;IAAAC;MAENC,cAAOA,yBAAI;IAAAC;IACfF,wCAAqC;EAAA,IAAVG;IAAAH;GAIvB,GAFAI,UAAO,qBAAI,6DACf,EAAqC,MAAVD;IAAAH;MAYzBI,4CARAC,eAAO,gBAAI,mBAOP,QANA,uBAAQ,aAAe,GAAkBF;SAKvC;EAAA,8BAFJ,EAAkC;IADcH;EAAA,CAC1B","names":["_sfc_main","defineComponent","name","components","DescriptionsRow","props","border","type","default","column","direction","size","validator","title","extra","setup","slots","provide","elDescriptionsKey","descriptionsSize","ns","useNamespace","computed","is","value","children","temp","isArray","res","child","flattedChildren","push","filledNode","node","span","isLast","count","getRows","_a2","totalSpan","rows","descriptionKls","_sfc_render","_openBlock","class","_ctx","key","_createElementVNode","_renderSlot","_createTextVNode"],"sources":["../../../../../../packages/components/descriptions/src/index.vue"],"sourcesContent":["<template>\n  <div :class=\"descriptionKls\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      :class=\"ns.e('header')\"\n    >\n      <div :class=\"ns.e('title')\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div :class=\"ns.e('extra')\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div :class=\"ns.e('body')\">\n      <table :class=\"[ns.e('table'), ns.is('bordered', border)]\">\n        <tbody>\n          <template v-for=\"(row, index) in getRows()\" :key=\"index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, provide } from 'vue'\nimport { isValidComponentSize } from '@element-plus/utils'\nimport { useSize, useNamespace } from '@element-plus/hooks'\nimport DescriptionsRow from './descriptions-row.vue'\nimport { elDescriptionsKey } from './token'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport default defineComponent({\n  name: 'ElDescriptions',\n  components: {\n    [DescriptionsRow.name]: DescriptionsRow,\n  },\n  props: {\n    border: {\n      type: Boolean,\n      default: false,\n    },\n    column: {\n      type: Number,\n      default: 3,\n    },\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    title: {\n      type: String,\n      default: '',\n    },\n    extra: {\n      type: String,\n      default: '',\n    },\n  },\n  setup(props, { slots }) {\n    provide(elDescriptionsKey, props)\n\n    const descriptionsSize = useSize()\n    const ns = useNamespace('descriptions')\n\n    const descriptionKls = computed(() => [\n      ns.b(),\n      ns.is(ns.m(descriptionsSize.value), !!descriptionsSize.value),\n    ])\n\n    const flattedChildren = (children) => {\n      const temp = Array.isArray(children) ? children : [children]\n      const res = []\n      temp.forEach((child) => {\n        if (Array.isArray(child.children)) {\n          res.push(...flattedChildren(child.children))\n        } else {\n          res.push(child)\n        }\n      })\n      return res\n    }\n\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {}\n      }\n      if (span > count) {\n        node.props.span = count\n      }\n      if (isLast) {\n        // set the last span\n        node.props.span = span\n      }\n      return node\n    }\n\n    const getRows = () => {\n      const children = flattedChildren(slots.default?.()).filter(\n        (node) => node?.type?.name === 'ElDescriptionsItem'\n      )\n      const rows = []\n      let temp = []\n      let count = props.column\n      let totalSpan = 0 // all spans number of item\n\n      children.forEach((node, index) => {\n        const span = node.props?.span || 1\n\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span\n        }\n\n        if (index === children.length - 1) {\n          // calculate the last item span\n          const lastSpan = props.column - (totalSpan % props.column)\n          temp.push(filledNode(node, lastSpan, count, true))\n          rows.push(temp)\n          return\n        }\n\n        if (span < count) {\n          count -= span\n          temp.push(node)\n        } else {\n          temp.push(filledNode(node, span, count))\n          rows.push(temp)\n          count = props.column\n          temp = []\n        }\n      })\n\n      return rows\n    }\n\n    return {\n      descriptionKls,\n      getRows,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}