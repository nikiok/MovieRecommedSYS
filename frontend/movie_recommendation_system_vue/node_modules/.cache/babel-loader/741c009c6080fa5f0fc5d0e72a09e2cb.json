{"ast":null,"code":"import { markRaw, defineComponent, ref, effectScope, computed, watch, nextTick, onMounted, resolveComponent, openBlock, createBlock, Teleport, createVNode, Transition, withCtx, createElementVNode, normalizeClass, normalizeStyle, withModifiers, createCommentVNode, createElementBlock, Fragment, resolveDynamicComponent, renderList, withDirectives, vShow, renderSlot } from 'vue';\nimport { isNumber, useEventListener } from '@vueuse/core';\nimport { throttle } from 'lodash-unified';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { FullScreen, ScaleToOriginal, Close, ArrowLeft, ArrowRight, ZoomOut, ZoomIn, RefreshLeft, RefreshRight } from '@element-plus/icons-vue';\nimport { imageViewerProps, imageViewerEmits } from './image-viewer.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isFirefox } from '../../../utils/browser.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst Mode = {\n  CONTAIN: {\n    name: \"contain\",\n    icon: markRaw(FullScreen)\n  },\n  ORIGINAL: {\n    name: \"original\",\n    icon: markRaw(ScaleToOriginal)\n  }\n};\nconst mousewheelEventName = isFirefox() ? \"DOMMouseScroll\" : \"mousewheel\";\nconst _sfc_main = defineComponent({\n  name: \"ElImageViewer\",\n  components: {\n    ElIcon,\n    Close,\n    ArrowLeft,\n    ArrowRight,\n    ZoomOut,\n    ZoomIn,\n    RefreshLeft,\n    RefreshRight\n  },\n  props: imageViewerProps,\n  emits: imageViewerEmits,\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"image-viewer\");\n    const {\n      nextZIndex\n    } = useZIndex();\n    const wrapper = ref();\n    const imgRefs = ref([]);\n    const scopeEventListener = effectScope();\n    const loading = ref(true);\n    const index = ref(props.initialIndex);\n    const mode = ref(Mode.CONTAIN);\n    const transform = ref({\n      scale: 1,\n      deg: 0,\n      offsetX: 0,\n      offsetY: 0,\n      enableTransition: false\n    });\n    const isSingle = computed(() => {\n      const {\n        urlList\n      } = props;\n      return urlList.length <= 1;\n    });\n    const isFirst = computed(() => {\n      return index.value === 0;\n    });\n    const isLast = computed(() => {\n      return index.value === props.urlList.length - 1;\n    });\n    const currentImg = computed(() => {\n      return props.urlList[index.value];\n    });\n    const imgStyle = computed(() => {\n      const {\n        scale,\n        deg,\n        offsetX,\n        offsetY,\n        enableTransition\n      } = transform.value;\n      let translateX = offsetX / scale;\n      let translateY = offsetY / scale;\n      switch (deg % 360) {\n        case 90:\n        case -270:\n          ;\n          [translateX, translateY] = [translateY, -translateX];\n          break;\n        case 180:\n        case -180:\n          ;\n          [translateX, translateY] = [-translateX, -translateY];\n          break;\n        case 270:\n        case -90:\n          ;\n          [translateX, translateY] = [-translateY, translateX];\n          break;\n      }\n      const style = {\n        transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,\n        transition: enableTransition ? \"transform .3s\" : \"\"\n      };\n      if (mode.value.name === Mode.CONTAIN.name) {\n        style.maxWidth = style.maxHeight = \"100%\";\n      }\n      return style;\n    });\n    const computedZIndex = computed(() => {\n      return isNumber(props.zIndex) ? props.zIndex : nextZIndex();\n    });\n    function hide() {\n      unregisterEventListener();\n      emit(\"close\");\n    }\n    function registerEventListener() {\n      const keydownHandler = throttle(e => {\n        switch (e.code) {\n          case EVENT_CODE.esc:\n            hide();\n            break;\n          case EVENT_CODE.space:\n            toggleMode();\n            break;\n          case EVENT_CODE.left:\n            prev();\n            break;\n          case EVENT_CODE.up:\n            handleActions(\"zoomIn\");\n            break;\n          case EVENT_CODE.right:\n            next();\n            break;\n          case EVENT_CODE.down:\n            handleActions(\"zoomOut\");\n            break;\n        }\n      });\n      const mousewheelHandler = throttle(e => {\n        const delta = e.wheelDelta ? e.wheelDelta : -e.detail;\n        if (delta > 0) {\n          handleActions(\"zoomIn\", {\n            zoomRate: 1.2,\n            enableTransition: false\n          });\n        } else {\n          handleActions(\"zoomOut\", {\n            zoomRate: 1.2,\n            enableTransition: false\n          });\n        }\n      });\n      scopeEventListener.run(() => {\n        useEventListener(document, \"keydown\", keydownHandler);\n        useEventListener(document, mousewheelEventName, mousewheelHandler);\n      });\n    }\n    function unregisterEventListener() {\n      scopeEventListener.stop();\n    }\n    function handleImgLoad() {\n      loading.value = false;\n    }\n    function handleImgError(e) {\n      loading.value = false;\n      e.target.alt = t(\"el.image.error\");\n    }\n    function handleMouseDown(e) {\n      if (loading.value || e.button !== 0 || !wrapper.value) return;\n      transform.value.enableTransition = false;\n      const {\n        offsetX,\n        offsetY\n      } = transform.value;\n      const startX = e.pageX;\n      const startY = e.pageY;\n      const dragHandler = throttle(ev => {\n        transform.value = {\n          ...transform.value,\n          offsetX: offsetX + ev.pageX - startX,\n          offsetY: offsetY + ev.pageY - startY\n        };\n      });\n      const removeMousemove = useEventListener(document, \"mousemove\", dragHandler);\n      useEventListener(document, \"mouseup\", () => {\n        removeMousemove();\n      });\n      e.preventDefault();\n    }\n    function reset() {\n      transform.value = {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      };\n    }\n    function toggleMode() {\n      if (loading.value) return;\n      const modeNames = Object.keys(Mode);\n      const modeValues = Object.values(Mode);\n      const currentMode = mode.value.name;\n      const index2 = modeValues.findIndex(i => i.name === currentMode);\n      const nextIndex = (index2 + 1) % modeNames.length;\n      mode.value = Mode[modeNames[nextIndex]];\n      reset();\n    }\n    function prev() {\n      if (isFirst.value && !props.infinite) return;\n      const len = props.urlList.length;\n      index.value = (index.value - 1 + len) % len;\n    }\n    function next() {\n      if (isLast.value && !props.infinite) return;\n      const len = props.urlList.length;\n      index.value = (index.value + 1) % len;\n    }\n    function handleActions(action, options = {}) {\n      if (loading.value) return;\n      const {\n        zoomRate,\n        rotateDeg,\n        enableTransition\n      } = {\n        zoomRate: 1.4,\n        rotateDeg: 90,\n        enableTransition: true,\n        ...options\n      };\n      switch (action) {\n        case \"zoomOut\":\n          if (transform.value.scale > 0.2) {\n            transform.value.scale = Number.parseFloat((transform.value.scale / zoomRate).toFixed(3));\n          }\n          break;\n        case \"zoomIn\":\n          if (transform.value.scale < 7) {\n            transform.value.scale = Number.parseFloat((transform.value.scale * zoomRate).toFixed(3));\n          }\n          break;\n        case \"clockwise\":\n          transform.value.deg += rotateDeg;\n          break;\n        case \"anticlockwise\":\n          transform.value.deg -= rotateDeg;\n          break;\n      }\n      transform.value.enableTransition = enableTransition;\n    }\n    watch(currentImg, () => {\n      nextTick(() => {\n        const $img = imgRefs.value[0];\n        if (!($img == null ? void 0 : $img.complete)) {\n          loading.value = true;\n        }\n      });\n    });\n    watch(index, val => {\n      reset();\n      emit(\"switch\", val);\n    });\n    onMounted(() => {\n      var _a, _b;\n      registerEventListener();\n      (_b = (_a = wrapper.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    });\n    return {\n      index,\n      wrapper,\n      imgRefs,\n      isSingle,\n      isFirst,\n      isLast,\n      currentImg,\n      imgStyle,\n      mode,\n      computedZIndex,\n      handleActions,\n      prev,\n      next,\n      hide,\n      toggleMode,\n      handleImgLoad,\n      handleImgError,\n      handleMouseDown,\n      ns\n    };\n  }\n});\nconst _hoisted_1 = [\"src\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_close = resolveComponent(\"close\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_arrow_left = resolveComponent(\"arrow-left\");\n  const _component_arrow_right = resolveComponent(\"arrow-right\");\n  const _component_zoom_out = resolveComponent(\"zoom-out\");\n  const _component_zoom_in = resolveComponent(\"zoom-in\");\n  const _component_refresh_left = resolveComponent(\"refresh-left\");\n  const _component_refresh_right = resolveComponent(\"refresh-right\");\n  return openBlock(), createBlock(Teleport, {\n    to: \"body\",\n    disabled: !_ctx.teleported\n  }, [createVNode(Transition, {\n    name: \"viewer-fade\",\n    appear: \"\"\n  }, {\n    default: withCtx(() => [createElementVNode(\"div\", {\n      ref: \"wrapper\",\n      tabindex: -1,\n      class: normalizeClass(_ctx.ns.e(\"wrapper\")),\n      style: normalizeStyle({\n        zIndex: _ctx.computedZIndex\n      })\n    }, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"mask\")),\n      onClick: _cache[0] || (_cache[0] = withModifiers($event => _ctx.hideOnClickModal && _ctx.hide(), [\"self\"]))\n    }, null, 2), createCommentVNode(\" CLOSE \"), createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.e(\"btn\"), _ctx.ns.e(\"close\")]),\n      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.hide && _ctx.hide(...args))\n    }, [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    })], 2), createCommentVNode(\" ARROW \"), !_ctx.isSingle ? (openBlock(), createElementBlock(Fragment, {\n      key: 0\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.e(\"btn\"), _ctx.ns.e(\"prev\"), _ctx.ns.is(\"disabled\", !_ctx.infinite && _ctx.isFirst)]),\n      onClick: _cache[2] || (_cache[2] = (...args) => _ctx.prev && _ctx.prev(...args))\n    }, [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_left)]),\n      _: 1\n    })], 2), createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.e(\"btn\"), _ctx.ns.e(\"next\"), _ctx.ns.is(\"disabled\", !_ctx.infinite && _ctx.isLast)]),\n      onClick: _cache[3] || (_cache[3] = (...args) => _ctx.next && _ctx.next(...args))\n    }, [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_right)]),\n      _: 1\n    })], 2)], 64)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" ACTIONS \"), createElementVNode(\"div\", {\n      class: normalizeClass([_ctx.ns.e(\"btn\"), _ctx.ns.e(\"actions\")])\n    }, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"actions__inner\"))\n    }, [createVNode(_component_el_icon, {\n      onClick: _cache[4] || (_cache[4] = $event => _ctx.handleActions(\"zoomOut\"))\n    }, {\n      default: withCtx(() => [createVNode(_component_zoom_out)]),\n      _: 1\n    }), createVNode(_component_el_icon, {\n      onClick: _cache[5] || (_cache[5] = $event => _ctx.handleActions(\"zoomIn\"))\n    }, {\n      default: withCtx(() => [createVNode(_component_zoom_in)]),\n      _: 1\n    }), createElementVNode(\"i\", {\n      class: normalizeClass(_ctx.ns.e(\"actions__divider\"))\n    }, null, 2), createVNode(_component_el_icon, {\n      onClick: _ctx.toggleMode\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.mode.icon)))]),\n      _: 1\n    }, 8, [\"onClick\"]), createElementVNode(\"i\", {\n      class: normalizeClass(_ctx.ns.e(\"actions__divider\"))\n    }, null, 2), createVNode(_component_el_icon, {\n      onClick: _cache[6] || (_cache[6] = $event => _ctx.handleActions(\"anticlockwise\"))\n    }, {\n      default: withCtx(() => [createVNode(_component_refresh_left)]),\n      _: 1\n    }), createVNode(_component_el_icon, {\n      onClick: _cache[7] || (_cache[7] = $event => _ctx.handleActions(\"clockwise\"))\n    }, {\n      default: withCtx(() => [createVNode(_component_refresh_right)]),\n      _: 1\n    })], 2)], 2), createCommentVNode(\" CANVAS \"), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"canvas\"))\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.urlList, (url, i) => {\n      return withDirectives((openBlock(), createElementBlock(\"img\", {\n        ref_for: true,\n        ref: el => _ctx.imgRefs[i] = el,\n        key: url,\n        src: url,\n        style: normalizeStyle(_ctx.imgStyle),\n        class: normalizeClass(_ctx.ns.e(\"img\")),\n        onLoad: _cache[8] || (_cache[8] = (...args) => _ctx.handleImgLoad && _ctx.handleImgLoad(...args)),\n        onError: _cache[9] || (_cache[9] = (...args) => _ctx.handleImgError && _ctx.handleImgError(...args)),\n        onMousedown: _cache[10] || (_cache[10] = (...args) => _ctx.handleMouseDown && _ctx.handleMouseDown(...args))\n      }, null, 46, _hoisted_1)), [[vShow, i === _ctx.index]]);\n    }), 128))], 2), renderSlot(_ctx.$slots, \"default\")], 6)]),\n    _: 3\n  })], 8, [\"disabled\"]);\n}\nvar ImageViewer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ImageViewer as default };","map":{"version":3,"mappings":"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","names":["Mode","CONTAIN","name","icon","markRaw","ORIGINAL","mousewheelEventName","isFirefox","_sfc_main","defineComponent","components","ElIcon","Close","ArrowLeft","ArrowRight","ZoomOut","ZoomIn","RefreshLeft","RefreshRight","props","emits","setup","emit","t","ns","useNamespace","nextZIndex","wrapper","imgRefs","ref","scopeEventListener","loading","transform","scale","deg","offsetX","offsetY","enableTransition","computed","urlList","length","index","value","translateX","translateY","style","transition","mode","maxHeight","isNumber","zIndex","unregisterEventListener","throttle","e","EVENT_CODE","hide","toggleMode","prev","handleActions","next","delta","zoomRate","run","useEventListener","document","target","button","startX","startY","ev","pageX","pageY","removeMousemove","Object","keys","values","index2","modeValues","i","modeNames","reset","len","options","rotateDeg","Number","toFixed","watch","currentImg","nextTick","val","onMounted","registerEventListener","isSingle","isFirst","isLast","imgStyle","computedZIndex","handleImgLoad","handleImgError","handleMouseDown","_openBlock","to","disabled","appear","default","tabindex","class","_normalizeClass","_createElementVNode","onClick","_createCommentVNode","key","_ctx","_createVNode","ref_for","src","_normalizeStyle","onLoad","onError","onMousedown","_hoisted_1"],"sources":["../../../../../../packages/components/image-viewer/src/image-viewer.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!teleported\">\n    <transition name=\"viewer-fade\" appear>\n      <div\n        ref=\"wrapper\"\n        :tabindex=\"-1\"\n        :class=\"ns.e('wrapper')\"\n        :style=\"{ zIndex: computedZIndex }\"\n      >\n        <div :class=\"ns.e('mask')\" @click.self=\"hideOnClickModal && hide()\" />\n\n        <!-- CLOSE -->\n        <span :class=\"[ns.e('btn'), ns.e('close')]\" @click=\"hide\">\n          <el-icon><close /></el-icon>\n        </span>\n\n        <!-- ARROW -->\n        <template v-if=\"!isSingle\">\n          <span\n            :class=\"[\n              ns.e('btn'),\n              ns.e('prev'),\n              ns.is('disabled', !infinite && isFirst),\n            ]\"\n            @click=\"prev\"\n          >\n            <el-icon><arrow-left /></el-icon>\n          </span>\n          <span\n            :class=\"[\n              ns.e('btn'),\n              ns.e('next'),\n              ns.is('disabled', !infinite && isLast),\n            ]\"\n            @click=\"next\"\n          >\n            <el-icon><arrow-right /></el-icon>\n          </span>\n        </template>\n        <!-- ACTIONS -->\n        <div :class=\"[ns.e('btn'), ns.e('actions')]\">\n          <div :class=\"ns.e('actions__inner')\">\n            <el-icon @click=\"handleActions('zoomOut')\">\n              <zoom-out />\n            </el-icon>\n            <el-icon @click=\"handleActions('zoomIn')\">\n              <zoom-in />\n            </el-icon>\n            <i :class=\"ns.e('actions__divider')\" />\n            <el-icon @click=\"toggleMode\">\n              <component :is=\"mode.icon\" />\n            </el-icon>\n            <i :class=\"ns.e('actions__divider')\" />\n            <el-icon @click=\"handleActions('anticlockwise')\">\n              <refresh-left />\n            </el-icon>\n            <el-icon @click=\"handleActions('clockwise')\">\n              <refresh-right />\n            </el-icon>\n          </div>\n        </div>\n        <!-- CANVAS -->\n        <div :class=\"ns.e('canvas')\">\n          <img\n            v-for=\"(url, i) in urlList\"\n            v-show=\"i === index\"\n            :ref=\"(el) => (imgRefs[i] = el)\"\n            :key=\"url\"\n            :src=\"url\"\n            :style=\"imgStyle\"\n            :class=\"ns.e('img')\"\n            @load=\"handleImgLoad\"\n            @error=\"handleImgError\"\n            @mousedown=\"handleMouseDown\"\n          />\n        </div>\n        <slot />\n      </div>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  ref,\n  onMounted,\n  watch,\n  nextTick,\n  effectScope,\n  markRaw,\n} from 'vue'\nimport { useEventListener, isNumber } from '@vueuse/core'\nimport { throttle } from 'lodash-unified'\nimport ElIcon from '@element-plus/components/icon'\nimport { useLocale, useNamespace, useZIndex } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { isFirefox } from '@element-plus/utils'\nimport {\n  Close,\n  ArrowLeft,\n  ArrowRight,\n  ZoomOut,\n  ZoomIn,\n  RefreshLeft,\n  RefreshRight,\n  FullScreen,\n  ScaleToOriginal,\n} from '@element-plus/icons-vue'\nimport { imageViewerProps, imageViewerEmits } from './image-viewer'\n\nimport type { CSSProperties } from 'vue'\n\nconst Mode = {\n  CONTAIN: {\n    name: 'contain',\n    icon: markRaw(FullScreen),\n  },\n  ORIGINAL: {\n    name: 'original',\n    icon: markRaw(ScaleToOriginal),\n  },\n}\n\nconst mousewheelEventName = isFirefox() ? 'DOMMouseScroll' : 'mousewheel'\nexport type ImageViewerAction =\n  | 'zoomIn'\n  | 'zoomOut'\n  | 'clockwise'\n  | 'anticlockwise'\n\nexport default defineComponent({\n  name: 'ElImageViewer',\n  components: {\n    ElIcon,\n    Close,\n    ArrowLeft,\n    ArrowRight,\n    ZoomOut,\n    ZoomIn,\n    RefreshLeft,\n    RefreshRight,\n  },\n  props: imageViewerProps,\n  emits: imageViewerEmits,\n\n  setup(props, { emit }) {\n    const { t } = useLocale()\n    const ns = useNamespace('image-viewer')\n    const { nextZIndex } = useZIndex()\n    const wrapper = ref<HTMLDivElement>()\n    const imgRefs = ref<any[]>([])\n\n    const scopeEventListener = effectScope()\n\n    const loading = ref(true)\n    const index = ref(props.initialIndex)\n    const mode = ref(Mode.CONTAIN)\n    const transform = ref({\n      scale: 1,\n      deg: 0,\n      offsetX: 0,\n      offsetY: 0,\n      enableTransition: false,\n    })\n\n    const isSingle = computed(() => {\n      const { urlList } = props\n      return urlList.length <= 1\n    })\n\n    const isFirst = computed(() => {\n      return index.value === 0\n    })\n\n    const isLast = computed(() => {\n      return index.value === props.urlList.length - 1\n    })\n\n    const currentImg = computed(() => {\n      return props.urlList[index.value]\n    })\n\n    const imgStyle = computed(() => {\n      const { scale, deg, offsetX, offsetY, enableTransition } = transform.value\n      let translateX = offsetX / scale\n      let translateY = offsetY / scale\n\n      switch (deg % 360) {\n        case 90:\n        case -270:\n          ;[translateX, translateY] = [translateY, -translateX]\n          break\n        case 180:\n        case -180:\n          ;[translateX, translateY] = [-translateX, -translateY]\n          break\n        case 270:\n        case -90:\n          ;[translateX, translateY] = [-translateY, translateX]\n          break\n      }\n\n      const style: CSSProperties = {\n        transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,\n        transition: enableTransition ? 'transform .3s' : '',\n      }\n      if (mode.value.name === Mode.CONTAIN.name) {\n        style.maxWidth = style.maxHeight = '100%'\n      }\n      return style\n    })\n\n    const computedZIndex = computed(() => {\n      return isNumber(props.zIndex) ? props.zIndex : nextZIndex()\n    })\n\n    function hide() {\n      unregisterEventListener()\n      emit('close')\n    }\n\n    function registerEventListener() {\n      const keydownHandler = throttle((e: KeyboardEvent) => {\n        switch (e.code) {\n          // ESC\n          case EVENT_CODE.esc:\n            hide()\n            break\n          // SPACE\n          case EVENT_CODE.space:\n            toggleMode()\n            break\n          // LEFT_ARROW\n          case EVENT_CODE.left:\n            prev()\n            break\n          // UP_ARROW\n          case EVENT_CODE.up:\n            handleActions('zoomIn')\n            break\n          // RIGHT_ARROW\n          case EVENT_CODE.right:\n            next()\n            break\n          // DOWN_ARROW\n          case EVENT_CODE.down:\n            handleActions('zoomOut')\n            break\n        }\n      })\n      const mousewheelHandler = throttle(\n        (e: WheelEvent | any /* TODO: wheelDelta is deprecated */) => {\n          const delta = e.wheelDelta ? e.wheelDelta : -e.detail\n          if (delta > 0) {\n            handleActions('zoomIn', {\n              zoomRate: 1.2,\n              enableTransition: false,\n            })\n          } else {\n            handleActions('zoomOut', {\n              zoomRate: 1.2,\n              enableTransition: false,\n            })\n          }\n        }\n      )\n\n      scopeEventListener.run(() => {\n        useEventListener(document, 'keydown', keydownHandler)\n        useEventListener(document, mousewheelEventName, mousewheelHandler)\n      })\n    }\n\n    function unregisterEventListener() {\n      scopeEventListener.stop()\n    }\n\n    function handleImgLoad() {\n      loading.value = false\n    }\n\n    function handleImgError(e: Event) {\n      loading.value = false\n      ;(e.target as HTMLImageElement).alt = t('el.image.error')\n    }\n\n    function handleMouseDown(e: MouseEvent) {\n      if (loading.value || e.button !== 0 || !wrapper.value) return\n      transform.value.enableTransition = false\n\n      const { offsetX, offsetY } = transform.value\n      const startX = e.pageX\n      const startY = e.pageY\n\n      const dragHandler = throttle((ev: MouseEvent) => {\n        transform.value = {\n          ...transform.value,\n          offsetX: offsetX + ev.pageX - startX,\n          offsetY: offsetY + ev.pageY - startY,\n        }\n      })\n      const removeMousemove = useEventListener(\n        document,\n        'mousemove',\n        dragHandler\n      )\n      useEventListener(document, 'mouseup', () => {\n        removeMousemove()\n      })\n\n      e.preventDefault()\n    }\n\n    function reset() {\n      transform.value = {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false,\n      }\n    }\n\n    function toggleMode() {\n      if (loading.value) return\n\n      const modeNames = Object.keys(Mode)\n      const modeValues = Object.values(Mode)\n      const currentMode = mode.value.name\n      const index = modeValues.findIndex((i) => i.name === currentMode)\n      const nextIndex = (index + 1) % modeNames.length\n      mode.value = Mode[modeNames[nextIndex]]\n      reset()\n    }\n\n    function prev() {\n      if (isFirst.value && !props.infinite) return\n      const len = props.urlList.length\n      index.value = (index.value - 1 + len) % len\n    }\n\n    function next() {\n      if (isLast.value && !props.infinite) return\n      const len = props.urlList.length\n      index.value = (index.value + 1) % len\n    }\n\n    function handleActions(action: ImageViewerAction, options = {}) {\n      if (loading.value) return\n      const { zoomRate, rotateDeg, enableTransition } = {\n        zoomRate: 1.4,\n        rotateDeg: 90,\n        enableTransition: true,\n        ...options,\n      }\n      switch (action) {\n        case 'zoomOut':\n          if (transform.value.scale > 0.2) {\n            transform.value.scale = Number.parseFloat(\n              (transform.value.scale / zoomRate).toFixed(3)\n            )\n          }\n          break\n        case 'zoomIn':\n          if (transform.value.scale < 7) {\n            transform.value.scale = Number.parseFloat(\n              (transform.value.scale * zoomRate).toFixed(3)\n            )\n          }\n          break\n        case 'clockwise':\n          transform.value.deg += rotateDeg\n          break\n        case 'anticlockwise':\n          transform.value.deg -= rotateDeg\n          break\n      }\n      transform.value.enableTransition = enableTransition\n    }\n\n    watch(currentImg, () => {\n      nextTick(() => {\n        const $img = imgRefs.value[0]\n        if (!$img?.complete) {\n          loading.value = true\n        }\n      })\n    })\n\n    watch(index, (val) => {\n      reset()\n      emit('switch', val)\n    })\n\n    onMounted(() => {\n      registerEventListener()\n      // add tabindex then wrapper can be focusable via Javascript\n      // focus wrapper so arrow key can't cause inner scroll behavior underneath\n      wrapper.value?.focus?.()\n    })\n\n    return {\n      index,\n      wrapper,\n      imgRefs,\n      isSingle,\n      isFirst,\n      isLast,\n      currentImg,\n      imgStyle,\n      mode,\n      computedZIndex,\n      handleActions,\n      prev,\n      next,\n      hide,\n      toggleMode,\n      handleImgLoad,\n      handleImgError,\n      handleMouseDown,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}