{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, computed, watch, reactive, markRaw, withDirectives, openBlock, createElementBlock, renderSlot, vShow, createCommentVNode } from 'vue';\nimport { eagerComputed } from '@vueuse/core';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport { tabPaneProps } from './tab-pane.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst COMPONENT_NAME = \"ElTabPane\";\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabPaneProps,\n  setup(props) {\n    const instance = getCurrentInstance();\n    const tabsRoot = inject(tabsRootContextKey);\n    if (!tabsRoot) throwError(COMPONENT_NAME, `must use with ElTabs`);\n    const index = ref();\n    const isClosable = computed(() => props.closable || tabsRoot.props.closable);\n    const active = eagerComputed(() => tabsRoot.currentName.value === (props.name || index.value));\n    const loaded = ref(active.value);\n    const paneName = computed(() => props.name || index.value);\n    const shouldBeRender = eagerComputed(() => !props.lazy || loaded.value || active.value);\n    watch(active, val => {\n      if (val) loaded.value = true;\n    });\n    tabsRoot.updatePaneState(reactive({\n      uid: instance.uid,\n      instance: markRaw(instance),\n      props,\n      paneName,\n      active,\n      index,\n      isClosable\n    }));\n    return {\n      active,\n      paneName,\n      shouldBeRender\n    };\n  }\n});\nconst _hoisted_1 = [\"id\", \"aria-hidden\", \"aria-labelledby\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _ctx.shouldBeRender ? withDirectives((openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    id: `pane-${_ctx.paneName}`,\n    class: \"el-tab-pane\",\n    role: \"tabpanel\",\n    \"aria-hidden\": !_ctx.active,\n    \"aria-labelledby\": `tab-${_ctx.paneName}`\n  }, [renderSlot(_ctx.$slots, \"default\")], 8, _hoisted_1)), [[vShow, _ctx.active]]) : createCommentVNode(\"v-if\", true);\n}\nvar TabPane = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TabPane as default };","map":{"version":3,"mappings":";;;;;;;;AA6BA,MAAMA,cAAiB;AAEvB,MAAKC,YAAaC,eAAa;EAC7BC,IAAM;EACNC,KAAO;EACPC,MAAMD,KAAO;IACX,MAAME,QAAW;IACjB,MAAMC,WAAWC,MAAO;IACxB,IAAI,CAACD,UAAUE,WAAWT,cAAgB;IAE1C,MAAMU,KAAQ;IACd,MAAMC,aAAaC,QAAS,OAAMR,KAAM,aAAYG,SAASH,KAAM;IAC7D,eAASS,cACb,MAAMN,SAASO,YAAYC,KAAW,YAAMZ,QAAQO,KAAM;IAEtD,eAASM,IAAIC,MAAO;IAC1B,MAAMC,QAAW,YAAS,MAAMd,MAAMD,QAAQO,KAAM;IAC9C,uBAAiBG,cACrB,MAAM,CAACT,MAAMe,IAAQ,WAAOJ,SAASE,MAAO;IAGxCG,cAASC,GAAQ;MACjB,SAAKC,OAAOP,KAAQ;IAAA;IAG1BR,SAASgB,gBACPC,QAAS;MACPC,KAAKnB,QAAS;MACdA,UAAUoB,OAAQ;MAClBtB;MACAc;MACAD;MACAP;MACAC;IAAA;IAIG;MACLM;MACAC;MACAS;IAAA;EAAA;AAAA;;;EAnEI,0DADRC,kBAUM;IAAAC;IAPHC,IAAY;IACbC,KAAM;IACNC,IAAK;IACJ,eAAW,CAAGC;IACd,mBAAwB;EAAA,IAEzBC,UAAQ,6CAPA","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","props","setup","instance","tabsRoot","inject","throwError","index","isClosable","computed","eagerComputed","currentName","value","ref","active","paneName","lazy","watch","val","loaded","updatePaneState","reactive","uid","markRaw","shouldBeRender","_createElementBlock","key","id","class","role","_ctx","_renderSlot"],"sources":["../../../../../../packages/components/tabs/src/tab-pane.vue"],"sourcesContent":["<template>\n  <div\n    v-if=\"shouldBeRender\"\n    v-show=\"active\"\n    :id=\"`pane-${paneName}`\"\n    class=\"el-tab-pane\"\n    role=\"tabpanel\"\n    :aria-hidden=\"!active\"\n    :aria-labelledby=\"`tab-${paneName}`\"\n  >\n    <slot />\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  inject,\n  getCurrentInstance,\n  watch,\n  markRaw,\n  reactive,\n} from 'vue'\nimport { eagerComputed } from '@vueuse/core'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils'\nimport { tabPaneProps } from './tab-pane'\n\nconst COMPONENT_NAME = 'ElTabPane'\n\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: tabPaneProps,\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const tabsRoot = inject(tabsRootContextKey)\n    if (!tabsRoot) throwError(COMPONENT_NAME, `must use with ElTabs`)\n\n    const index = ref<string>()\n    const isClosable = computed(() => props.closable || tabsRoot.props.closable)\n    const active = eagerComputed(\n      () => tabsRoot.currentName.value === (props.name || index.value)\n    )\n    const loaded = ref(active.value)\n    const paneName = computed(() => props.name || index.value)\n    const shouldBeRender = eagerComputed(\n      () => !props.lazy || loaded.value || active.value\n    )\n\n    watch(active, (val) => {\n      if (val) loaded.value = true\n    })\n\n    tabsRoot.updatePaneState(\n      reactive({\n        uid: instance.uid,\n        instance: markRaw(instance),\n        props,\n        paneName,\n        active,\n        index,\n        isClosable,\n      })\n    )\n\n    return {\n      active,\n      paneName,\n      shouldBeRender,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}