{"ast":null,"code":"import { defineComponent, getCurrentInstance, shallowRef, ref, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElColorAlphaSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const instance = getCurrentInstance();\n    const thumb = shallowRef(null);\n    const bar = shallowRef(null);\n    const thumbLeft = ref(0);\n    const thumbTop = ref(0);\n    const background = ref(null);\n    watch(() => props.color.get(\"alpha\"), () => {\n      update();\n    });\n    watch(() => props.color.value, () => {\n      update();\n    });\n    function getThumbLeft() {\n      if (props.vertical) return 0;\n      const el = instance.vnode.el;\n      const alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);\n    }\n    function getThumbTop() {\n      const el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      const alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);\n    }\n    function getBackground() {\n      if (props.color && props.color.value) {\n        const {\n          r,\n          g,\n          b\n        } = props.color.toRgb();\n        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`;\n      }\n      return null;\n    }\n    function handleClick(event) {\n      const target = event.target;\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      if (!props.vertical) {\n        let left = clientX - rect.left;\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        props.color.set(\"alpha\", Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));\n      } else {\n        let top = clientY - rect.top;\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        props.color.set(\"alpha\", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));\n      }\n    }\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n      background.value = getBackground();\n    }\n    onMounted(() => {\n      const dragConfig = {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      thumb,\n      bar,\n      thumbLeft,\n      thumbTop,\n      background,\n      handleClick,\n      update\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-color-alpha-slider\", {\n      \"is-vertical\": _ctx.vertical\n    }])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    class: \"el-color-alpha-slider__bar\",\n    style: normalizeStyle({\n      background: _ctx.background\n    }),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, null, 4), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    class: \"el-color-alpha-slider__thumb\",\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 4)], 2);\n}\nvar AlphaSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { AlphaSlider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","vertical","default","setup","instance","thumb","shallowRef","bar","thumbLeft","ref","thumbTop","background","watch","update","vnode","get","el","round","alpha","offsetWidth","offsetHeight","value","r","g","b","event","target","handleDrag","rect","clientX","clientY","getClientXY","left","Math","min","width","top","height","onMounted","dragConfig","drag","end","draggable","handleClick","_createElementBlock","class","_normalizeClass","_createElementVNode","style","onClick","_cache","_ctx"],"sources":["../../../../../../../packages/components/color-picker/src/components/alpha-slider.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-alpha-slider\" :class=\"{ 'is-vertical': vertical }\">\n    <div\n      ref=\"bar\"\n      class=\"el-color-alpha-slider__bar\"\n      :style=\"{\n        background,\n      }\"\n      @click=\"handleClick\"\n    />\n    <div\n      ref=\"thumb\"\n      class=\"el-color-alpha-slider__thumb\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  watch,\n  ref,\n  onMounted,\n  getCurrentInstance,\n  shallowRef,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElColorAlphaSlider',\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = shallowRef<Nullable<HTMLElement>>(null)\n    const bar = shallowRef<Nullable<HTMLElement>>(null)\n\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    const background = ref<Nullable<string>>(null)\n\n    watch(\n      () => props.color.get('alpha'),\n      () => {\n        update()\n      }\n    )\n    watch(\n      () => props.color.value,\n      () => {\n        update()\n      }\n    )\n\n    //methods\n    function getThumbLeft() {\n      if (props.vertical) return 0\n      const el = instance.vnode.el\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 100\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el\n      if (!props.vertical) return 0\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 100\n      )\n    }\n\n    function getBackground() {\n      if (props.color && props.color.value) {\n        const { r, g, b } = props.color.toRgb()\n        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`\n      }\n      return null\n    }\n\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((left - thumb.value.offsetWidth / 2) /\n              (rect.width - thumb.value.offsetWidth)) *\n              100\n          )\n        )\n      } else {\n        let top = clientY - rect.top\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((top - thumb.value.offsetHeight / 2) /\n              (rect.height - thumb.value.offsetHeight)) *\n              100\n          )\n        )\n      }\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n      background.value = getBackground()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      thumb,\n      bar,\n      thumbLeft,\n      thumbTop,\n      background,\n      handleClick,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}