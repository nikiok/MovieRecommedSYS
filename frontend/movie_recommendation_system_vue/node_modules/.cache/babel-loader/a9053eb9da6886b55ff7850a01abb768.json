{"ast":null,"code":"import { defineComponent, ref, computed, nextTick, onMounted, watch, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../directives/index.mjs';\nimport { ElScrollbar } from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport { getTimeLists } from './useTimePicker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../../directives/repeat-click/index.mjs';\nconst _sfc_main = defineComponent({\n  directives: {\n    repeatClick: RepeatClick\n  },\n  components: {\n    ElScrollbar,\n    ElIcon,\n    ArrowUp,\n    ArrowDown\n  },\n  props: {\n    role: {\n      type: String,\n      required: true\n    },\n    spinnerDate: {\n      type: Object,\n      required: true\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      default: \"\"\n    },\n    disabledHours: {\n      type: Function\n    },\n    disabledMinutes: {\n      type: Function\n    },\n    disabledSeconds: {\n      type: Function\n    }\n  },\n  emits: [\"change\", \"select-range\", \"set-option\"],\n  setup(props, ctx) {\n    let isScrolling = false;\n    const debouncedResetScroll = debounce(type => {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    const currentScrollbar = ref(null);\n    const listHoursRef = ref(null);\n    const listMinutesRef = ref(null);\n    const listSecondsRef = ref(null);\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    const spinnerItems = computed(() => {\n      const arr = [\"hours\", \"minutes\", \"seconds\"];\n      return props.showSeconds ? arr : arr.slice(0, 2);\n    });\n    const hours = computed(() => {\n      return props.spinnerDate.hour();\n    });\n    const minutes = computed(() => {\n      return props.spinnerDate.minute();\n    });\n    const seconds = computed(() => {\n      return props.spinnerDate.second();\n    });\n    const timePartsMap = computed(() => ({\n      hours,\n      minutes,\n      seconds\n    }));\n    const hoursList = computed(() => {\n      return getHoursList(props.role);\n    });\n    const minutesList = computed(() => {\n      return getMinutesList(hours.value, props.role);\n    });\n    const secondsList = computed(() => {\n      return getSecondsList(hours.value, minutes.value, props.role);\n    });\n    const listMap = computed(() => ({\n      hours: hoursList,\n      minutes: minutesList,\n      seconds: secondsList\n    }));\n    const arrowHourList = computed(() => {\n      const hour = hours.value;\n      return [hour > 0 ? hour - 1 : void 0, hour, hour < 23 ? hour + 1 : void 0];\n    });\n    const arrowMinuteList = computed(() => {\n      const minute = minutes.value;\n      return [minute > 0 ? minute - 1 : void 0, minute, minute < 59 ? minute + 1 : void 0];\n    });\n    const arrowSecondList = computed(() => {\n      const second = seconds.value;\n      return [second > 0 ? second - 1 : void 0, second, second < 59 ? second + 1 : void 0];\n    });\n    const arrowListMap = computed(() => ({\n      hours: arrowHourList,\n      minutes: arrowMinuteList,\n      seconds: arrowSecondList\n    }));\n    const getAmPmFlag = hour => {\n      const shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      const isCapital = props.amPmMode === \"A\";\n      let content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n    const emitSelectRange = type => {\n      if (type === \"hours\") {\n        ctx.emit(\"select-range\", 0, 2);\n      } else if (type === \"minutes\") {\n        ctx.emit(\"select-range\", 3, 5);\n      } else if (type === \"seconds\") {\n        ctx.emit(\"select-range\", 6, 8);\n      }\n      currentScrollbar.value = type;\n    };\n    const adjustCurrentSpinner = type => {\n      adjustSpinner(type, timePartsMap.value[type].value);\n    };\n    const adjustSpinners = () => {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return;\n      const el = listRefsMap[type];\n      if (el && el.$el) {\n        el.$el.querySelector(\".el-scrollbar__wrap\").scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n    const typeItemHeight = type => {\n      const el = listRefsMap[type];\n      return el.$el.querySelector(\"li\").offsetHeight;\n    };\n    const onIncreaseClick = () => {\n      scrollDown(1);\n    };\n    const onDecreaseClick = () => {\n      scrollDown(-1);\n    };\n    const scrollDown = step => {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n      const label = currentScrollbar.value;\n      let now = timePartsMap.value[label].value;\n      const total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      now = (now + step + total) % total;\n      modifyDateField(label, now);\n      adjustSpinner(label, now);\n      nextTick(() => emitSelectRange(currentScrollbar.value));\n    };\n    const modifyDateField = (type, value) => {\n      const list = listMap.value[type].value;\n      const isDisabled = list[value];\n      if (isDisabled) return;\n      switch (type) {\n        case \"hours\":\n          ctx.emit(\"change\", props.spinnerDate.hour(value).minute(minutes.value).second(seconds.value));\n          break;\n        case \"minutes\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(value).second(seconds.value));\n          break;\n        case \"seconds\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(minutes.value).second(value));\n          break;\n      }\n    };\n    const handleClick = (type, {\n      value,\n      disabled\n    }) => {\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n    const handleScroll = type => {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      const value = Math.min(Math.round((listRefsMap[type].$el.querySelector(\".el-scrollbar__wrap\").scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n    const scrollBarHeight = type => {\n      return listRefsMap[type].$el.offsetHeight;\n    };\n    const bindScrollEvent = () => {\n      const bindFuntion = type => {\n        if (listRefsMap[type] && listRefsMap[type].$el) {\n          listRefsMap[type].$el.querySelector(\".el-scrollbar__wrap\").onscroll = () => {\n            handleScroll(type);\n          };\n        }\n      };\n      bindFuntion(\"hours\");\n      bindFuntion(\"minutes\");\n      bindFuntion(\"seconds\");\n    };\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type] = scrollbar;\n    };\n    ctx.emit(\"set-option\", [`${props.role}_scrollDown`, scrollDown]);\n    ctx.emit(\"set-option\", [`${props.role}_emitSelectRange`, emitSelectRange]);\n    const {\n      getHoursList,\n      getMinutesList,\n      getSecondsList\n    } = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);\n    watch(() => props.spinnerDate, () => {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return {\n      setRef,\n      spinnerItems,\n      currentScrollbar,\n      hours,\n      minutes,\n      seconds,\n      hoursList,\n      minutesList,\n      arrowHourList,\n      arrowMinuteList,\n      arrowSecondList,\n      getAmPmFlag,\n      emitSelectRange,\n      adjustCurrentSpinner,\n      typeItemHeight,\n      listHoursRef,\n      listMinutesRef,\n      listSecondsRef,\n      onIncreaseClick,\n      onDecreaseClick,\n      handleClick,\n      secondsList,\n      timePartsMap,\n      arrowListMap,\n      listMap\n    };\n  }\n});\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onMouseenter\"];\nconst _hoisted_3 = {\n  class: \"el-time-spinner__list\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-time-spinner\", {\n      \"has-seconds\": _ctx.showSeconds\n    }])\n  }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList(_ctx.spinnerItems, item => {\n    return openBlock(), createBlock(_component_el_scrollbar, {\n      key: item,\n      ref_for: true,\n      ref: scollbar => _ctx.setRef(scollbar, item),\n      class: \"el-time-spinner__wrapper\",\n      \"wrap-style\": \"max-height: inherit;\",\n      \"view-class\": \"el-time-spinner__list\",\n      noresize: \"\",\n      tag: \"ul\",\n      onMouseenter: $event => _ctx.emitSelectRange(item),\n      onMousemove: $event => _ctx.adjustCurrentSpinner(item)\n    }, {\n      default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.listMap[item].value, (disabled, key) => {\n        return openBlock(), createElementBlock(\"li\", {\n          key,\n          class: normalizeClass([\"el-time-spinner__item\", {\n            active: key === _ctx.timePartsMap[item].value,\n            disabled\n          }]),\n          onClick: $event => _ctx.handleClick(item, {\n            value: key,\n            disabled\n          })\n        }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n          key: 0\n        }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(_ctx.getAmPmFlag(key)), 1)], 2112)) : (openBlock(), createElementBlock(Fragment, {\n          key: 1\n        }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 2112))], 10, _hoisted_1);\n      }), 128))]),\n      _: 2\n    }, 1032, [\"onMouseenter\", \"onMousemove\"]);\n  }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n    key: 1\n  }, renderList(_ctx.spinnerItems, item => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: item,\n      class: \"el-time-spinner__wrapper is-arrow\",\n      onMouseenter: $event => _ctx.emitSelectRange(item)\n    }, [withDirectives((openBlock(), createBlock(_component_el_icon, {\n      class: \"el-time-spinner__arrow arrow-up\"\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_up)]),\n      _: 1\n    })), [[_directive_repeat_click, _ctx.onDecreaseClick]]), withDirectives((openBlock(), createBlock(_component_el_icon, {\n      class: \"el-time-spinner__arrow arrow-down\"\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_down)]),\n      _: 1\n    })), [[_directive_repeat_click, _ctx.onIncreaseClick]]), createElementVNode(\"ul\", _hoisted_3, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.arrowListMap[item].value, (time, key) => {\n      return openBlock(), createElementBlock(\"li\", {\n        key,\n        class: normalizeClass([\"el-time-spinner__item\", {\n          active: time === _ctx.timePartsMap[item].value,\n          disabled: _ctx.listMap[item].value[time]\n        }])\n      }, [typeof time === \"number\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(_ctx.getAmPmFlag(time)), 1)], 2112)) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 2112))], 2112)) : createCommentVNode(\"v-if\", true)], 2);\n    }), 128))])], 40, _hoisted_2);\n  }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n}\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TimeSpinner as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","directives","repeatClick","components","ElScrollbar","ElIcon","ArrowUp","ArrowDown","props","role","type","required","spinnerDate","showSeconds","default","arrowControl","amPmMode","disabledHours","disabledMinutes","disabledSeconds","emits","setup","ctx","isScrolling","debounce","adjustCurrentSpinner","currentScrollbar","ref","listHoursRef","listMinutesRef","listSecondsRef","listRefsMap","hours","minutes","seconds","computed","arr","slice","getHoursList","getSecondsList","value","hour","minute","second","shouldShowAmPm","content","adjustSpinner","timePartsMap","adjustSpinners","el","$el","querySelector","Math","max","typeItemHeight","onIncreaseClick","scrollDown","onDecreaseClick","step","emitSelectRange","label","total","now","modifyDateField","nextTick","listMap","isDisabled","list","handleClick","disabled","debouncedResetScroll","min","round","bindScrollEvent","onscroll","handleScroll","bindFuntion","onMounted","setRef","scrollbar","emit","getMinutesList","getTimeLists","watch","spinnerItems","hoursList","minutesList","arrowHourList","arrowMinuteList","arrowSecondList","getAmPmFlag","secondsList","arrowListMap","class","_createElementBlock","_normalizeClass","key","_ctx","item","_createBlock","ref_for","scollbar","noresize","tag","onMouseenter","$event","onMousemove","_Fragment","active","onClick","_createVNode","_","_withDirectives","_component_el_icon","_createElementVNode","_hoisted_3","time"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div class=\"el-time-spinner\" :class=\"{ 'has-seconds': showSeconds }\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scollbar) => setRef(scollbar, item)\"\n        class=\"el-time-spinner__wrapper\"\n        wrap-style=\"max-height: inherit;\"\n        view-class=\"el-time-spinner__list\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in listMap[item].value\"\n          :key=\"key\"\n          class=\"el-time-spinner__item\"\n          :class=\"{ active: key === timePartsMap[item].value, disabled }\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        class=\"el-time-spinner__wrapper is-arrow\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecreaseClick\"\n          class=\"el-time-spinner__arrow arrow-up\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncreaseClick\"\n          class=\"el-time-spinner__arrow arrow-down\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul class=\"el-time-spinner__list\">\n          <li\n            v-for=\"(time, key) in arrowListMap[item].value\"\n            :key=\"key\"\n            class=\"el-time-spinner__item\"\n            :class=\"{\n              active: time === timePartsMap[item].value,\n              disabled: listMap[item].value[time],\n            }\"\n          >\n            <template v-if=\"typeof time === 'number'\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, nextTick, computed, onMounted, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { RepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue'\nimport { getTimeLists } from './useTimePicker'\n\nimport type { PropType, Ref } from 'vue'\nimport type { Dayjs } from 'dayjs'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  directives: {\n    repeatClick: RepeatClick,\n  },\n\n  components: {\n    ElScrollbar,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n  },\n\n  props: {\n    role: {\n      type: String,\n      required: true,\n    },\n    spinnerDate: {\n      type: Object as PropType<Dayjs>,\n      required: true,\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true,\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      default: '', // 'a': am/pm; 'A': AM/PM\n    },\n    disabledHours: {\n      type: Function,\n    },\n    disabledMinutes: {\n      type: Function,\n    },\n    disabledSeconds: {\n      type: Function,\n    },\n  },\n\n  emits: ['change', 'select-range', 'set-option'],\n\n  setup(props, ctx) {\n    // data\n    let isScrolling = false\n    const debouncedResetScroll = debounce((type) => {\n      isScrolling = false\n      adjustCurrentSpinner(type)\n    }, 200)\n    const currentScrollbar = ref(null)\n    const listHoursRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listMinutesRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listSecondsRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef,\n    }\n\n    // computed\n    const spinnerItems = computed(() => {\n      const arr = ['hours', 'minutes', 'seconds']\n      return props.showSeconds ? arr : arr.slice(0, 2)\n    })\n    const hours = computed(() => {\n      return props.spinnerDate.hour()\n    })\n    const minutes = computed(() => {\n      return props.spinnerDate.minute()\n    })\n    const seconds = computed(() => {\n      return props.spinnerDate.second()\n    })\n    const timePartsMap = computed(() => ({\n      hours,\n      minutes,\n      seconds,\n    }))\n    const hoursList = computed(() => {\n      return getHoursList(props.role)\n    })\n    const minutesList = computed(() => {\n      return getMinutesList(hours.value, props.role)\n    })\n    const secondsList = computed(() => {\n      return getSecondsList(hours.value, minutes.value, props.role)\n    })\n    const listMap = computed(() => ({\n      hours: hoursList,\n      minutes: minutesList,\n      seconds: secondsList,\n    }))\n    const arrowHourList = computed(() => {\n      const hour = hours.value\n      return [\n        hour > 0 ? hour - 1 : undefined,\n        hour,\n        hour < 23 ? hour + 1 : undefined,\n      ]\n    })\n    const arrowMinuteList = computed(() => {\n      const minute = minutes.value\n      return [\n        minute > 0 ? minute - 1 : undefined,\n        minute,\n        minute < 59 ? minute + 1 : undefined,\n      ]\n    })\n    const arrowSecondList = computed(() => {\n      const second = seconds.value\n      return [\n        second > 0 ? second - 1 : undefined,\n        second,\n        second < 59 ? second + 1 : undefined,\n      ]\n    })\n    const arrowListMap = computed(() => ({\n      hours: arrowHourList,\n      minutes: arrowMinuteList,\n      seconds: arrowSecondList,\n    }))\n    const getAmPmFlag = (hour) => {\n      const shouldShowAmPm = !!props.amPmMode\n      if (!shouldShowAmPm) return ''\n      const isCapital = props.amPmMode === 'A'\n      // todo locale\n      let content = hour < 12 ? ' am' : ' pm'\n      if (isCapital) content = content.toUpperCase()\n      return content\n    }\n\n    const emitSelectRange = (type) => {\n      if (type === 'hours') {\n        ctx.emit('select-range', 0, 2)\n      } else if (type === 'minutes') {\n        ctx.emit('select-range', 3, 5)\n      } else if (type === 'seconds') {\n        ctx.emit('select-range', 6, 8)\n      }\n      currentScrollbar.value = type\n    }\n\n    const adjustCurrentSpinner = (type) => {\n      adjustSpinner(type, timePartsMap.value[type].value)\n    }\n\n    // NOTE: used by datetime / date-range panel\n    //       renamed from adjustScrollTop\n    //       should try to refactory it\n    const adjustSpinners = () => {\n      adjustCurrentSpinner('hours')\n      adjustCurrentSpinner('minutes')\n      adjustCurrentSpinner('seconds')\n    }\n\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return\n      const el = listRefsMap[type]\n      if (el && el.$el) {\n        el.$el.querySelector('.el-scrollbar__wrap').scrollTop = Math.max(\n          0,\n          value * typeItemHeight(type)\n        )\n      }\n    }\n\n    const typeItemHeight = (type) => {\n      const el = listRefsMap[type]\n      return el.$el.querySelector('li').offsetHeight\n    }\n\n    const onIncreaseClick = () => {\n      scrollDown(1)\n    }\n\n    const onDecreaseClick = () => {\n      scrollDown(-1)\n    }\n\n    const scrollDown = (step) => {\n      if (!currentScrollbar.value) {\n        emitSelectRange('hours')\n      }\n\n      const label = currentScrollbar.value\n      let now = timePartsMap.value[label].value\n      const total = currentScrollbar.value === 'hours' ? 24 : 60\n      now = (now + step + total) % total\n\n      modifyDateField(label, now)\n      adjustSpinner(label, now)\n      nextTick(() => emitSelectRange(currentScrollbar.value))\n    }\n\n    const modifyDateField = (type, value) => {\n      const list = listMap.value[type].value\n      const isDisabled = list[value]\n      if (isDisabled) return\n      switch (type) {\n        case 'hours':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(value)\n              .minute(minutes.value)\n              .second(seconds.value)\n          )\n          break\n        case 'minutes':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(value)\n              .second(seconds.value)\n          )\n          break\n        case 'seconds':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(minutes.value)\n              .second(value)\n          )\n          break\n      }\n    }\n\n    const handleClick = (type, { value, disabled }) => {\n      if (!disabled) {\n        modifyDateField(type, value)\n        emitSelectRange(type)\n        adjustSpinner(type, value)\n      }\n    }\n\n    const handleScroll = (type) => {\n      isScrolling = true\n      debouncedResetScroll(type)\n      const value = Math.min(\n        Math.round(\n          (listRefsMap[type].$el.querySelector('.el-scrollbar__wrap')\n            .scrollTop -\n            (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n            3) /\n            typeItemHeight(type)\n        ),\n        type === 'hours' ? 23 : 59\n      )\n      modifyDateField(type, value)\n    }\n\n    const scrollBarHeight = (type) => {\n      return listRefsMap[type].$el.offsetHeight\n    }\n\n    const bindScrollEvent = () => {\n      const bindFuntion = (type) => {\n        if (listRefsMap[type] && listRefsMap[type].$el) {\n          listRefsMap[type].$el.querySelector('.el-scrollbar__wrap').onscroll =\n            () => {\n              // TODO: scroll is emitted when set scrollTop programatically\n              // should find better solutions in the future!\n              handleScroll(type)\n            }\n        }\n      }\n      bindFuntion('hours')\n      bindFuntion('minutes')\n      bindFuntion('seconds')\n    }\n\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent()\n        adjustSpinners()\n        // set selection on the first hour part\n        if (props.role === 'start') emitSelectRange('hours')\n      })\n    })\n\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type] = scrollbar\n    }\n\n    ctx.emit('set-option', [`${props.role}_scrollDown`, scrollDown])\n    ctx.emit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\n    const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n      props.disabledHours,\n      props.disabledMinutes,\n      props.disabledSeconds\n    )\n\n    watch(\n      () => props.spinnerDate,\n      () => {\n        if (isScrolling) return\n        adjustSpinners()\n      }\n    )\n\n    return {\n      setRef,\n      spinnerItems,\n      currentScrollbar,\n      hours,\n      minutes,\n      seconds,\n      hoursList,\n      minutesList,\n      arrowHourList,\n      arrowMinuteList,\n      arrowSecondList,\n      getAmPmFlag,\n      emitSelectRange,\n      adjustCurrentSpinner,\n      typeItemHeight,\n      listHoursRef,\n      listMinutesRef,\n      listSecondsRef,\n      onIncreaseClick,\n      onDecreaseClick,\n      handleClick,\n      secondsList,\n      timePartsMap,\n      arrowListMap,\n      listMap,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}