{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2b15b02a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\"修改 \");\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"color\": \"red\",\n    \"margin-top\": \"1rem\"\n  }\n}, \"说明：最多选择5项。若多选，则只保留“已选项”中的前5项！\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"dialog-footer\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createTextVNode(\"取消\");\nconst _hoisted_5 = /*#__PURE__*/_createTextVNode(\" 确认 \");\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_edit = _resolveComponent(\"edit\");\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n  const _component_el_transfer = _resolveComponent(\"el-transfer\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.handleLikeEditShow && $setup.handleLikeEditShow(...args)),\n    class: \"edit-btn\"\n  }, [_createVNode(_component_el_icon, null, {\n    default: _withCtx(() => [_createVNode(_component_edit)]),\n    _: 1 /* STABLE */\n  }), _hoisted_1]), _createVNode(_component_el_dialog, {\n    modelValue: $setup.isShow,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.isShow = $event),\n    title: $setup.editDialogTitle,\n    width: \"602px\",\n    draggable: \"\"\n  }, {\n    footer: _withCtx(() => [_createElementVNode(\"span\", _hoisted_3, [_createVNode(_component_el_button, {\n      onClick: _cache[2] || (_cache[2] = $event => $setup.isShow = false)\n    }, {\n      default: _withCtx(() => [_hoisted_4]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_button, {\n      type: \"primary\",\n      onClick: $setup.handleUpdateLike\n    }, {\n      default: _withCtx(() => [_hoisted_5]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])])]),\n    default: _withCtx(() => [_createVNode(_component_el_transfer, {\n      titles: ['待选项', '已选项'],\n      filterable: \"\",\n      \"filter-placeholder\": \"请输入名称\",\n      modelValue: $setup.value,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.value = $event),\n      data: $setup.data,\n      \"target-order\": \"push\"\n    }, null, 8 /* PROPS */, [\"modelValue\", \"data\"]), _hoisted_2]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"title\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;iDAE8B,KAC5B;gEAkBEA,oBAA8E;EAAzEC,KAAqC,EAArC;IAAA;IAAA;EAAA;AAAqC,GAAC,+BAA6B;;EAGhEC,KAAK,EAAC;AAAe;iDACU,IAAE;iDACe,MAEpD;;;;;;;6DA3BNF,oBAEO;IAFAG,OAAK,yCAAEC,+DAAkB;IAAEF,KAAK,EAAC;MACtCG,aAA0BC;sBAAjB,MAAO,CAAPD,aAAOE;;oBAGlBF,aA0BYG;gBAzBCJ,aAAM;+DAANA,aAAM;IACdK,KAAK,EAAEL,sBAAe;IACvBM,KAAK,EAAC,OAAO;IACbC,SAAS,EAAT;;IAcSC,MAAM,WACf,MAKO,CALPZ,oBAKO,QALPa,UAKO,GAJLR,aAAiDS;MAArCX,OAAK,sCAAEC,aAAM;;wBAAU,MAAE;;QACrCC,aAEYS;MAFDC,IAAI,EAAC,SAAS;MAAEZ,OAAK,EAAEC;;wBAAkB,MAEpD;;;sBAjBJ,MAQc,CARdC,aAQcW;MAPTC,MAAM,EAAE,cAAc;MACvBC,UAAU,EAAV,EAAU;MACV,oBAAkB,EAAC,OAAO;kBACjBd,YAAK;iEAALA,YAAK;MACbe,IAAI,EAAEf,WAAI;MACX,cAAY,EAAC;qDAIjBgB,UAA8E","names":["_createElementVNode","style","class","onClick","$setup","_createVNode","_component_el_icon","_component_edit","_component_el_dialog","title","width","draggable","footer","_hoisted_3","_component_el_button","type","_component_el_transfer","titles","filterable","data","_hoisted_2"],"sourceRoot":"","sources":["F:\\personalSpace\\lx-bishe\\movie_recommendation_system_vue\\src\\components\\personal\\edit\\LikeEditing.vue"],"sourcesContent":["<template>\r\n  <span @click=\"handleLikeEditShow\" class=\"edit-btn\">\r\n    <el-icon><edit/></el-icon>修改\r\n  </span>\r\n\r\n  <el-dialog\r\n      v-model=\"isShow\"\r\n      :title=\"editDialogTitle\"\r\n      width=\"602px\"\r\n      draggable\r\n  >\r\n    <el-transfer\r\n        :titles=\"['待选项', '已选项']\"\r\n        filterable\r\n        filter-placeholder=\"请输入名称\"\r\n        v-model=\"value\"\r\n        :data=\"data\"\r\n        target-order=\"push\"\r\n    >\r\n    </el-transfer>\r\n\r\n    <div style=\"color: red; margin-top: 1rem;\">说明：最多选择5项。若多选，则只保留“已选项”中的前5项！</div>\r\n\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"isShow = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleUpdateLike\">\r\n          确认\r\n        </el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script>\r\nimport {ref, watch} from \"vue\";\r\nimport emitter from \"@/utils/event-bus\";\r\nimport userRequest from \"@/api/user\";\r\nimport {ErrorMessage, SuccessMessage} from \"@/utils/my-message\";\r\n\r\nexport default {\r\n  name: \"LikeEditing\",\r\n  props: {\r\n    opt: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    likes: {\r\n      type: Array,\r\n      default: [],\r\n    }\r\n  },\r\n  setup(props) {\r\n    let editDialogTitle = ref('')\r\n    if (props.opt === 1) {\r\n      editDialogTitle.value = '类型喜好编辑'\r\n    } else {\r\n      editDialogTitle.value = '地区喜好编辑'\r\n    }\r\n\r\n    const types = [\r\n      '剧情', '喜剧', '动作', '爱情', '科幻',\r\n      '动画', '悬疑', '惊悚', '恐怖', '犯罪',\r\n      '音乐', '歌舞', '传记', '历史', '战争',\r\n      '西部', '奇幻', '冒险', '灾难', '武侠',\r\n      '其他'\r\n    ]\r\n    const regions = [\r\n      '中国大陆', '美国', '中国香港', '中国台湾',\r\n      '日本', '韩国', '英国', '法国', '德国', '意大利',\r\n      '西班牙', '印度', '泰国', '俄罗斯', '伊朗', '加拿大',\r\n      '澳大利亚', '爱尔兰', '瑞典', '巴西', '丹麦'\r\n    ]\r\n    // 生成电影类型map，键值对（类型名称 => 类型编号）\r\n    const generateTypeEnum = () => {\r\n      let typeEnum = {}\r\n      types.forEach((type, index) => {\r\n        typeEnum[type] = index\r\n      })\r\n      return typeEnum\r\n    }\r\n    const typeEnum = generateTypeEnum()\r\n    // 生成电影地区map，键值对（地区名称 => 地区编号）\r\n    const generateRegionEnum = () => {\r\n      let regionEnum = {}\r\n      regions.forEach((region, index) => {\r\n        regionEnum[region] = index\r\n      })\r\n      return regionEnum\r\n    }\r\n    const regionEnum = generateRegionEnum()\r\n\r\n    // 初始化Transfer 的数据源\r\n    const generateData = _ => {\r\n      const data = [];\r\n      let likes = []\r\n      if (props.opt === 1) {\r\n        likes = types\r\n      } else {\r\n        likes = regions\r\n      }\r\n      likes.forEach((like, index) => {\r\n        data.push({\r\n          label: like,\r\n          key: index,\r\n        });\r\n      });\r\n      return data;\r\n    };\r\n    // Transfer 的数据源\r\n    const data = ref(generateData())\r\n    // Transfer 的已选项\r\n    const value = ref([])\r\n\r\n    let isShow = ref(false)\r\n    const handleLikeEditShow = () => {\r\n      isShow.value = true\r\n    }\r\n\r\n    watch(isShow, (newValue, oldValue) => {\r\n      // 显示编辑窗口时，将用户已选标签加入“以选项”\r\n      if (newValue) {\r\n        value.value = []\r\n        if (props.opt === 1) {\r\n          for (let type of props.likes) {\r\n            value.value.push(typeEnum[type])\r\n          }\r\n        } else {\r\n          for (let region of props.likes) {\r\n            value.value.push(regionEnum[region])\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    // 提交更新用户喜好\r\n    let handleUpdateLike = () => {\r\n      if (props.opt === 1) {\r\n        userRequest.updateUserTypeLike(value.value).then(res => {\r\n          if (res.code === 200) {\r\n            SuccessMessage(res.msg)\r\n            // 更新成功，编辑页面关闭\r\n            isShow.value = false\r\n            emitter.emit(\"handleLikeEditingUpdate\")\r\n          } else {\r\n            ErrorMessage(res.msg)\r\n          }\r\n        }).catch(err => {\r\n          console.log(err)\r\n        })\r\n      } else {\r\n        userRequest.updateUserRegionLike(value.value).then(res => {\r\n          if (res.code === 200) {\r\n            SuccessMessage(res.msg)\r\n            // 更新成功，编辑页面关闭\r\n            isShow.value = false\r\n            emitter.emit(\"handleLikeEditingUpdate\")\r\n          } else {\r\n            ErrorMessage(res.msg)\r\n          }\r\n        }).catch(err => {\r\n          console.log(err)\r\n        })\r\n      }\r\n    }\r\n\r\n    return {\r\n      props,\r\n      editDialogTitle,\r\n      isShow,\r\n      data,\r\n      value,\r\n      handleLikeEditShow,\r\n      handleUpdateLike\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.edit-btn {\r\n  margin-left: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n  color: rgb(23, 81, 153);\r\n  white-space: nowrap;\r\n  cursor: pointer; // 鼠标放上去显示手势\r\n}\r\n\r\n///deep/ .el-transfer-panel {\r\n//  max-width: 130px;\r\n//}\r\n///deep/ .el-transfer__buttons {\r\n//  padding: 0;\r\n//  max-width: 60px;\r\n//}\r\n</style>"]},"metadata":{},"sourceType":"module"}