{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElAside\",\n  props: {\n    width: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props) {\n    const ns = useNamespace(\"aside\");\n    return {\n      style: computed(() => {\n        return props.width ? {\n          \"--el-aside-width\": props.width\n        } : {};\n      }),\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"aside\", {\n    class: normalizeClass(_ctx.ns.b()),\n    style: normalizeStyle(_ctx.style)\n  }, [renderSlot(_ctx.$slots, \"default\")], 6);\n}\nvar Aside = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Aside as default };","map":{"version":3,"mappings":";;;;AAWA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,KAAO;IACLC,KAAO;MACLC,IAAM;MACNC,OAAS;IAAA;EAAA;EAGbC,MAAMJ,KAAO;IACX,MAAMK,KAAKC,YAAa;IAEjB;MACLC,OAAOC,SAAS,MAAM;QACpB,OAAOR,KAAM,SACR;UAAE,oBAAoBA,MAAMC;QAC7B;MAAA;MAENI;IAAA;EAAA;AAAA;;sBA3BJI,kBAEQ;IAFAC,OAAKC,eAAEC,IAAG;IAAML,OAAKM,cAAE;EAAA,IAC7BC,UAAQ","names":["_sfc_main","defineComponent","name","props","width","type","default","setup","ns","useNamespace","style","computed","_createElementBlock","class","_normalizeClass","_ctx","_normalizeStyle","_renderSlot"],"sources":["../../../../../../packages/components/container/src/aside.vue"],"sourcesContent":["<template>\n  <aside :class=\"ns.b()\" :style=\"style\">\n    <slot />\n  </aside>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElAside',\n  props: {\n    width: {\n      type: String,\n      default: null,\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('aside')\n\n    return {\n      style: computed(() => {\n        return props.width\n          ? ({ '--el-aside-width': props.width } as CSSProperties)\n          : {}\n      }),\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}