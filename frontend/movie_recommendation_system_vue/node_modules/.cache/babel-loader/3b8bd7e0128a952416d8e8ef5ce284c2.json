{"ast":null,"code":"import { defineComponent, ref, provide, unref, onMounted, nextTick, watch, onBeforeUnmount, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport { getEdges, tryFocus, focusableStack, focusFirstDescendant, obtainAllFocusableElements } from './utils.mjs';\nimport { ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT, FOCUS_TRAP_INJECTION_KEY, FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS, FOCUS_ON_UNMOUNT } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElFocusTrap\",\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean\n  },\n  emits: [ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT],\n  setup(props, {\n    emit\n  }) {\n    const focusTrapRef = ref();\n    const forwardRef = ref(null);\n    let lastFocusBeforeMounted;\n    let lastFocusAfterMounted;\n    const focusLayer = {\n      paused: false,\n      pause() {\n        this.paused = true;\n      },\n      resume() {\n        this.paused = false;\n      }\n    };\n    const onKeydown = e => {\n      if (!props.loop && !props.trapped) return;\n      if (focusLayer.paused) return;\n      const {\n        key,\n        altKey,\n        ctrlKey,\n        metaKey,\n        currentTarget,\n        shiftKey\n      } = e;\n      const {\n        loop\n      } = props;\n      const isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;\n      const currentFocusingEl = document.activeElement;\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget;\n        const [first, last] = getEdges(container);\n        const isTabbable = first && last;\n        if (!isTabbable) {\n          if (currentFocusingEl === container) e.preventDefault();\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault();\n            if (loop) tryFocus(first, true);\n          } else if (shiftKey && currentFocusingEl === first) {\n            e.preventDefault();\n            if (loop) tryFocus(last, true);\n          }\n        }\n      }\n    };\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown\n    });\n    const focusOnMount = e => {\n      emit(ON_MOUNT_FOCUS_EVT, e);\n    };\n    const focusOnUnmount = e => emit(ON_UNMOUNT_FOCUS_EVT, e);\n    const onFocusIn = e => {\n      const trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n      const target = e.target;\n      if (target && trapContainer.contains(target)) {\n        lastFocusAfterMounted = target;\n      } else {\n        tryFocus(lastFocusAfterMounted, true);\n      }\n    };\n    const onFocusOut = e => {\n      const trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n      if (!trapContainer.contains(e.relatedTarget)) {\n        tryFocus(lastFocusAfterMounted, true);\n      }\n    };\n    const cleanupDocumentListeners = () => {\n      document.removeEventListener(\"focusin\", onFocusIn);\n      document.removeEventListener(\"focusout\", onFocusOut);\n    };\n    onMounted(() => {\n      const trapContainer = unref(forwardRef);\n      if (trapContainer) {\n        focusableStack.push(focusLayer);\n        const prevFocusedElement = document.activeElement;\n        lastFocusBeforeMounted = prevFocusedElement;\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);\n        if (!isPrevFocusContained) {\n          const mountEvent = new Event(FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS);\n          trapContainer.addEventListener(FOCUS_ON_MOUNT, focusOnMount);\n          trapContainer.dispatchEvent(mountEvent);\n          if (!mountEvent.defaultPrevented) {\n            nextTick(() => {\n              focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);\n              if (document.activeElement === prevFocusedElement) {\n                tryFocus(trapContainer);\n              }\n            });\n          }\n        }\n      }\n      watch(() => props.trapped, trapped => {\n        if (trapped) {\n          document.addEventListener(\"focusin\", onFocusIn);\n          document.addEventListener(\"focusout\", onFocusOut);\n        } else {\n          cleanupDocumentListeners();\n        }\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(() => {\n      cleanupDocumentListeners();\n      const trapContainer = unref(forwardRef);\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_ON_MOUNT, focusOnMount);\n        const unmountEvent = new Event(FOCUS_ON_UNMOUNT, FOCUS_ON_MOUNT_OPTS);\n        trapContainer.addEventListener(FOCUS_ON_UNMOUNT, focusOnUnmount);\n        trapContainer.dispatchEvent(unmountEvent);\n        if (!unmountEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeMounted != null ? lastFocusBeforeMounted : document.body, true);\n        }\n        trapContainer.removeEventListener(FOCUS_ON_UNMOUNT, focusOnMount);\n        focusableStack.remove(focusLayer);\n      }\n    });\n    return {\n      focusTrapRef,\n      forwardRef,\n      onKeydown\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\");\n}\nvar ElFocusTrap = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ElFocusTrap as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","inheritAttrs","props","loop","trapped","emits","ON_MOUNT_FOCUS_EVT","setup","emit","focusTrapRef","forwardRef","ref","focusLayer","paused","pause","resume","e","key","altKey","ctrlKey","metaKey","currentTarget","shiftKey","EVENT_CODE","currentFocusingEl","document","isTabbing","container","first","getEdges","isTabbable","last","tryFocus","provide","FOCUS_TRAP_INJECTION_KEY","onKeydown","focusOnUnmount","ON_UNMOUNT_FOCUS_EVT","trapContainer","unref","target","lastFocusAfterMounted","contains","relatedTarget","cleanupDocumentListeners","removeEventListener","onMounted","focusableStack","push","prevFocusedElement","lastFocusBeforeMounted","isPrevFocusContained","Event","FOCUS_ON_MOUNT","addEventListener","dispatchEvent","mountEvent","defaultPrevented","nextTick","focusFirstDescendant","obtainAllFocusableElements","activeElement","watch","immediate","onBeforeUnmount","FOCUS_ON_UNMOUNT","unmountEvent","remove","_renderSlot"],"sources":["../../../../../../packages/components/focus-trap/src/focus-trap.vue"],"sourcesContent":["<template>\n  <slot />\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  onMounted,\n  onBeforeUnmount,\n  provide,\n  unref,\n  watch,\n  nextTick,\n} from 'vue'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  focusableStack,\n  focusFirstDescendant,\n  getEdges,\n  tryFocus,\n  obtainAllFocusableElements,\n} from './utils'\nimport {\n  FOCUS_TRAP_INJECTION_KEY,\n  FOCUS_ON_MOUNT,\n  FOCUS_ON_MOUNT_OPTS,\n  ON_MOUNT_FOCUS_EVT,\n  ON_UNMOUNT_FOCUS_EVT,\n  FOCUS_ON_UNMOUNT,\n} from './tokens'\n\nimport type { FocusLayer } from './utils'\n\nexport default defineComponent({\n  name: 'ElFocusTrap',\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n  },\n  emits: [ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT],\n  setup(props, { emit }) {\n    const focusTrapRef = ref<HTMLElement | null>()\n    const forwardRef = ref<HTMLElement | null>(null)\n    let lastFocusBeforeMounted: HTMLElement | null\n    let lastFocusAfterMounted: HTMLElement | null\n\n    const focusLayer: FocusLayer = {\n      paused: false,\n      pause() {\n        this.paused = true\n      },\n      resume() {\n        this.paused = false\n      },\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      if (!props.loop && !props.trapped) return\n      if (focusLayer.paused) return\n\n      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e\n      const { loop } = props\n      const isTabbing =\n        key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey\n\n      const currentFocusingEl = document.activeElement\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget as HTMLElement\n        const [first, last] = getEdges(container)\n        const isTabbable = first && last\n\n        if (!isTabbable) {\n          if (currentFocusingEl === container) e.preventDefault()\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault()\n            if (loop) tryFocus(first, true)\n          } else if (shiftKey && currentFocusingEl === first) {\n            e.preventDefault()\n            if (loop) tryFocus(last, true)\n          }\n        }\n      }\n    }\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown,\n    })\n\n    const focusOnMount = (e: Event) => {\n      emit(ON_MOUNT_FOCUS_EVT, e)\n    }\n    const focusOnUnmount = (e: Event) => emit(ON_UNMOUNT_FOCUS_EVT, e)\n    const onFocusIn = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n      const target = e.target as HTMLElement | null\n      if (target && trapContainer.contains(target)) {\n        lastFocusAfterMounted = target\n      } else {\n        tryFocus(lastFocusAfterMounted, true)\n      }\n    }\n\n    const onFocusOut = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n\n      if (\n        !trapContainer.contains(\n          (e as FocusEvent).relatedTarget as HTMLElement | null\n        )\n      ) {\n        tryFocus(lastFocusAfterMounted, true)\n      }\n    }\n\n    const cleanupDocumentListeners = () => {\n      document.removeEventListener('focusin', onFocusIn)\n      document.removeEventListener('focusout', onFocusOut)\n    }\n\n    onMounted(() => {\n      const trapContainer = unref(forwardRef)\n      if (trapContainer) {\n        focusableStack.push(focusLayer)\n        const prevFocusedElement = document.activeElement\n        lastFocusBeforeMounted = prevFocusedElement as HTMLElement | null\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement)\n        if (!isPrevFocusContained) {\n          const mountEvent = new Event(FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS)\n          trapContainer.addEventListener(FOCUS_ON_MOUNT, focusOnMount)\n          trapContainer.dispatchEvent(mountEvent)\n          if (!mountEvent.defaultPrevented) {\n            nextTick(() => {\n              focusFirstDescendant(\n                obtainAllFocusableElements(trapContainer),\n                true\n              )\n              if (document.activeElement === prevFocusedElement) {\n                tryFocus(trapContainer)\n              }\n            })\n          }\n        }\n      }\n\n      watch(\n        () => props.trapped,\n        (trapped) => {\n          if (trapped) {\n            document.addEventListener('focusin', onFocusIn)\n            document.addEventListener('focusout', onFocusOut)\n          } else {\n            cleanupDocumentListeners()\n          }\n        },\n        { immediate: true }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      cleanupDocumentListeners()\n      const trapContainer = unref(forwardRef)\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_ON_MOUNT, focusOnMount)\n        const unmountEvent = new Event(FOCUS_ON_UNMOUNT, FOCUS_ON_MOUNT_OPTS)\n\n        trapContainer.addEventListener(FOCUS_ON_UNMOUNT, focusOnUnmount)\n        trapContainer.dispatchEvent(unmountEvent)\n\n        if (!unmountEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeMounted ?? document.body, true)\n        }\n\n        trapContainer.removeEventListener(FOCUS_ON_UNMOUNT, focusOnMount)\n        focusableStack.remove(focusLayer)\n      }\n    })\n\n    return {\n      focusTrapRef,\n      forwardRef,\n      onKeydown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}