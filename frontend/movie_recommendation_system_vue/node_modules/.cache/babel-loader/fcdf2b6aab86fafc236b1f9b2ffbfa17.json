{"ast":null,"code":"import { defineComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, withDirectives, vModelCheckbox, renderSlot, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckbox } from './useCheckbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElCheckbox\",\n  props: {\n    modelValue: {\n      type: [Number, String, Boolean],\n      default: () => void 0\n    },\n    label: {\n      type: [String, Boolean, Number, Object]\n    },\n    indeterminate: Boolean,\n    disabled: Boolean,\n    checked: Boolean,\n    name: {\n      type: String,\n      default: void 0\n    },\n    trueLabel: {\n      type: [String, Number],\n      default: void 0\n    },\n    falseLabel: {\n      type: [String, Number],\n      default: void 0\n    },\n    id: {\n      type: String,\n      default: void 0\n    },\n    controls: {\n      type: String,\n      default: void 0\n    },\n    border: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    tabindex: [String, Number]\n  },\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n  setup(props) {\n    const ns = useNamespace(\"checkbox\");\n    return {\n      ns,\n      ...useCheckbox(props)\n    };\n  }\n});\nconst _hoisted_1 = [\"id\", \"aria-controls\"];\nconst _hoisted_2 = [\"tabindex\", \"role\", \"aria-checked\"];\nconst _hoisted_3 = [\"aria-hidden\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nconst _hoisted_4 = [\"aria-hidden\", \"disabled\", \"value\", \"name\", \"tabindex\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"label\", {\n    id: _ctx.id,\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.checkboxSize), _ctx.ns.is(\"disabled\", _ctx.isDisabled), _ctx.ns.is(\"bordered\", _ctx.border), _ctx.ns.is(\"checked\", _ctx.isChecked)]),\n    \"aria-controls\": _ctx.indeterminate ? _ctx.controls : null\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass([_ctx.ns.e(\"input\"), _ctx.ns.is(\"disabled\", _ctx.isDisabled), _ctx.ns.is(\"checked\", _ctx.isChecked), _ctx.ns.is(\"indeterminate\", _ctx.indeterminate), _ctx.ns.is(\"focus\", _ctx.focus)]),\n    tabindex: _ctx.indeterminate ? 0 : void 0,\n    role: _ctx.indeterminate ? \"checkbox\" : void 0,\n    \"aria-checked\": _ctx.indeterminate ? \"mixed\" : false\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"inner\"))\n  }, null, 2), _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 0,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.model = $event),\n    class: normalizeClass(_ctx.ns.e(\"original\")),\n    type: \"checkbox\",\n    \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.isDisabled,\n    \"true-value\": _ctx.trueLabel,\n    \"false-value\": _ctx.falseLabel,\n    onChange: _cache[1] || (_cache[1] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onFocus: _cache[2] || (_cache[2] = $event => _ctx.focus = true),\n    onBlur: _cache[3] || (_cache[3] = $event => _ctx.focus = false)\n  }, null, 42, _hoisted_3)), [[vModelCheckbox, _ctx.model]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 1,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.model = $event),\n    class: normalizeClass(_ctx.ns.e(\"original\")),\n    type: \"checkbox\",\n    \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n    disabled: _ctx.isDisabled,\n    value: _ctx.label,\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    onChange: _cache[5] || (_cache[5] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onFocus: _cache[6] || (_cache[6] = $event => _ctx.focus = true),\n    onBlur: _cache[7] || (_cache[7] = $event => _ctx.focus = false)\n  }, null, 42, _hoisted_4)), [[vModelCheckbox, _ctx.model]])], 10, _hoisted_2), _ctx.$slots.default || _ctx.label ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"label\"))\n  }, [renderSlot(_ctx.$slots, \"default\"), !_ctx.$slots.default ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createTextVNode(toDisplayString(_ctx.label), 1)], 2112)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\nvar Checkbox = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Checkbox as default };","map":{"version":3,"mappings":";;;;;;;;;AAuEA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EACNC,KAAO;IACLC,UAAY;MACVC,MAAM,CAACC,QAAQC,MAAQ;MACvBC,SAASA,MAAM;IAAA;IAEjBC,KAAO;MACLJ,IAAM,GAACE,MAAQ,WAASD,MAAQ;IAAA;IAElCI,aAAe;IACfC,QAAU;IACVC,OAAS;IACTV,IAAM;MACJG,IAAM;MACNG,OAAS;IAAA;IAEXK,SAAW;MACTR,MAAM,CAACE,MAAQ;MACfC,OAAS;IAAA;IAEXM,UAAY;MACVT,MAAM,CAACE,MAAQ;MACfC,OAAS;IAAA;IAEXO,EAAI;MACFV,IAAM;MACNG,OAAS;IAAA;IAEXQ,QAAU;MACRX,IAAM;MACNG,OAAS;IAAA;IAEXS,MAAQ;IACRC,IAAM;MACJb,IAAM;MACNc,SAAW;IAAA;IAEbC,UAAU,CAACb,MAAQ;EAAA;EAErBc,OAAO,CAACC,kBAAoB;EAC5BC,MAAMpB,KAAO;IACX,MAAMqB,KAAKC,YAAa;IACjB;MACLD;MAAA,GACGE,WAAY;IAAA;EAAA;AAAA;;;;;;sBAnHnBC,kBA0DQ;IAzDLZ,EAAI;IACJa,KAAK,kBAAUC,IAAG,SAAWA,QAAGC,CAAE,qBAAqBD,QAAGE,GAAE,UAAa,oBAAmBF,QAAGE,GAAE,UAAa,gBAAeF,QAAGE,GAAE,SAAY;IAO9I,iBAAeF,qBAAgBA,IAAQ;EAAA,IAExCG,kBA0CO;IAzCJJ,KAAK,kBAAYC,QAAGI,CAAC,WAAmBJ,QAAGE,GAAE,UAAa,oBAAqBF,QAAGE,GAAE,SAAY,mBAAoBF,QAAGE,GAAE,eAAkB,uBAAwBF,QAAGE,GAAE,OAAU;IAOlLX,UAAUS,qBAAa,CAAO;IAC9BK,MAAML,qBAAa,UAAgB;IACnC,gBAAcA,IAAa;EAAA,IAE5BG,kBAA+B;IAAxBJ,OAAKO,cAAE,SAAGF,CAAC;EAAA,aAEVJ,kBAAaA,+CADrBF,kBAcE;IAAAS;+DAZSP,IAAK;IACbD,OAAKO,cAAE,SAAGF,CAAC;IACZ5B,IAAK;IACJ,eAAawB,IAAa;IAC1B3B,IAAM;IACNkB,QAAU;IACVT,QAAU;IACV,YAAY;IACZ,aAAa;IACb0B,UAAMC,MAAE;IACRC,SAAKD,oCAAET,IAAK;IACZW,QAAIF,oCAAET,IAAK;EAAA,4BAXH,8DAaXF,kBAaE;IAAAS;+DAXSP,IAAK;IACbD,OAAKO,cAAE,SAAGF,CAAC;IACZ5B,IAAK;IACJ,eAAawB,IAAa;IAC1BlB,QAAU;IACV8B,KAAO;IACPvC,IAAM;IACNkB,QAAU;IACViB,UAAMC,MAAE;IACRC,SAAKD,oCAAET,IAAK;IACZW,QAAIF,oCAAET,IAAK;EAAA,4BAVH,kDAaDA,IAAO,mBAAWA,2BAA9BF,kBAGO;IAAAS;IAH+BR,KAAK,iBAAEC,QAAGI,CAAC;EAAA,IAC/CS,UAAQ,0BACS,aAAOlC,wBAAxBmB,kBAAuD;IAAAS;EAAA,oCAAnBP,IAAK","names":["_sfc_main","defineComponent","name","props","modelValue","type","Number","String","default","label","indeterminate","disabled","checked","trueLabel","falseLabel","id","controls","border","size","validator","tabindex","emits","UPDATE_MODEL_EVENT","setup","ns","useNamespace","useCheckbox","_createElementBlock","class","_ctx","m","is","_createElementVNode","e","role","_normalizeClass","key","onChange","_cache","onFocus","onBlur","value","_renderSlot"],"sources":["../../../../../../packages/components/checkbox/src/checkbox.vue"],"sourcesContent":["<template>\n  <label\n    :id=\"id\"\n    :class=\"[\n      ns.b(),\n      ns.m(checkboxSize),\n      ns.is('disabled', isDisabled),\n      ns.is('bordered', border),\n      ns.is('checked', isChecked),\n    ]\"\n    :aria-controls=\"indeterminate ? controls : null\"\n  >\n    <span\n      :class=\"[\n        ns.e('input'),\n        ns.is('disabled', isDisabled),\n        ns.is('checked', isChecked),\n        ns.is('indeterminate', indeterminate),\n        ns.is('focus', focus),\n      ]\"\n      :tabindex=\"indeterminate ? 0 : undefined\"\n      :role=\"indeterminate ? 'checkbox' : undefined\"\n      :aria-checked=\"indeterminate ? 'mixed' : false\"\n    >\n      <span :class=\"ns.e('inner')\" />\n      <input\n        v-if=\"trueLabel || falseLabel\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :aria-hidden=\"indeterminate ? 'true' : 'false'\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        :disabled=\"isDisabled\"\n        :true-value=\"trueLabel\"\n        :false-value=\"falseLabel\"\n        @change=\"handleChange\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\"\n      />\n      <input\n        v-else\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :aria-hidden=\"indeterminate ? 'true' : 'false'\"\n        :disabled=\"isDisabled\"\n        :value=\"label\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        @change=\"handleChange\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\"\n      />\n    </span>\n    <span v-if=\"$slots.default || label\" :class=\"ns.e('label')\">\n      <slot />\n      <template v-if=\"!$slots.default\">{{ label }}</template>\n    </span>\n  </label>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isValidComponentSize } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useCheckbox } from './useCheckbox'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport default defineComponent({\n  name: 'ElCheckbox',\n  props: {\n    modelValue: {\n      type: [Number, String, Boolean],\n      default: () => undefined,\n    },\n    label: {\n      type: [String, Boolean, Number, Object],\n    },\n    indeterminate: Boolean,\n    disabled: Boolean,\n    checked: Boolean,\n    name: {\n      type: String,\n      default: undefined,\n    },\n    trueLabel: {\n      type: [String, Number],\n      default: undefined,\n    },\n    falseLabel: {\n      type: [String, Number],\n      default: undefined,\n    },\n    id: {\n      type: String,\n      default: undefined,\n    },\n    controls: {\n      type: String,\n      default: undefined,\n    },\n    border: Boolean,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    tabindex: [String, Number],\n  },\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n  setup(props) {\n    const ns = useNamespace('checkbox')\n    return {\n      ns,\n      ...useCheckbox(props),\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}