{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\" 评论词云图 \");\nconst _hoisted_2 = {\n  ref: \"commentsWordCloud\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"30rem\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_MostlyCloudy = _resolveComponent(\"MostlyCloudy\");\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_el_button, {\n    onClick: $setup.handleShow,\n    type: \"info\"\n  }, {\n    icon: _withCtx(() => [_createVNode(_component_el_icon, null, {\n      default: _withCtx(() => [_createVNode(_component_MostlyCloudy)]),\n      _: 1 /* STABLE */\n    })]),\n\n    default: _withCtx(() => [_hoisted_1]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_dialog, {\n    modelValue: $setup.isShow,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.isShow = $event),\n    title: \"评论词云图\",\n    draggable: \"\",\n    \"lock-scroll\": false,\n    width: \"100%\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";iDAC6C,SAEzC;;EAWKA,GAAG,EAAC,mBAAmB;EAACC,KAAmC,EAAnC;IAAA;IAAA;EAAA;;;;;;;6DAb/BC,aAKYC;IALAC,OAAK,EAAEC,iBAAU;IAAEC,IAAI,EAAC;;IAEvBC,IAAI,WACb,MAAmC,CAAnCL,aAAmCM;wBAA1B,MAAgB,CAAhBN,aAAgBO;;;;sBAHc,MAEzC;;kCAIFP,aAQYQ;gBAPCL,aAAM;+DAANA,aAAM;IACfM,KAAK,EAAC,OAAO;IACbC,SAAS,EAAT,EAAS;IACR,aAAW,EAAE,KAAK;IACnBC,KAAK,EAAC;;sBAER,MAAuE,CAAvEC,oBAAuE,OAAvEC,UAAuE","names":["ref","style","_createVNode","_component_el_button","onClick","$setup","type","icon","_component_el_icon","_component_MostlyCloudy","_component_el_dialog","title","draggable","width","_createElementVNode","_hoisted_2"],"sourceRoot":"","sources":["F:\\personalSpace\\lx-bishe\\movie_recommendation_system_vue\\src\\components\\charts\\CommentsWordCloud.vue"],"sourcesContent":["<template>\r\n  <el-button @click=\"handleShow\" type=\"info\">\r\n    评论词云图\r\n    <template #icon>\r\n      <el-icon><MostlyCloudy /></el-icon>\r\n    </template>\r\n  </el-button>\r\n  <el-dialog\r\n      v-model=\"isShow\"\r\n      title=\"评论词云图\"\r\n      draggable\r\n      :lock-scroll=\"false\"\r\n      width=\"100%\"\r\n  >\r\n    <div ref=\"commentsWordCloud\" style=\"width: 100%; height: 30rem;\"></div>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script>\r\nimport 'echarts-wordcloud';\r\nimport {inject, nextTick, ref} from \"vue\";\r\n\r\nexport default {\r\n  name: \"CommentsWordCloud\",\r\n  props: {\r\n    mid: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    wordCloudData: {\r\n      type: Array,\r\n      default: [],\r\n      required: true,\r\n    }\r\n  },\r\n  setup(props) {\r\n    const echarts = inject('echarts');\r\n    const commentsWordCloud = ref(null);\r\n\r\n    let myChart = null;\r\n    let option = null;\r\n    const initChart = () => {\r\n      if (myChart === null) {\r\n        myChart = echarts.init(commentsWordCloud.value);\r\n      }\r\n\r\n      let maskImage = new Image();\r\n      //词云形状的黑白矢量图\r\n      maskImage.src = require('../../assets/movie_planet_2.webp');\r\n      option = {\r\n        series: [{\r\n          type: 'wordCloud',\r\n          // 要绘制的“云”的形状。可以是表示为回调函数或存在关键字的任何极坐标方程。\r\n          // 可用的礼物有圆形（默认）、心形（苹果或心形曲线，最知名的极坐标方程）、菱形（正方形的别名）、\r\n          // 正三角形、三角形、（正三角形、五边形和星形的别名)\r\n          // circle (default), cardioid (apple or heart shape curve, the most known polar equation), diamond (\r\n          // alias of square), triangle-forward, triangle, (alias of triangle-upright, pentagon, and star.\r\n          shape: 'circle',\r\n          // 保持 maskImage 的纵横比或形状为 1:1 此选项支持 echarts-wordcloud@2.1.0\r\n          keepAspect: false,\r\n\r\n          // 词云的形状，根据所选的黑白矢量图来生成形状\r\n          // maskImage: maskImage,\r\n\r\n          // 以下 left/top/right/bottom 用于定位词云 默认放置在中心，大小为 75% x 80%。\r\n          left: 'center',\r\n          top: 'center',\r\n          width: '100%',\r\n          height: '100%',\r\n          right: null,\r\n          bottom: null,\r\n          // 数据中的值将被映射到的文本大小范围。默认具有最小 12 像素和最大 60 像素的大小。\r\n          sizeRange: [12, 60],\r\n          // 文本旋转范围和步长。文本将在 [-90, 90] 范围内通过 rotationStep 45 随机旋转\r\n          rotationRange: [-45, 45],\r\n          rotationStep: 45,\r\n          // 用于标记画布可用性的网格大小（以像素为单位） 网格大小越大，单词之间的间隙越大。\r\n          gridSize: 8,\r\n          // 设置为 true 以允许在画布之外部分绘制单词。允许绘制大于画布大小的单词\r\n          drawOutOfBound: false,\r\n          // 如果执行布局动画。注意禁用它会导致当有很多单词时 UI 阻塞。\r\n          layoutAnimation: true,\r\n          // 全局文本样式\r\n          textStyle: {\r\n            fontFamily: 'sans-serif',\r\n            fontWeight: 'bold',\r\n            // 颜色可以是回调函数或颜色字符串\r\n            color: function () {\r\n              // 随机颜色\r\n              return 'rgb(' + [\r\n                Math.round(Math.random() * 160),\r\n                Math.round(Math.random() * 160),\r\n                Math.round(Math.random() * 160)\r\n              ].join(',') + ')';\r\n            }\r\n          },\r\n          emphasis: {\r\n            focus: 'self',\r\n            textStyle: {\r\n              textShadowBlur: 10,\r\n              textShadowColor: '#333'\r\n            }\r\n          },\r\n\r\n          // 数据是一个数组。每个数组项都必须具有 name 和 value 属性。\r\n          data: props.wordCloudData,\r\n        }]\r\n      };\r\n\r\n      // 绘制图表\r\n      maskImage.onload = function () {\r\n        myChart.setOption(option);\r\n      };\r\n      // 自适应，屏幕大小变化时，图像重新渲染\r\n      window.onresize = function () {\r\n        myChart.resize();\r\n      };\r\n    }\r\n\r\n    let isFirst = true;\r\n    let isShow = ref(false);\r\n    const handleShow = () => {\r\n      isShow.value = !isShow.value;\r\n      if (isShow.value === true && isFirst) {\r\n        // 只需再第一次的时候初始化词云图\r\n        isFirst = false;\r\n        // 将回调延迟到下次 DOM 更新循环之后执行\r\n        nextTick(() => {\r\n          initChart();\r\n        })\r\n      }\r\n    }\r\n\r\n    return {\r\n      commentsWordCloud,\r\n      isShow,\r\n      handleShow,\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}