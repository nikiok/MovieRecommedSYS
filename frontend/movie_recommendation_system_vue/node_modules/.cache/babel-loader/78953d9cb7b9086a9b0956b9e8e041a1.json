{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { defineComponent, ref, computed, watch, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, createElementVNode, toDisplayString, createCommentVNode, withDirectives, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport TreeStore from './model/tree-store.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { useDragNodeHandler } from './model/useDragNode.mjs';\nimport { useKeydown } from './model/useKeydown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        disabled: \"disabled\"\n      })\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    icon: [String, Object]\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n  setup(props, ctx) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"tree\");\n    const store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    const root = ref(store.value.root);\n    const currentNode = ref(null);\n    const el$ = ref(null);\n    const dropIndicator$ = ref(null);\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const {\n      dragState\n    } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store\n    });\n    useKeydown({\n      el$\n    }, store);\n    const isEmpty = computed(() => {\n      const {\n        childNodes\n      } = root.value;\n      return !childNodes || childNodes.length === 0 || childNodes.every(({\n        visible\n      }) => !visible);\n    });\n    watch(() => props.defaultCheckedKeys, newVal => {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(() => props.defaultExpandedKeys, newVal => {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(() => props.data, newVal => {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(() => props.checkStrictly, newVal => {\n      store.value.checkStrictly = newVal;\n    });\n    const filter = value => {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n    const getNodeKey$1 = node => {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n    const getNodePath = data => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      const node = store.value.getNode(data);\n      if (!node) return [];\n      const path = [node.data];\n      let parent = node.parent;\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    };\n    const getCheckedNodes = (leafOnly, includeHalfChecked) => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n    const getCheckedKeys = leafOnly => {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n    const getCurrentNode = () => {\n      const currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n    const getCurrentKey = () => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      const currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n    const setCheckedNodes = (nodes, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n    const setCheckedKeys = (keys, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n    const setChecked = (data, checked, deep) => {\n      store.value.setChecked(data, checked, deep);\n    };\n    const getHalfCheckedNodes = () => {\n      return store.value.getHalfCheckedNodes();\n    };\n    const getHalfCheckedKeys = () => {\n      return store.value.getHalfCheckedKeys();\n    };\n    const setCurrentNode = (node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n    };\n    const setCurrentKey = (key, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n    };\n    const getNode = data => {\n      return store.value.getNode(data);\n    };\n    const remove = data => {\n      store.value.remove(data);\n    };\n    const append = (data, parentNode) => {\n      store.value.append(data, parentNode);\n    };\n    const insertBefore = (data, refNode) => {\n      store.value.insertBefore(data, refNode);\n    };\n    const insertAfter = (data, refNode) => {\n      store.value.insertAfter(data, refNode);\n    };\n    const handleNodeExpand = (nodeData, node, instance) => {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n    const updateKeyChildren = (key, data) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n    provide(\"RootTree\", {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance()\n    });\n    return {\n      ns,\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n      isEmpty,\n      filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"el$\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, child => {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    class: normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\nvar Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Tree as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElTreeNode","props","data","type","default","emptyText","renderAfterExpand","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","currentNodeKey","String","renderContent","showCheckbox","draggable","allowDrag","allowDrop","children","label","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","icon","emits","setup","ctx","t","ns","useNamespace","ref","TreeStore","key","store","value","currentNode","el$","dropIndicator$","broadcastExpanded","useNodeExpandEventBroadcast","dragState","useDragNodeHandler","useKeydown","computed","childNodes","root","length","every","visible","watch","newVal","setDefaultCheckedKey","setDefaultExpandedKeys","setData","deep","Error","filter","node","getNode","parent","path","push","getCheckedNodes","leafOnly","includeHalfChecked","getCheckedKeys","getCurrentNode","currentNode2","getCurrentKey","setCheckedNodes","nodes","setCheckedKeys","keys","setChecked","checked","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","setUserCurrentNode","setCurrentKey","setCurrentNodeKey","remove","append","parentNode","insertBefore","refNode","insertAfter","handleNodeExpand","nodeData","instance","updateKeyChildren","updateChildren","provide","isEmpty","getNodeKey","getNodePath","_openBlock","class","_ctx","b","is","role","onNodeExpand","_createElementVNode"],"sources":["../../../../../../packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  provide,\n  computed,\n  watch,\n  getCurrentInstance,\n} from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType, Component } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeNodeData,\n  TreeKey,\n  TreeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: [String, Object] as PropType<string | Component>,\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys, leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n    }\n\n    const setCurrentKey = (key: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}