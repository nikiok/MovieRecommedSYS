{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7d7a4d1e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"MovieRelationsGraphChart\",\n  class: \"movie-relations-chart-div\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"mappings":";;;EAESA,GAAG,EAAC,0BAA0B;EAACC,KAAK,EAAC;;;uBAD5CC,oBAEM,cADJC,oBAA4E,OAA5EC,UAA4E","names":["ref","class","_createElementBlock","_createElementVNode","_hoisted_1"],"sourceRoot":"","sources":["F:\\personalSpace\\lx-bishe\\movie_recommendation_system_vue\\src\\components\\charts\\MovieRelationsGraphChart.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div ref=\"MovieRelationsGraphChart\" class=\"movie-relations-chart-div\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {inject, onMounted, ref} from \"vue\";\r\nimport axios from \"axios\";\r\nimport {useRouter} from \"vue-router\";\r\nimport recommendationRequest from \"@/api/recommendation\";\r\n\r\nexport default {\r\n  name: \"MovieRelationsGraphChart\",\r\n  setup() {\r\n    const echarts = inject('echarts')\r\n\r\n    let MovieRelationsGraphChart = ref('MovieRelationsGraphChart')\r\n    let option;\r\n\r\n    onMounted(() => {\r\n      const router = useRouter();\r\n      let myChart = echarts.init(MovieRelationsGraphChart.value);\r\n\r\n      // 如果数据还没加载出来，会展示loading的动画\r\n      myChart.showLoading();\r\n      recommendationRequest.getLinksBetweenWatchedMoviesAndRecommendedMovies().then(res => {\r\n        myChart.hideLoading();\r\n        option = {\r\n          color: ['#fa7e23', '#5dbe8a'],\r\n          // 图表标题\r\n          title: {\r\n            text: '电影星球',\r\n            x: 'center',\r\n            y: 'top',\r\n            textStyle: {\r\n              fontSize: 30,\r\n              fontFamily: '宋体',\r\n              fontWeight: 'bolder',\r\n              color: '#36a4ff'\r\n            },\r\n          },\r\n          // 图例\r\n          legend: {\r\n            orient: 'vertical',\r\n            data: ['看过的电影', '推荐的电影'],\r\n            x: 'left',                 // 水平安放位置\r\n            backgroundColor: 'rgb(40, 61, 72)',\r\n            borderColor: '#000000',    // 图例边框颜色\r\n            borderWidth: 0,            // 图例边框线宽，单位px，默认为0（无边框）\r\n            padding: 20,               // 图例内边距，单位px，默认各方向内边距为5，\r\n            itemGap: 15,               // 各个item之间的间隔，单位px，默认为10\r\n            textStyle: {\r\n              color: ['#fa7e23', '#5dbe8a'],    // 图例文字颜色\r\n            }\r\n          },\r\n          tooltip: {\r\n            trigger: 'item',\r\n            showDelay: 20,             // 显示延迟，添加显示延迟可以避免频繁切换，单位ms\r\n            hideDelay: 200,           // 隐藏延迟，单位ms\r\n            formatter: (param) => {\r\n              //为了保证和原来的效果一样，这里自己实现了一个点的效果\r\n              let htmlStr = ''\r\n              const color = param.color\r\n              const data = param.data\r\n              if (color) {\r\n                htmlStr += '<span style=\"display:inline-block; width:10px; height:10px; border-radius:5px; background-color:' + color + ';\"></span>'\r\n                htmlStr += ' ' + data.name + ' : ' + data.value + ' 分<br/>'\r\n                htmlStr += '类型: ' + data.types + '<br/>'\r\n                htmlStr += '地区: ' + data.regions\r\n              } else {\r\n                htmlStr += '相似指数: ' + data.idx.toFixed(2) + '%'\r\n              }\r\n              return htmlStr\r\n            }\r\n          },\r\n          series: [{\r\n            type: 'graph',\r\n            layout: 'force',\r\n            animation: false,\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                textStyle: {\r\n                  fontSize: 10,\r\n                  color: '#B0CEFC'\r\n                },\r\n                position: 'top',\r\n                formatter: '{b}'\r\n              },\r\n            },\r\n            draggable: true,\r\n            data: res.data.nodes,\r\n            categories: res.data.categories,\r\n            force: {\r\n              //边的两个节点之间的距离.\r\n              edgeLength: 50,\r\n              // 节点之间的斥力因子。支持数组表达斥力范围，值越大斥力越大。\r\n              repulsion: 300,\r\n              // 节点受到的向中心的引力因子。该值越大节点越往中心点靠拢。\r\n              gravity: 0.2,\r\n              // 因为力引导布局会在多次迭代后才会稳定，这个参数决定是否显示布局的迭代动画，在浏览器端节点数据较多（>100）的时候不建议关闭，布局过程会造成浏览器假死。\r\n              layoutAnimation: true,\r\n            },\r\n            edges: res.data.links,\r\n          }\r\n          ]\r\n        };\r\n\r\n        myChart.setOption(option);\r\n        // 自适应，屏幕大小变化时，图像重新渲染\r\n        window.onresize = function () {\r\n          myChart.resize();\r\n        };\r\n      })\r\n\r\n      myChart.on('click', param => {\r\n        router.push({\r\n          name: 'movieInfo',\r\n          params: {\r\n            id: param.data.mid\r\n          }\r\n        })\r\n      })\r\n    })\r\n\r\n    return {\r\n      MovieRelationsGraphChart\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.movie-relations-chart-div {\r\n  background: url(\"../../assets/movie_planet_3.webp\");\r\n  background-size: cover;\r\n  width: 100%;\r\n  height: 1000px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}