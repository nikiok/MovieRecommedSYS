{"ast":null,"code":"import { defineComponent, reactive, computed, toRefs, provide, watch, ref, onMounted, nextTick, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, createVNode, createBlock, createCommentVNode, Fragment, renderList } from 'vue';\nimport { ElInputNumber } from '../../input-number/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport SliderButton from './button.mjs';\nimport _sfc_main$1 from './marker.mjs';\nimport { useMarks } from './useMarks.mjs';\nimport { useSlide } from './useSlide.mjs';\nimport { useStops } from './useStops.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { throwError, debugWarn } from '../../../utils/error.mjs';\nimport { on, off } from '../../../utils/dom/event.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElSlider\",\n  components: {\n    ElInputNumber,\n    SliderButton,\n    SliderMarker: _sfc_main$1\n  },\n  props: {\n    modelValue: {\n      type: [Number, Array],\n      default: 0\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    showInput: {\n      type: Boolean,\n      default: false\n    },\n    showInputControls: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    inputSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    showStops: {\n      type: Boolean,\n      default: false\n    },\n    showTooltip: {\n      type: Boolean,\n      default: true\n    },\n    formatTooltip: {\n      type: Function,\n      default: void 0\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    range: {\n      type: Boolean,\n      default: false\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    height: {\n      type: String,\n      default: \"\"\n    },\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    label: {\n      type: String,\n      default: void 0\n    },\n    tooltipClass: {\n      type: String,\n      default: void 0\n    },\n    marks: Object\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT],\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"slider\");\n    const initData = reactive({\n      firstValue: 0,\n      secondValue: 0,\n      oldValue: 0,\n      dragging: false,\n      sliderSize: 1\n    });\n    const {\n      elFormItem,\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      minValue,\n      maxValue,\n      runwayStyle,\n      barStyle,\n      resetSize,\n      emitChange,\n      onSliderClick,\n      setFirstValue,\n      setSecondValue\n    } = useSlide(props, initData, emit);\n    const {\n      stops,\n      getStopStyle\n    } = useStops(props, initData, minValue, maxValue);\n    const sliderWrapperSize = useSize();\n    const sliderInputSize = computed(() => props.inputSize || sliderWrapperSize.value);\n    const sliderKls = computed(() => [ns.b(), ns.m(sliderWrapperSize.value), ns.is(\"vertical\", props.vertical), {\n      [ns.m(\"with-input\")]: props.showInput\n    }]);\n    const markList = useMarks(props);\n    useWatch(props, initData, minValue, maxValue, emit, elFormItem);\n    const precision = computed(() => {\n      const precisions = [props.min, props.max, props.step].map(item => {\n        const decimal = `${item}`.split(\".\")[1];\n        return decimal ? decimal.length : 0;\n      });\n      return Math.max.apply(null, precisions);\n    });\n    const {\n      sliderWrapper\n    } = useLifecycle(props, initData, resetSize);\n    const {\n      firstValue,\n      secondValue,\n      oldValue,\n      dragging,\n      sliderSize\n    } = toRefs(initData);\n    const updateDragging = val => {\n      initData.dragging = val;\n    };\n    provide(\"SliderProvider\", {\n      ...toRefs(props),\n      sliderSize,\n      disabled: sliderDisabled,\n      precision,\n      emitChange,\n      resetSize,\n      updateDragging\n    });\n    return {\n      ns,\n      firstValue,\n      secondValue,\n      oldValue,\n      dragging,\n      sliderSize,\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      runwayStyle,\n      barStyle,\n      emitChange,\n      onSliderClick,\n      getStopStyle,\n      setFirstValue,\n      setSecondValue,\n      stops,\n      markList,\n      sliderWrapper,\n      sliderWrapperSize,\n      sliderInputSize,\n      sliderKls\n    };\n  }\n});\nconst useWatch = (props, initData, minValue, maxValue, emit, elFormItem) => {\n  const _emit = val => {\n    emit(UPDATE_MODEL_EVENT, val);\n    emit(INPUT_EVENT, val);\n  };\n  const valueChanged = () => {\n    if (props.range) {\n      return ![minValue.value, maxValue.value].every((item, index) => item === initData.oldValue[index]);\n    } else {\n      return props.modelValue !== initData.oldValue;\n    }\n  };\n  const setValues = () => {\n    var _a, _b;\n    if (props.min > props.max) {\n      throwError(\"Slider\", \"min should not be greater than max.\");\n      return;\n    }\n    const val = props.modelValue;\n    if (props.range && Array.isArray(val)) {\n      if (val[1] < props.min) {\n        _emit([props.min, props.min]);\n      } else if (val[0] > props.max) {\n        _emit([props.max, props.max]);\n      } else if (val[0] < props.min) {\n        _emit([props.min, val[1]]);\n      } else if (val[1] > props.max) {\n        _emit([val[0], props.max]);\n      } else {\n        initData.firstValue = val[0];\n        initData.secondValue = val[1];\n        if (valueChanged()) {\n          (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n          initData.oldValue = val.slice();\n        }\n      }\n    } else if (!props.range && typeof val === \"number\" && !Number.isNaN(val)) {\n      if (val < props.min) {\n        _emit(props.min);\n      } else if (val > props.max) {\n        _emit(props.max);\n      } else {\n        initData.firstValue = val;\n        if (valueChanged()) {\n          (_b = elFormItem.validate) == null ? void 0 : _b.call(elFormItem, \"change\").catch(err => debugWarn(err));\n          initData.oldValue = val;\n        }\n      }\n    }\n  };\n  setValues();\n  watch(() => initData.dragging, val => {\n    if (!val) {\n      setValues();\n    }\n  });\n  watch(() => props.modelValue, (val, oldVal) => {\n    if (initData.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every((item, index) => item === oldVal[index]) && initData.firstValue === val[0] && initData.secondValue === val[1]) {\n      return;\n    }\n    setValues();\n  }, {\n    deep: true\n  });\n  watch(() => [props.min, props.max], () => {\n    setValues();\n  });\n};\nconst useLifecycle = (props, initData, resetSize) => {\n  const sliderWrapper = ref(null);\n  onMounted(async () => {\n    let valuetext;\n    if (props.range) {\n      if (Array.isArray(props.modelValue)) {\n        initData.firstValue = Math.max(props.min, props.modelValue[0]);\n        initData.secondValue = Math.min(props.max, props.modelValue[1]);\n      } else {\n        initData.firstValue = props.min;\n        initData.secondValue = props.max;\n      }\n      initData.oldValue = [initData.firstValue, initData.secondValue];\n      valuetext = `${initData.firstValue}-${initData.secondValue}`;\n    } else {\n      if (typeof props.modelValue !== \"number\" || Number.isNaN(props.modelValue)) {\n        initData.firstValue = props.min;\n      } else {\n        initData.firstValue = Math.min(props.max, Math.max(props.min, props.modelValue));\n      }\n      initData.oldValue = initData.firstValue;\n      valuetext = initData.firstValue;\n    }\n    sliderWrapper.value.setAttribute(\"aria-valuetext\", valuetext);\n    sliderWrapper.value.setAttribute(\"aria-label\", props.label ? props.label : `slider between ${props.min} and ${props.max}`);\n    on(window, \"resize\", resetSize);\n    await nextTick();\n    resetSize();\n  });\n  onBeforeUnmount(() => {\n    off(window, \"resize\", resetSize);\n  });\n  return {\n    sliderWrapper\n  };\n};\nconst _hoisted_1 = [\"aria-valuemin\", \"aria-valuemax\", \"aria-orientation\", \"aria-disabled\"];\nconst _hoisted_2 = {\n  key: 1\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_slider_button = resolveComponent(\"slider-button\");\n  const _component_slider_marker = resolveComponent(\"slider-marker\");\n  const _component_el_input_number = resolveComponent(\"el-input-number\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"sliderWrapper\",\n    class: normalizeClass(_ctx.sliderKls),\n    role: \"slider\",\n    \"aria-valuemin\": _ctx.min,\n    \"aria-valuemax\": _ctx.max,\n    \"aria-orientation\": _ctx.vertical ? \"vertical\" : \"horizontal\",\n    \"aria-disabled\": _ctx.sliderDisabled\n  }, [createElementVNode(\"div\", {\n    ref: \"slider\",\n    class: normalizeClass([_ctx.ns.e(\"runway\"), {\n      \"show-input\": _ctx.showInput && !_ctx.range\n    }, _ctx.ns.is(\"disabled\", _ctx.sliderDisabled)]),\n    style: normalizeStyle(_ctx.runwayStyle),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onSliderClick && _ctx.onSliderClick(...args))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"bar\")),\n    style: normalizeStyle(_ctx.barStyle)\n  }, null, 6), createVNode(_component_slider_button, {\n    ref: \"firstButton\",\n    \"model-value\": _ctx.firstValue,\n    vertical: _ctx.vertical,\n    \"tooltip-class\": _ctx.tooltipClass,\n    \"onUpdate:modelValue\": _ctx.setFirstValue\n  }, null, 8, [\"model-value\", \"vertical\", \"tooltip-class\", \"onUpdate:modelValue\"]), _ctx.range ? (openBlock(), createBlock(_component_slider_button, {\n    key: 0,\n    ref: \"secondButton\",\n    \"model-value\": _ctx.secondValue,\n    vertical: _ctx.vertical,\n    \"tooltip-class\": _ctx.tooltipClass,\n    \"onUpdate:modelValue\": _ctx.setSecondValue\n  }, null, 8, [\"model-value\", \"vertical\", \"tooltip-class\", \"onUpdate:modelValue\"])) : createCommentVNode(\"v-if\", true), _ctx.showStops ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.stops, (item, key) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key,\n      class: normalizeClass(_ctx.ns.e(\"stop\")),\n      style: normalizeStyle(_ctx.getStopStyle(item))\n    }, null, 6);\n  }), 128))])) : createCommentVNode(\"v-if\", true), _ctx.markList.length > 0 ? (openBlock(), createElementBlock(Fragment, {\n    key: 2\n  }, [createElementVNode(\"div\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.markList, (item, key) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key,\n      style: normalizeStyle(_ctx.getStopStyle(item.position)),\n      class: normalizeClass([_ctx.ns.e(\"stop\"), _ctx.ns.e(\"marks-stop\")])\n    }, null, 6);\n  }), 128))]), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"marks\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.markList, (item, key) => {\n    return openBlock(), createBlock(_component_slider_marker, {\n      key,\n      mark: item.mark,\n      style: normalizeStyle(_ctx.getStopStyle(item.position))\n    }, null, 8, [\"mark\", \"style\"]);\n  }), 128))], 2)], 64)) : createCommentVNode(\"v-if\", true)], 6), _ctx.showInput && !_ctx.range ? (openBlock(), createBlock(_component_el_input_number, {\n    key: 0,\n    ref: \"input\",\n    \"model-value\": _ctx.firstValue,\n    class: normalizeClass(_ctx.ns.e(\"input\")),\n    step: _ctx.step,\n    disabled: _ctx.sliderDisabled,\n    controls: _ctx.showInputControls,\n    min: _ctx.min,\n    max: _ctx.max,\n    debounce: _ctx.debounce,\n    size: _ctx.sliderInputSize,\n    \"onUpdate:modelValue\": _ctx.setFirstValue,\n    onChange: _ctx.emitChange\n  }, null, 8, [\"model-value\", \"class\", \"step\", \"disabled\", \"controls\", \"min\", \"max\", \"debounce\", \"size\", \"onUpdate:modelValue\", \"onChange\"])) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\nvar Slider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Slider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElInputNumber","SliderButton","SliderMarker","props","modelValue","type","Number","default","min","max","step","showInput","showInputControls","size","validator","inputSize","showStops","showTooltip","formatTooltip","disabled","range","vertical","height","debounce","label","tooltipClass","marks","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","emit","ns","useNamespace","initData","reactive","firstValue","secondValue","oldValue","dragging","sliderSize","elFormItem","slider","firstButton","secondButton","sliderDisabled","minValue","maxValue","runwayStyle","barStyle","resetSize","emitChange","onSliderClick","setFirstValue","setSecondValue","stops","getStopStyle","useStops","sliderWrapperSize","sliderInputSize","computed","m","is","markList","useMarks","useWatch","map","item","decimal","length","sliderWrapper","useLifecycle","toRefs","val","provide","precision","updateDragging","sliderKls","INPUT_EVENT","valueChanged","every","setValues","throwError","_emit","watch","deep","onMounted","valuetext","setAttribute","on","onBeforeUnmount","off","_openBlock","ref","class","role","style","onClick","_createElementVNode","_normalizeClass","key","_ctx","_normalizeStyle","mark","controls","onChange"],"sources":["../../../../../../packages/components/slider/src/index.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"sliderWrapper\"\n    :class=\"sliderKls\"\n    role=\"slider\"\n    :aria-valuemin=\"min\"\n    :aria-valuemax=\"max\"\n    :aria-orientation=\"vertical ? 'vertical' : 'horizontal'\"\n    :aria-disabled=\"sliderDisabled\"\n  >\n    <div\n      ref=\"slider\"\n      :class=\"[\n        ns.e('runway'),\n        { 'show-input': showInput && !range },\n        ns.is('disabled', sliderDisabled),\n      ]\"\n      :style=\"runwayStyle\"\n      @click=\"onSliderClick\"\n    >\n      <div :class=\"ns.e('bar')\" :style=\"barStyle\" />\n      <slider-button\n        ref=\"firstButton\"\n        :model-value=\"firstValue\"\n        :vertical=\"vertical\"\n        :tooltip-class=\"tooltipClass\"\n        @update:model-value=\"setFirstValue\"\n      />\n      <slider-button\n        v-if=\"range\"\n        ref=\"secondButton\"\n        :model-value=\"secondValue\"\n        :vertical=\"vertical\"\n        :tooltip-class=\"tooltipClass\"\n        @update:model-value=\"setSecondValue\"\n      />\n      <div v-if=\"showStops\">\n        <div\n          v-for=\"(item, key) in stops\"\n          :key=\"key\"\n          :class=\"ns.e('stop')\"\n          :style=\"getStopStyle(item)\"\n        />\n      </div>\n      <template v-if=\"markList.length > 0\">\n        <div>\n          <div\n            v-for=\"(item, key) in markList\"\n            :key=\"key\"\n            :style=\"getStopStyle(item.position)\"\n            :class=\"[ns.e('stop'), ns.e('marks-stop')]\"\n          />\n        </div>\n        <div :class=\"ns.e('marks')\">\n          <slider-marker\n            v-for=\"(item, key) in markList\"\n            :key=\"key\"\n            :mark=\"item.mark\"\n            :style=\"getStopStyle(item.position)\"\n          />\n        </div>\n      </template>\n    </div>\n    <el-input-number\n      v-if=\"showInput && !range\"\n      ref=\"input\"\n      :model-value=\"firstValue\"\n      :class=\"ns.e('input')\"\n      :step=\"step\"\n      :disabled=\"sliderDisabled\"\n      :controls=\"showInputControls\"\n      :min=\"min\"\n      :max=\"max\"\n      :debounce=\"debounce\"\n      :size=\"sliderInputSize\"\n      @update:model-value=\"setFirstValue\"\n      @change=\"emitChange\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport ElInputNumber from '@element-plus/components/input-number'\nimport {\n  UPDATE_MODEL_EVENT,\n  CHANGE_EVENT,\n  INPUT_EVENT,\n} from '@element-plus/constants'\nimport {\n  off,\n  on,\n  throwError,\n  isValidComponentSize,\n  debugWarn,\n} from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport SliderButton from './button.vue'\nimport SliderMarker from './marker.vue'\nimport { useMarks } from './useMarks'\nimport { useSlide } from './useSlide'\nimport { useStops } from './useStops'\n\nimport type { PropType, Ref } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElSlider',\n\n  components: {\n    ElInputNumber,\n    SliderButton,\n    SliderMarker,\n  },\n\n  props: {\n    modelValue: {\n      type: [Number, Array] as PropType<number | number[]>,\n      default: 0,\n    },\n    min: {\n      type: Number,\n      default: 0,\n    },\n    max: {\n      type: Number,\n      default: 100,\n    },\n    step: {\n      type: Number,\n      default: 1,\n    },\n    showInput: {\n      type: Boolean,\n      default: false,\n    },\n    showInputControls: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    inputSize: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    showStops: {\n      type: Boolean,\n      default: false,\n    },\n    showTooltip: {\n      type: Boolean,\n      default: true,\n    },\n    formatTooltip: {\n      type: Function as PropType<(val: number) => number | string>,\n      default: undefined,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    range: {\n      type: Boolean,\n      default: false,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n    height: {\n      type: String,\n      default: '',\n    },\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    label: {\n      type: String,\n      default: undefined,\n    },\n    tooltipClass: {\n      type: String,\n      default: undefined,\n    },\n    marks: Object,\n  },\n\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT],\n\n  setup(props, { emit }) {\n    const ns = useNamespace('slider')\n    const initData = reactive({\n      firstValue: 0,\n      secondValue: 0,\n      oldValue: 0,\n      dragging: false,\n      sliderSize: 1,\n    })\n\n    const {\n      elFormItem,\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      minValue,\n      maxValue,\n      runwayStyle,\n      barStyle,\n      resetSize,\n      emitChange,\n      onSliderClick,\n      setFirstValue,\n      setSecondValue,\n    } = useSlide(props, initData, emit)\n\n    const { stops, getStopStyle } = useStops(\n      props,\n      initData,\n      minValue,\n      maxValue\n    )\n\n    const sliderWrapperSize = useSize()\n    const sliderInputSize = computed(\n      () => props.inputSize || sliderWrapperSize.value\n    )\n\n    const sliderKls = computed(() => [\n      ns.b(),\n      ns.m(sliderWrapperSize.value),\n      ns.is('vertical', props.vertical),\n      { [ns.m('with-input')]: props.showInput },\n    ])\n\n    const markList = useMarks(props)\n\n    useWatch(props, initData, minValue, maxValue, emit, elFormItem)\n\n    const precision = computed(() => {\n      const precisions = [props.min, props.max, props.step].map((item) => {\n        const decimal = `${item}`.split('.')[1]\n        return decimal ? decimal.length : 0\n      })\n      return Math.max.apply(null, precisions)\n    })\n\n    const { sliderWrapper } = useLifecycle(props, initData, resetSize)\n\n    const { firstValue, secondValue, oldValue, dragging, sliderSize } =\n      toRefs(initData)\n\n    const updateDragging = (val: boolean) => {\n      initData.dragging = val\n    }\n\n    provide('SliderProvider', {\n      ...toRefs(props),\n      sliderSize,\n      disabled: sliderDisabled,\n      precision,\n      emitChange,\n      resetSize,\n      updateDragging,\n    })\n\n    return {\n      ns,\n      firstValue,\n      secondValue,\n      oldValue,\n      dragging,\n      sliderSize,\n\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      runwayStyle,\n      barStyle,\n      emitChange,\n      onSliderClick,\n      getStopStyle,\n      setFirstValue,\n      setSecondValue,\n\n      stops,\n      markList,\n\n      sliderWrapper,\n      sliderWrapperSize,\n      sliderInputSize,\n      sliderKls,\n    }\n  },\n})\n\nconst useWatch = (props, initData, minValue, maxValue, emit, elFormItem) => {\n  const _emit = (val: number | number[]) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(INPUT_EVENT, val)\n  }\n\n  const valueChanged = () => {\n    if (props.range) {\n      return ![minValue.value, maxValue.value].every(\n        (item, index) => item === initData.oldValue[index]\n      )\n    } else {\n      return props.modelValue !== initData.oldValue\n    }\n  }\n\n  const setValues = () => {\n    if (props.min > props.max) {\n      throwError('Slider', 'min should not be greater than max.')\n      return\n    }\n    const val = props.modelValue\n    if (props.range && Array.isArray(val)) {\n      if (val[1] < props.min) {\n        _emit([props.min, props.min])\n      } else if (val[0] > props.max) {\n        _emit([props.max, props.max])\n      } else if (val[0] < props.min) {\n        _emit([props.min, val[1]])\n      } else if (val[1] > props.max) {\n        _emit([val[0], props.max])\n      } else {\n        initData.firstValue = val[0]\n        initData.secondValue = val[1]\n        if (valueChanged()) {\n          elFormItem.validate?.('change').catch((err) => debugWarn(err))\n          initData.oldValue = val.slice()\n        }\n      }\n    } else if (!props.range && typeof val === 'number' && !Number.isNaN(val)) {\n      if (val < props.min) {\n        _emit(props.min)\n      } else if (val > props.max) {\n        _emit(props.max)\n      } else {\n        initData.firstValue = val\n        if (valueChanged()) {\n          elFormItem.validate?.('change').catch((err) => debugWarn(err))\n          initData.oldValue = val\n        }\n      }\n    }\n  }\n\n  setValues()\n\n  watch(\n    () => initData.dragging,\n    (val) => {\n      if (!val) {\n        setValues()\n      }\n    }\n  )\n\n  watch(\n    () => props.modelValue,\n    (val, oldVal) => {\n      if (\n        initData.dragging ||\n        (Array.isArray(val) &&\n          Array.isArray(oldVal) &&\n          val.every((item, index) => item === oldVal[index]) &&\n          initData.firstValue === val[0] &&\n          initData.secondValue === val[1])\n      ) {\n        return\n      }\n      setValues()\n    },\n    {\n      deep: true,\n    }\n  )\n\n  watch(\n    () => [props.min, props.max],\n    () => {\n      setValues()\n    }\n  )\n}\n\nconst useLifecycle = (props, initData, resetSize) => {\n  const sliderWrapper: Ref<Nullable<HTMLElement>> = ref(null)\n\n  onMounted(async () => {\n    let valuetext\n    if (props.range) {\n      if (Array.isArray(props.modelValue)) {\n        initData.firstValue = Math.max(props.min, props.modelValue[0])\n        initData.secondValue = Math.min(props.max, props.modelValue[1])\n      } else {\n        initData.firstValue = props.min\n        initData.secondValue = props.max\n      }\n      initData.oldValue = [initData.firstValue, initData.secondValue]\n      valuetext = `${initData.firstValue}-${initData.secondValue}`\n    } else {\n      if (\n        typeof props.modelValue !== 'number' ||\n        Number.isNaN(props.modelValue)\n      ) {\n        initData.firstValue = props.min\n      } else {\n        initData.firstValue = Math.min(\n          props.max,\n          Math.max(props.min, props.modelValue)\n        )\n      }\n      initData.oldValue = initData.firstValue\n      valuetext = initData.firstValue\n    }\n\n    sliderWrapper.value.setAttribute('aria-valuetext', valuetext)\n\n    // label screen reader\n    sliderWrapper.value.setAttribute(\n      'aria-label',\n      props.label ? props.label : `slider between ${props.min} and ${props.max}`\n    )\n\n    on(window, 'resize', resetSize)\n\n    await nextTick()\n    resetSize()\n  })\n\n  onBeforeUnmount(() => {\n    off(window, 'resize', resetSize)\n  })\n\n  return {\n    sliderWrapper,\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}