{"ast":null,"code":"import { defineComponent, ref, watch, watchEffect, openBlock, createElementBlock, createElementVNode, Fragment, renderList, normalizeClass, normalizeStyle } from 'vue';\nimport { useOptions } from '../useOption.mjs';\nimport Color from '../color.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nconst _sfc_main = defineComponent({\n  props: {\n    colors: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const {\n      currentColor\n    } = useOptions();\n    const rgbaColors = ref(parseColors(props.colors, props.color));\n    watch(() => currentColor.value, val => {\n      const color = new Color();\n      color.fromString(val);\n      rgbaColors.value.forEach(item => {\n        item.selected = color.compare(item);\n      });\n    });\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color);\n    });\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index]);\n    }\n    function parseColors(colors, color) {\n      return colors.map(value => {\n        const c = new Color();\n        c.enableAlpha = true;\n        c.format = \"rgba\";\n        c.fromString(value);\n        c.selected = c.value === color.value;\n        return c;\n      });\n    }\n    return {\n      rgbaColors,\n      handleSelect\n    };\n  }\n});\nconst _hoisted_1 = {\n  class: \"el-color-predefine\"\n};\nconst _hoisted_2 = {\n  class: \"el-color-predefine__colors\"\n};\nconst _hoisted_3 = [\"onClick\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", _hoisted_2, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rgbaColors, (item, index) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: _ctx.colors[index],\n      class: normalizeClass([\"el-color-predefine__color-selector\", {\n        selected: item.selected,\n        \"is-alpha\": item._alpha < 100\n      }]),\n      onClick: $event => _ctx.handleSelect(index)\n    }, [createElementVNode(\"div\", {\n      style: normalizeStyle({\n        backgroundColor: item.value\n      })\n    }, null, 4)], 10, _hoisted_3);\n  }), 128))])]);\n}\nvar Predefine = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Predefine as default };","map":{"version":3,"mappings":";;;;AAuBA,MAAKA,YAAaC,eAAa;EAC7BC,KAAO;IACLC,MAAQ;MAAEC,IAAM;MAAOC,QAAU;IAAA;IACjCC,KAAO;MACLF,IAAM;MACNC,QAAU;IAAA;EAAA;EAGdE,MAAML,KAAO;IACX,MAAM;MAAEM;IAAiB;IAEzB,MAAMC,UAAa,OAAIC,WAAY,OAAMP,QAAQD,KAAM;IAGvDS,MACE,MAAMH,aAAaI,KACnB,EAACC,GAAQ;MACP,MAAMP,QAAQ,IAAIQ;MAClBR,MAAMS,UAAW;MAENN,iBAAMO,OAAQ,CAACC,IAAS;QAC5BA,gBAAWX,MAAMY,OAAQ;MAAA;IAAA;IAIpCC,YAAY,MAAM;MAChBV,WAAWG,KAAQ,eAAYV,KAAM,SAAQA,KAAM;IAAA;IAGrD,sBAAsBkB,KAAO;MACrBlB,YAAMa,UAAW,OAAMZ,MAAO;IAAA;IAEtC,qBAAqBA,QAAQG,KAAO;MAC3B,cAAOe,GAAI,CAACT,KAAU;QAC3B,MAAMU,IAAI,IAAIR;QACdQ,EAAEC,WAAc;QAChBD,EAAEE,MAAS;QACXF,EAAEP,UAAW;QACXO,aAAWA,CAAE,WAAUhB,KAAM;QACxB;MAAA;IAAA;IAGJ;MACLG;MACAgB;IAAA;EAAA;AAAA;;EAlECC,KAAM;AAAA;;EACJA,KAAM;AAAA;;;EADb,uCAYM,OAZNC,UAYM,GAXJC,mBAUM,OAVNC,UAUM,qBATJC,kBAQM,4BAPoBC,IAAU,cAA1Bd,MAAMG,KAAK;wBADrBU,kBAQM;MANHE,KAAKD,IAAO;MACbL,OAAKO,gBAAC,oCAAoC;QAAAC,UACtBjB,KAAKiB,QAAQ;QAAA,YAAcjB,KAAKkB,MAAM;MAAA;MACzDC,SAAKC,UAAEN,IAAa;IAAA,IAErBH,kBAAgD;MAA1CU,OAAKC;QAAAA,iBAAqBtB,IAAK;MAAA;IAAA","names":["_sfc_main","defineComponent","props","colors","type","required","color","setup","currentColor","rgbaColors","parseColors","watch","value","val","Color","fromString","forEach","item","compare","watchEffect","index","map","c","enableAlpha","format","handleSelect","class","_hoisted_1","_createElementVNode","_hoisted_2","_createElementBlock","_ctx","key","_normalizeClass","selected","_alpha","onClick","$event","style","_normalizeStyle"],"sources":["../../../../../../../packages/components/color-picker/src/components/predefine.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-predefine\">\n    <div class=\"el-color-predefine__colors\">\n      <div\n        v-for=\"(item, index) in rgbaColors\"\n        :key=\"colors[index]\"\n        class=\"el-color-predefine__color-selector\"\n        :class=\"{ selected: item.selected, 'is-alpha': item._alpha < 100 }\"\n        @click=\"handleSelect(index)\"\n      >\n        <div :style=\"{ backgroundColor: item.value }\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, watch, watchEffect, defineComponent } from 'vue'\nimport { useOptions } from '../useOption'\nimport Color from '../color'\n\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  props: {\n    colors: { type: Array, required: true },\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    const { currentColor } = useOptions()\n    //data\n    const rgbaColors = ref(parseColors(props.colors, props.color))\n\n    //watch\n    watch(\n      () => currentColor.value,\n      (val) => {\n        const color = new Color()\n        color.fromString(val)\n\n        rgbaColors.value.forEach((item) => {\n          item.selected = color.compare(item)\n        })\n      }\n    )\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color)\n    })\n\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index])\n    }\n    function parseColors(colors, color) {\n      return colors.map((value) => {\n        const c = new Color()\n        c.enableAlpha = true\n        c.format = 'rgba'\n        c.fromString(value)\n        c.selected = c.value === color.value\n        return c\n      })\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}