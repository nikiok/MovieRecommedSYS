{"ast":null,"code":"import { ref } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { isNumber } from '@vueuse/core';\nconst useScrollbar = () => {\n  const scrollBarRef = ref();\n  const scrollTo = ({\n    top,\n    left\n  }) => {\n    setScrollTop(top);\n    setScrollLeft(left);\n  };\n  const setScrollPosition = (position, offset) => {\n    const scrollbar = scrollBarRef.value;\n    if (scrollbar && isNumber(offset) && [\"Top\", \"Left\"].includes(position)) {\n      scrollbar[`setScroll${position}`](offset);\n    }\n  };\n  const setScrollTop = top => setScrollPosition(\"Top\", top);\n  const setScrollLeft = left => setScrollPosition(\"Left\", left);\n  return {\n    scrollBarRef,\n    scrollTo,\n    setScrollTop,\n    setScrollLeft\n  };\n};\nexport { useScrollbar };","map":{"version":3,"mappings":";;;AAEY,MAACA,YAAY,GAAGA,MAAM;EAChC,MAAMC,YAAY,GAAGC,GAAG,EAAE;EAC1B,MAAMC,QAAQ,GAAGA,CAAC;IAAEC,GAAG;IAAEC;EAAI,CAAE,KAAK;IAClCC,YAAY,CAACF,GAAG,CAAC;IACjBG,aAAa,CAACF,IAAI,CAAC;EACvB,CAAG;EACD,MAAMG,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,MAAM,KAAK;IAC9C,MAAMC,SAAS,GAAGV,YAAY,CAACW,KAAK;IACpC,IAAID,SAAS,IAAIE,QAAQ,CAACH,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAACI,QAAQ,CAACL,QAAQ,CAAC,EAAE;MACvEE,SAAS,CAAE,YAAWF,QAAS,EAAC,CAAC,CAACC,MAAM,CAAC;IAC/C;EACA,CAAG;EACD,MAAMJ,YAAY,GAAIF,GAAG,IAAKI,iBAAiB,CAAC,KAAK,EAAEJ,GAAG,CAAC;EAC3D,MAAMG,aAAa,GAAIF,IAAI,IAAKG,iBAAiB,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC/D,OAAO;IACLJ,YAAY;IACZE,QAAQ;IACRG,YAAY;IACZC;EACJ,CAAG;AACH","names":["useScrollbar","scrollBarRef","ref","scrollTo","top","left","setScrollTop","setScrollLeft","setScrollPosition","position","offset","scrollbar","value","isNumber","includes"],"sources":["../../../../../../../packages/components/table/src/composables/use-scrollbar.ts"],"sourcesContent":["import { ref } from 'vue'\nimport { isNumber } from '@element-plus/utils'\n\nexport const useScrollbar = () => {\n  const scrollBarRef = ref()\n\n  const scrollTo = ({ top, left }: { top?: number; left?: number }) => {\n    setScrollTop(top)\n    setScrollLeft(left)\n  }\n\n  const setScrollPosition = (position: 'Top' | 'Left', offset?: number) => {\n    const scrollbar = scrollBarRef.value\n    if (scrollbar && isNumber(offset) && ['Top', 'Left'].includes(position)) {\n      scrollbar[`setScroll${position}`](offset)\n    }\n  }\n\n  const setScrollTop = (top?: number) => setScrollPosition('Top', top)\n  const setScrollLeft = (left?: number) => setScrollPosition('Left', left)\n\n  return {\n    scrollBarRef,\n    scrollTo,\n    setScrollTop,\n    setScrollLeft,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}