{"ast":null,"code":"import { defineComponent, ref, computed, resolveComponent, openBlock, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createElementBlock, Fragment, renderList } from 'vue';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport { ElSelect } from '../../select/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Clock, CircleClose } from '@element-plus/icons-vue';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\ndayjs.extend(customParseFormat);\nconst {\n  Option: ElOption\n} = ElSelect;\nconst parseTime = time => {\n  const values = (time || \"\").split(\":\");\n  if (values.length >= 2) {\n    let hours = Number.parseInt(values[0], 10);\n    const minutes = Number.parseInt(values[1], 10);\n    const timeUpper = time.toUpperCase();\n    if (timeUpper.includes(\"AM\") && hours === 12) {\n      hours = 0;\n    } else if (timeUpper.includes(\"PM\") && hours !== 12) {\n      hours += 12;\n    }\n    return {\n      hours,\n      minutes\n    };\n  }\n  return null;\n};\nconst compareTime = (time1, time2) => {\n  const value1 = parseTime(time1);\n  const value2 = parseTime(time2);\n  const minutes1 = value1.minutes + value1.hours * 60;\n  const minutes2 = value2.minutes + value2.hours * 60;\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n  return minutes1 > minutes2 ? 1 : -1;\n};\nconst padTime = time => {\n  return `${time}`.padStart(2, \"0\");\n};\nconst formatTime = time => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`;\n};\nconst nextTime = (time, step) => {\n  const timeValue = parseTime(time);\n  const stepValue = parseTime(step);\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};\nconst _sfc_main = defineComponent({\n  name: \"ElTimeSelect\",\n  components: {\n    ElSelect,\n    ElOption,\n    ElIcon\n  },\n  model: {\n    prop: \"value\",\n    event: \"change\"\n  },\n  props: {\n    format: {\n      type: String,\n      default: \"HH:mm\"\n    },\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    editable: {\n      type: Boolean,\n      default: true\n    },\n    effect: {\n      type: String,\n      default: \"light\"\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      default: \"default\",\n      validator: value => !value || [\"large\", \"default\", \"small\"].includes(value)\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    start: {\n      type: String,\n      default: \"09:00\"\n    },\n    end: {\n      type: String,\n      default: \"18:00\"\n    },\n    step: {\n      type: String,\n      default: \"00:30\"\n    },\n    minTime: {\n      type: String,\n      default: \"\"\n    },\n    maxTime: {\n      type: String,\n      default: \"\"\n    },\n    name: {\n      type: String,\n      default: \"\"\n    },\n    prefixIcon: {\n      type: [String, Object],\n      default: Clock\n    },\n    clearIcon: {\n      type: [String, Object],\n      default: CircleClose\n    }\n  },\n  emits: [\"change\", \"blur\", \"focus\", \"update:modelValue\"],\n  setup(props) {\n    const select = ref(null);\n    const value = computed(() => props.modelValue);\n    const start = computed(() => {\n      const time = parseTime(props.start);\n      return formatTime(time);\n    });\n    const end = computed(() => {\n      const time = parseTime(props.end);\n      return formatTime(time);\n    });\n    const step = computed(() => {\n      const time = parseTime(props.step);\n      return formatTime(time);\n    });\n    const minTime = computed(() => {\n      const time = parseTime(props.minTime);\n      return time ? formatTime(time) : null;\n    });\n    const maxTime = computed(() => {\n      const time = parseTime(props.maxTime);\n      return time ? formatTime(time) : null;\n    });\n    const items = computed(() => {\n      const result = [];\n      if (props.start && props.end && props.step) {\n        let current = start.value;\n        let currentTime;\n        while (compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, \"HH:mm\").format(props.format);\n          result.push({\n            value: currentTime,\n            disabled: compareTime(current, minTime.value || \"-1:-1\") <= 0 || compareTime(current, maxTime.value || \"100:100\") >= 0\n          });\n          current = nextTime(current, step.value);\n        }\n      }\n      return result;\n    });\n    const blur = () => {\n      var _a, _b;\n      (_b = (_a = select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    return {\n      select,\n      value,\n      items,\n      blur,\n      focus\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_option = resolveComponent(\"el-option\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_select = resolveComponent(\"el-select\");\n  return openBlock(), createBlock(_component_el_select, {\n    ref: \"select\",\n    \"model-value\": _ctx.value,\n    disabled: _ctx.disabled,\n    clearable: _ctx.clearable,\n    \"clear-icon\": _ctx.clearIcon,\n    size: _ctx.size,\n    effect: _ctx.effect,\n    placeholder: _ctx.placeholder,\n    \"default-first-option\": \"\",\n    filterable: _ctx.editable,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = event => _ctx.$emit(\"update:modelValue\", event)),\n    onChange: _cache[1] || (_cache[1] = event => _ctx.$emit(\"change\", event)),\n    onBlur: _cache[2] || (_cache[2] = event => _ctx.$emit(\"blur\", event)),\n    onFocus: _cache[3] || (_cache[3] = event => _ctx.$emit(\"focus\", event))\n  }, {\n    prefix: withCtx(() => [_ctx.prefixIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: \"el-input__prefix-icon\"\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n      _: 1\n    })) : createCommentVNode(\"v-if\", true)]),\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, item => {\n      return openBlock(), createBlock(_component_el_option, {\n        key: item.value,\n        label: item.value,\n        value: item.value,\n        disabled: item.disabled\n      }, null, 8, [\"label\", \"value\", \"disabled\"]);\n    }), 128))]),\n    _: 1\n  }, 8, [\"model-value\", \"disabled\", \"clearable\", \"clear-icon\", \"size\", \"effect\", \"placeholder\", \"filterable\"]);\n}\nvar TimeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TimeSelect as default };","map":{"version":3,"mappings":"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","names":["dayjs","extend","Option","ElOption","parseTime","time","split","length","hours","parseInt","minutes","timeUpper","compareTime","time1","time2","value1","value2","minutes1","minutes2","padTime","formatTime","nextTime","step","timeValue","stepValue","next","floor","_sfc_main","defineComponent","name","components","ElSelect","ElIcon","model","prop","event","props","format","type","default","modelValue","disabled","editable","effect","clearable","size","validator","value","includes","placeholder","start","end","minTime","maxTime","prefixIcon","String","clearIcon","emits","setup","select","ref","computed","result","current","currentTime","push","blur","_b","items","focus","_component_el_select","_openBlock","filterable","_cache","_ctx","onChange","onBlur","onFocus","prefix","key","label"],"sources":["../../../../../../packages/components/time-select/src/time-select.vue"],"sourcesContent":["<template>\n  <el-select\n    ref=\"select\"\n    :model-value=\"value\"\n    :disabled=\"disabled\"\n    :clearable=\"clearable\"\n    :clear-icon=\"clearIcon\"\n    :size=\"size\"\n    :effect=\"effect\"\n    :placeholder=\"placeholder\"\n    default-first-option\n    :filterable=\"editable\"\n    @update:model-value=\"(event) => $emit('update:modelValue', event)\"\n    @change=\"(event) => $emit('change', event)\"\n    @blur=\"(event) => $emit('blur', event)\"\n    @focus=\"(event) => $emit('focus', event)\"\n  >\n    <el-option\n      v-for=\"item in items\"\n      :key=\"item.value\"\n      :label=\"item.value\"\n      :value=\"item.value\"\n      :disabled=\"item.disabled\"\n    />\n    <template #prefix>\n      <el-icon v-if=\"prefixIcon\" class=\"el-input__prefix-icon\">\n        <component :is=\"prefixIcon\" />\n      </el-icon>\n    </template>\n  </el-select>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\nimport ElSelect from '@element-plus/components/select'\nimport ElIcon from '@element-plus/components/icon'\nimport { CircleClose, Clock } from '@element-plus/icons-vue'\n\nimport type { PropType, Component } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\ndayjs.extend(customParseFormat)\n\nconst { Option: ElOption } = ElSelect\n\ninterface Time {\n  hours: number\n  minutes: number\n}\n\nconst parseTime = (time: string): null | Time => {\n  const values = (time || '').split(':')\n  if (values.length >= 2) {\n    let hours = Number.parseInt(values[0], 10)\n    const minutes = Number.parseInt(values[1], 10)\n    const timeUpper = time.toUpperCase()\n    if (timeUpper.includes('AM') && hours === 12) {\n      hours = 0\n    } else if (timeUpper.includes('PM') && hours !== 12) {\n      hours += 12\n    }\n    return {\n      hours,\n      minutes,\n    }\n  }\n  return null\n}\nconst compareTime = (time1: string, time2: string): number => {\n  const value1 = parseTime(time1)\n  const value2 = parseTime(time2)\n  const minutes1 = value1.minutes + value1.hours * 60\n  const minutes2 = value2.minutes + value2.hours * 60\n  if (minutes1 === minutes2) {\n    return 0\n  }\n  return minutes1 > minutes2 ? 1 : -1\n}\nconst padTime = (time: number | string) => {\n  return `${time}`.padStart(2, '0')\n}\nconst formatTime = (time: Time): string => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`\n}\nconst nextTime = (time: string, step: string): string => {\n  const timeValue = parseTime(time)\n  const stepValue = parseTime(step)\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes,\n  }\n  next.minutes += stepValue.minutes\n  next.hours += stepValue.hours\n  next.hours += Math.floor(next.minutes / 60)\n  next.minutes = next.minutes % 60\n  return formatTime(next)\n}\n\nexport default defineComponent({\n  name: 'ElTimeSelect',\n  components: { ElSelect, ElOption, ElIcon },\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n  props: {\n    format: {\n      type: String,\n      default: 'HH:mm',\n    },\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    editable: {\n      type: Boolean,\n      default: true,\n    },\n    effect: {\n      type: String as PropType<'light' | 'dark' | string>,\n      default: 'light',\n    },\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      default: 'default',\n      validator: (value: string) =>\n        !value || ['large', 'default', 'small'].includes(value),\n    },\n    placeholder: {\n      type: String,\n      default: '',\n    },\n    start: {\n      type: String,\n      default: '09:00',\n    },\n    end: {\n      type: String,\n      default: '18:00',\n    },\n    step: {\n      type: String,\n      default: '00:30',\n    },\n    minTime: {\n      type: String,\n      default: '',\n    },\n    maxTime: {\n      type: String,\n      default: '',\n    },\n    name: {\n      type: String,\n      default: '',\n    },\n    prefixIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: Clock,\n    },\n    clearIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: CircleClose,\n    },\n  },\n  emits: ['change', 'blur', 'focus', 'update:modelValue'],\n  setup(props) {\n    // computed\n    const select = ref(null)\n    const value = computed(() => props.modelValue)\n    const start = computed(() => {\n      const time = parseTime(props.start)\n      return formatTime(time)\n    })\n    const end = computed(() => {\n      const time = parseTime(props.end)\n      return formatTime(time)\n    })\n    const step = computed(() => {\n      const time = parseTime(props.step)\n      return formatTime(time)\n    })\n    const minTime = computed(() => {\n      const time = parseTime(props.minTime)\n      return time ? formatTime(time) : null\n    })\n    const maxTime = computed(() => {\n      const time = parseTime(props.maxTime)\n      return time ? formatTime(time) : null\n    })\n    const items = computed(() => {\n      const result = []\n      if (props.start && props.end && props.step) {\n        let current = start.value\n        let currentTime\n        while (compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, 'HH:mm').format(props.format)\n          result.push({\n            value: currentTime,\n            disabled:\n              compareTime(current, minTime.value || '-1:-1') <= 0 ||\n              compareTime(current, maxTime.value || '100:100') >= 0,\n          })\n          current = nextTime(current, step.value)\n        }\n      }\n      return result\n    })\n    const blur = () => {\n      select.value?.blur?.()\n    }\n    const focus = () => {\n      select.value?.focus?.()\n    }\n\n    return {\n      select,\n      value,\n      items,\n      blur,\n      focus,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}