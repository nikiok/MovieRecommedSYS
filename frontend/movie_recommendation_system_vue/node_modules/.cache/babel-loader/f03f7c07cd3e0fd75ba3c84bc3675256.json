{"ast":null,"code":"import { defineComponent, nextTick, computed, provide, toRefs, watch, h, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckboxGroup } from './useCheckbox.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElCheckboxGroup\",\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => []\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: void 0\n    },\n    max: {\n      type: Number,\n      default: void 0\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    fill: {\n      type: String,\n      default: void 0\n    },\n    textColor: {\n      type: String,\n      default: void 0\n    },\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      elFormItem\n    } = useCheckboxGroup();\n    const checkboxGroupSize = useSize();\n    const ns = useNamespace(\"checkbox\");\n    const changeEvent = value => {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => {\n        emit(\"change\", value);\n      });\n    };\n    const modelValue = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(val) {\n        changeEvent(val);\n      }\n    });\n    provide(\"CheckboxGroup\", {\n      name: \"ElCheckboxGroup\",\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent\n    });\n    watch(() => props.modelValue, () => {\n      var _a;\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n    });\n    return () => {\n      return h(props.tag, {\n        class: ns.b(\"group\"),\n        role: \"group\",\n        \"aria-label\": \"checkbox-group\"\n      }, [renderSlot(slots, \"default\")]);\n    };\n  }\n});\nexport { _sfc_main as default };","map":{"version":3,"mappings":";;;;;;;;;;AAmBA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EAENC,KAAO;IACLC,UAAY;MACVC,IAAM;MACNC,SAASA,MAAM;IAAA;IAEjBC,QAAU;IACVC,GAAK;MACHH,IAAM;MACNC,OAAS;IAAA;IAEXG,GAAK;MACHJ,IAAM;MACNC,OAAS;IAAA;IAEXI,IAAM;MACJL,IAAM;MACNM,SAAW;IAAA;IAEbC,IAAM;MACJP,IAAM;MACNC,OAAS;IAAA;IAEXO,SAAW;MACTR,IAAM;MACNC,OAAS;IAAA;IAEXQ,GAAK;MACHT,IAAM;MACNC,OAAS;IAAA;EAAA;EAIbS,OAAO,CAACC,kBAAoB;EAE5BC,KAAMA,QAAO;IAAEC;IAAMC;EAAS;IAC5B,MAAM;MAAEC;IAAe;IACvB,MAAMC,iBAAoB;IAC1B,MAAMC,KAAKC,YAAa;IAElB,oBAAeC,KAAU;MAC7BN,KAAKF,kBAAoB;MACzBS,SAAS,MAAM;QACbP,KAAK,QAAU;MAAA;IAAA;IAInB,MAAMd,aAAasB,QAAS;MAC1BC,GAAMA;QACJ,OAAOxB,KAAM;MAAA;MAEfyB,IAAIC,GAAK;QACKC;MAAA;IAAA;IAIhBC,QAAQ,eAAiB;MACvB7B,IAAM;MACNE;MAAA,GACG4B,MAAO;MACVX;MACAS;IAAA;IAIAG,YAAM9B,KAAM,aACZ,MAAM;MACJ;MAAyD;IAG7D;IACS;MAGH,SAAOA,KAAK;QACZ+B,KAAM;QACNC,IAAc;QAEhB,cAAmB;MAAA;IAAA;EAAA","names":["_sfc_main","defineComponent","name","props","modelValue","type","default","disabled","min","max","size","validator","fill","textColor","tag","emits","UPDATE_MODEL_EVENT","setup","emit","slots","elFormItem","checkboxGroupSize","ns","useNamespace","value","nextTick","computed","get","set","val","changeEvent","provide","toRefs","watch","class","role"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  provide,\n  nextTick,\n  toRefs,\n  h,\n  renderSlot,\n} from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn, isValidComponentSize } from '@element-plus/utils'\nimport { useSize, useNamespace } from '@element-plus/hooks'\nimport { useCheckboxGroup } from './useCheckbox'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport default defineComponent({\n  name: 'ElCheckboxGroup',\n\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => [],\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      default: undefined,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    fill: {\n      type: String,\n      default: undefined,\n    },\n    textColor: {\n      type: String,\n      default: undefined,\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, { emit, slots }) {\n    const { elFormItem } = useCheckboxGroup()\n    const checkboxGroupSize = useSize()\n    const ns = useNamespace('checkbox')\n\n    const changeEvent = (value) => {\n      emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => {\n        emit('change', value)\n      })\n    }\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        changeEvent(val)\n      },\n    })\n\n    provide('CheckboxGroup', {\n      name: 'ElCheckboxGroup',\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change').catch((err) => debugWarn(err))\n      }\n    )\n    return () => {\n      return h(\n        props.tag,\n        {\n          class: ns.b('group'),\n          role: 'group',\n          'aria-label': 'checkbox-group',\n        },\n        [renderSlot(slots, 'default')]\n      )\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}