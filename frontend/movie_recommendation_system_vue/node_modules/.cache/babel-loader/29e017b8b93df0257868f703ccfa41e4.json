{"ast":null,"code":"import { defineComponent, ref, computed, inject, resolveComponent, openBlock, createBlock, Transition, withCtx, createElementBlock, createElementVNode, normalizeClass, createVNode, toDisplayString, createCommentVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../constants/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport TimeSpinner from './basic-time-spinner.mjs';\nimport { useOldValue, getAvailableArrs } from './useTimePicker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nconst _sfc_main = defineComponent({\n  components: {\n    TimeSpinner\n  },\n  props: {\n    visible: Boolean,\n    actualVisible: {\n      type: Boolean,\n      default: void 0\n    },\n    datetimeRole: {\n      type: String\n    },\n    parsedValue: {\n      type: [Object, String]\n    },\n    format: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const selectionRange = ref([0, 2]);\n    const oldValue = useOldValue(props);\n    const transitionName = computed(() => {\n      return props.actualVisible === void 0 ? \"el-zoom-in-top\" : \"\";\n    });\n    const showSeconds = computed(() => {\n      return props.format.includes(\"ss\");\n    });\n    const amPmMode = computed(() => {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n    const isValidValue = _date => {\n      const parsedDate = dayjs(_date).locale(lang.value);\n      const result = getRangeAvailableTime(parsedDate);\n      return parsedDate.isSame(result);\n    };\n    const handleCancel = () => {\n      ctx.emit(\"pick\", oldValue.value, false);\n    };\n    const handleConfirm = (visible = false, first = false) => {\n      if (first) return;\n      ctx.emit(\"pick\", props.parsedValue, visible);\n    };\n    const handleChange = _date => {\n      if (!props.visible) {\n        return;\n      }\n      const result = getRangeAvailableTime(_date).millisecond(0);\n      ctx.emit(\"pick\", result, true);\n    };\n    const setSelectionRange = (start, end) => {\n      ctx.emit(\"select-range\", start, end);\n      selectionRange.value = [start, end];\n    };\n    const changeSelectionRange = step => {\n      const list = [0, 3].concat(showSeconds.value ? [6] : []);\n      const mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      const index = list.indexOf(selectionRange.value[0]);\n      const next = (index + step + list.length) % list.length;\n      timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n    };\n    const handleKeydown = event => {\n      const code = event.code;\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        const step = code === EVENT_CODE.left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        const step = code === EVENT_CODE.up ? -1 : 1;\n        timePickerOptions[\"start_scrollDown\"](step);\n        event.preventDefault();\n        return;\n      }\n    };\n    const getRangeAvailableTime = date => {\n      const availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds\n      };\n      let result = date;\n      [\"hour\", \"minute\", \"second\"].forEach(_ => {\n        if (availableMap[_]) {\n          let availableArr;\n          const method = availableMap[_];\n          if (_ === \"minute\") {\n            availableArr = method(result.hour(), props.datetimeRole);\n          } else if (_ === \"second\") {\n            availableArr = method(result.hour(), result.minute(), props.datetimeRole);\n          } else {\n            availableArr = method(props.datetimeRole);\n          }\n          if (availableArr && availableArr.length && !availableArr.includes(result[_]())) {\n            result = result[_](availableArr[0]);\n          }\n        }\n      });\n      return result;\n    };\n    const parseUserInput = value => {\n      if (!value) return null;\n      return dayjs(value, props.format).locale(lang.value);\n    };\n    const formatToString = value => {\n      if (!value) return null;\n      return value.format(props.format);\n    };\n    const getDefaultValue = () => {\n      return dayjs(defaultValue).locale(lang.value);\n    };\n    ctx.emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    ctx.emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    ctx.emit(\"set-picker-option\", [\"handleKeydown\", handleKeydown]);\n    ctx.emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    ctx.emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    const timePickerOptions = {};\n    const onSetOption = e => {\n      timePickerOptions[e[0]] = e[1];\n    };\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue\n    } = pickerBase.props;\n    const {\n      getAvailableHours,\n      getAvailableMinutes,\n      getAvailableSeconds\n    } = getAvailableArrs(disabledHours, disabledMinutes, disabledSeconds);\n    return {\n      transitionName,\n      arrowControl,\n      onSetOption,\n      t,\n      handleConfirm,\n      handleChange,\n      setSelectionRange,\n      amPmMode,\n      showSeconds,\n      handleCancel,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds\n    };\n  }\n});\nconst _hoisted_1 = {\n  key: 0,\n  class: \"el-time-panel\"\n};\nconst _hoisted_2 = {\n  class: \"el-time-panel__footer\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_time_spinner = resolveComponent(\"time-spinner\");\n  return openBlock(), createBlock(Transition, {\n    name: _ctx.transitionName\n  }, {\n    default: withCtx(() => [_ctx.actualVisible || _ctx.visible ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", {\n      class: normalizeClass([\"el-time-panel__content\", {\n        \"has-seconds\": _ctx.showSeconds\n      }])\n    }, [createVNode(_component_time_spinner, {\n      ref: \"spinner\",\n      role: _ctx.datetimeRole || \"start\",\n      \"arrow-control\": _ctx.arrowControl,\n      \"show-seconds\": _ctx.showSeconds,\n      \"am-pm-mode\": _ctx.amPmMode,\n      \"spinner-date\": _ctx.parsedValue,\n      \"disabled-hours\": _ctx.disabledHours,\n      \"disabled-minutes\": _ctx.disabledMinutes,\n      \"disabled-seconds\": _ctx.disabledSeconds,\n      onChange: _ctx.handleChange,\n      onSetOption: _ctx.onSetOption,\n      onSelectRange: _ctx.setSelectionRange\n    }, null, 8, [\"role\", \"arrow-control\", \"show-seconds\", \"am-pm-mode\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onChange\", \"onSetOption\", \"onSelectRange\"])], 2), createElementVNode(\"div\", _hoisted_2, [createElementVNode(\"button\", {\n      type: \"button\",\n      class: \"el-time-panel__btn cancel\",\n      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleCancel && _ctx.handleCancel(...args))\n    }, toDisplayString(_ctx.t(\"el.datepicker.cancel\")), 1), createElementVNode(\"button\", {\n      type: \"button\",\n      class: \"el-time-panel__btn confirm\",\n      onClick: _cache[1] || (_cache[1] = $event => _ctx.handleConfirm())\n    }, toDisplayString(_ctx.t(\"el.datepicker.confirm\")), 1)])])) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  }, 8, [\"name\"]);\n}\nvar TimePickPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TimePickPanel as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","components","TimeSpinner","props","visible","actualVisible","type","default","datetimeRole","parsedValue","Object","format","emits","setup","ctx","t","lang","ref","oldValue","useOldValue","computed","includes","_date","parsedDate","result","getRangeAvailableTime","isSame","handleCancel","value","handleConfirm","first","millisecond","setSelectionRange","start","end","selectionRange","step","concat","showSeconds","index","indexOf","next","length","list","timePickerOptions","mapping","event","code","left","EVENT_CODE","right","changeSelectionRange","up","down","date","availableMap","hour","minute","second","_","method","availableArr","dayjs","locale","getDefaultValue","defaultValue","emit","e","pickerBase","inject","arrowControl","disabledHours","disabledMinutes","disabledSeconds","getAvailableHours","getAvailableMinutes","getAvailableSeconds","transitionName","onSetOption","handleChange","amPmMode","class","_createBlock","name","_ctx","_createElementBlock","_hoisted_1","_createElementVNode","_normalizeClass","_createVNode","role","onChange","onSelectRange","_hoisted_2","onClick","_cache"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/panel-time-pick.vue"],"sourcesContent":["<template>\n  <transition :name=\"transitionName\">\n    <div v-if=\"actualVisible || visible\" class=\"el-time-panel\">\n      <div\n        class=\"el-time-panel__content\"\n        :class=\"{ 'has-seconds': showSeconds }\"\n      >\n        <time-spinner\n          ref=\"spinner\"\n          :role=\"datetimeRole || 'start'\"\n          :arrow-control=\"arrowControl\"\n          :show-seconds=\"showSeconds\"\n          :am-pm-mode=\"amPmMode\"\n          :spinner-date=\"parsedValue\"\n          :disabled-hours=\"disabledHours\"\n          :disabled-minutes=\"disabledMinutes\"\n          :disabled-seconds=\"disabledSeconds\"\n          @change=\"handleChange\"\n          @set-option=\"onSetOption\"\n          @select-range=\"setSelectionRange\"\n        />\n      </div>\n      <div class=\"el-time-panel__footer\">\n        <button\n          type=\"button\"\n          class=\"el-time-panel__btn cancel\"\n          @click=\"handleCancel\"\n        >\n          {{ t('el.datepicker.cancel') }}\n        </button>\n        <button\n          type=\"button\"\n          class=\"el-time-panel__btn confirm\"\n          @click=\"handleConfirm()\"\n        >\n          {{ t('el.datepicker.confirm') }}\n        </button>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, inject } from 'vue'\nimport dayjs from 'dayjs'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useLocale } from '@element-plus/hooks'\nimport TimeSpinner from './basic-time-spinner.vue'\nimport { getAvailableArrs, useOldValue } from './useTimePicker'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nexport default defineComponent({\n  components: {\n    TimeSpinner,\n  },\n\n  props: {\n    visible: Boolean,\n    actualVisible: {\n      type: Boolean,\n      default: undefined,\n    },\n    datetimeRole: {\n      type: String,\n    },\n    parsedValue: {\n      type: [Object, String] as PropType<string | Dayjs>,\n    },\n    format: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: ['pick', 'select-range', 'set-picker-option'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    // data\n    const selectionRange = ref([0, 2])\n    const oldValue = useOldValue(props)\n    // computed\n    const transitionName = computed(() => {\n      return props.actualVisible === undefined ? 'el-zoom-in-top' : ''\n    })\n    const showSeconds = computed(() => {\n      return props.format.includes('ss')\n    })\n    const amPmMode = computed(() => {\n      if (props.format.includes('A')) return 'A'\n      if (props.format.includes('a')) return 'a'\n      return ''\n    })\n    // method\n    const isValidValue = (_date: Dayjs) => {\n      const parsedDate = dayjs(_date).locale(lang.value)\n      const result = getRangeAvailableTime(parsedDate)\n      return parsedDate.isSame(result)\n    }\n    const handleCancel = () => {\n      ctx.emit('pick', oldValue.value, false)\n    }\n    const handleConfirm = (visible = false, first = false) => {\n      if (first) return\n      ctx.emit('pick', props.parsedValue, visible)\n    }\n    const handleChange = (_date: Dayjs) => {\n      // visible avoids edge cases, when use scrolls during panel closing animation\n      if (!props.visible) {\n        return\n      }\n      const result = getRangeAvailableTime(_date).millisecond(0)\n      ctx.emit('pick', result, true)\n    }\n\n    const setSelectionRange = (start, end) => {\n      ctx.emit('select-range', start, end)\n      selectionRange.value = [start, end]\n    }\n\n    const changeSelectionRange = (step: number) => {\n      const list = [0, 3].concat(showSeconds.value ? [6] : [])\n      const mapping = ['hours', 'minutes'].concat(\n        showSeconds.value ? ['seconds'] : []\n      )\n      const index = list.indexOf(selectionRange.value[0])\n      const next = (index + step + list.length) % list.length\n      timePickerOptions['start_emitSelectRange'](mapping[next])\n    }\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      const code = event.code\n\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        const step = code === EVENT_CODE.left ? -1 : 1\n        changeSelectionRange(step)\n        event.preventDefault()\n        return\n      }\n\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        const step = code === EVENT_CODE.up ? -1 : 1\n        timePickerOptions['start_scrollDown'](step)\n        event.preventDefault()\n        return\n      }\n    }\n\n    const getRangeAvailableTime = (date: Dayjs) => {\n      const availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds,\n      }\n      let result = date\n      ;['hour', 'minute', 'second'].forEach((_) => {\n        if (availableMap[_]) {\n          let availableArr\n          const method = availableMap[_]\n          if (_ === 'minute') {\n            availableArr = method(result.hour(), props.datetimeRole)\n          } else if (_ === 'second') {\n            availableArr = method(\n              result.hour(),\n              result.minute(),\n              props.datetimeRole\n            )\n          } else {\n            availableArr = method(props.datetimeRole)\n          }\n          if (\n            availableArr &&\n            availableArr.length &&\n            !availableArr.includes(result[_]())\n          ) {\n            result = result[_](availableArr[0])\n          }\n        }\n      })\n      return result\n    }\n\n    const parseUserInput = (value: Dayjs) => {\n      if (!value) return null\n      return dayjs(value, props.format).locale(lang.value)\n    }\n\n    const formatToString = (value: Dayjs) => {\n      if (!value) return null\n      return value.format(props.format)\n    }\n\n    const getDefaultValue = () => {\n      return dayjs(defaultValue).locale(lang.value)\n    }\n\n    ctx.emit('set-picker-option', ['isValidValue', isValidValue])\n    ctx.emit('set-picker-option', ['formatToString', formatToString])\n    ctx.emit('set-picker-option', ['parseUserInput', parseUserInput])\n    ctx.emit('set-picker-option', ['handleKeydown', handleKeydown])\n    ctx.emit('set-picker-option', [\n      'getRangeAvailableTime',\n      getRangeAvailableTime,\n    ])\n    ctx.emit('set-picker-option', ['getDefaultValue', getDefaultValue])\n    const timePickerOptions = {} as any\n    const onSetOption = (e) => {\n      timePickerOptions[e[0]] = e[1]\n    }\n    const pickerBase = inject('EP_PICKER_BASE') as any\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue,\n    } = pickerBase.props\n    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } =\n      getAvailableArrs(disabledHours, disabledMinutes, disabledSeconds)\n\n    return {\n      transitionName,\n      arrowControl,\n      onSetOption,\n      t,\n      handleConfirm,\n      handleChange,\n      setSelectionRange,\n      amPmMode,\n      showSeconds,\n      handleCancel,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}