{"ast":null,"code":"import { defineComponent, reactive, computed, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString, createBlock, createCommentVNode, withDirectives, Fragment, renderList, vShow, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { ElCheckboxGroup, ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { Search } from '@element-plus/icons-vue';\nimport { useCheckProps, CHECKED_CHANGE_EVENT, useCheck } from './useCheck.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTransferPanel\",\n  components: {\n    ElCheckboxGroup,\n    ElCheckbox,\n    ElInput,\n    OptionContent: ({\n      option\n    }) => option\n  },\n  props: useCheckProps,\n  emits: [CHECKED_CHANGE_EVENT],\n  setup(props, {\n    slots\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"transfer\");\n    const panelState = reactive({\n      checked: [],\n      allChecked: false,\n      query: \"\",\n      inputHover: false,\n      checkChangeByUser: true\n    });\n    const {\n      labelProp,\n      keyProp,\n      disabledProp,\n      filteredData,\n      checkedSummary,\n      isIndeterminate,\n      handleAllCheckedChange\n    } = useCheck(props, panelState);\n    const hasNoMatch = computed(() => {\n      return panelState.query.length > 0 && filteredData.value.length === 0;\n    });\n    const hasFooter = computed(() => !!slots.default()[0].children.length);\n    const {\n      checked,\n      allChecked,\n      query,\n      inputHover,\n      checkChangeByUser\n    } = toRefs(panelState);\n    return {\n      ns,\n      labelProp,\n      keyProp,\n      disabledProp,\n      filteredData,\n      checkedSummary,\n      isIndeterminate,\n      handleAllCheckedChange,\n      checked,\n      allChecked,\n      query,\n      inputHover,\n      checkChangeByUser,\n      hasNoMatch,\n      SearchIcon: Search,\n      hasFooter,\n      t\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_option_content = resolveComponent(\"option-content\");\n  const _component_el_checkbox_group = resolveComponent(\"el-checkbox-group\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b(\"panel\"))\n  }, [createElementVNode(\"p\", {\n    class: normalizeClass(_ctx.ns.be(\"panel\", \"header\"))\n  }, [createVNode(_component_el_checkbox, {\n    modelValue: _ctx.allChecked,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.allChecked = $event),\n    indeterminate: _ctx.isIndeterminate,\n    onChange: _ctx.handleAllCheckedChange\n  }, {\n    default: withCtx(() => [createTextVNode(toDisplayString(_ctx.title) + \" \", 1), createElementVNode(\"span\", null, toDisplayString(_ctx.checkedSummary), 1)]),\n    _: 1\n  }, 8, [\"modelValue\", \"indeterminate\", \"onChange\"])], 2), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.be(\"panel\", \"body\"), _ctx.ns.is(\"with-footer\", _ctx.hasFooter)])\n  }, [_ctx.filterable ? (openBlock(), createBlock(_component_el_input, {\n    key: 0,\n    modelValue: _ctx.query,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.query = $event),\n    class: normalizeClass(_ctx.ns.be(\"panel\", \"filter\")),\n    size: \"default\",\n    placeholder: _ctx.placeholder,\n    \"prefix-icon\": _ctx.SearchIcon,\n    clearable: \"\",\n    onMouseenter: _cache[2] || (_cache[2] = $event => _ctx.inputHover = true),\n    onMouseleave: _cache[3] || (_cache[3] = $event => _ctx.inputHover = false)\n  }, null, 8, [\"modelValue\", \"class\", \"placeholder\", \"prefix-icon\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(_component_el_checkbox_group, {\n    modelValue: _ctx.checked,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.checked = $event),\n    class: normalizeClass([_ctx.ns.is(\"filterable\", _ctx.filterable), _ctx.ns.be(\"panel\", \"list\")])\n  }, {\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filteredData, item => {\n      return openBlock(), createBlock(_component_el_checkbox, {\n        key: item[_ctx.keyProp],\n        class: normalizeClass(_ctx.ns.be(\"panel\", \"item\")),\n        label: item[_ctx.keyProp],\n        disabled: item[_ctx.disabledProp]\n      }, {\n        default: withCtx(() => [createVNode(_component_option_content, {\n          option: _ctx.optionRender(item)\n        }, null, 8, [\"option\"])]),\n        _: 2\n      }, 1032, [\"class\", \"label\", \"disabled\"]);\n    }), 128))]),\n    _: 1\n  }, 8, [\"modelValue\", \"class\"]), [[vShow, !_ctx.hasNoMatch && _ctx.data.length > 0]]), withDirectives(createElementVNode(\"p\", {\n    class: normalizeClass(_ctx.ns.be(\"panel\", \"empty\"))\n  }, toDisplayString(_ctx.hasNoMatch ? _ctx.t(\"el.transfer.noMatch\") : _ctx.t(\"el.transfer.noData\")), 3), [[vShow, _ctx.hasNoMatch || _ctx.data.length === 0]])], 2), _ctx.hasFooter ? (openBlock(), createElementBlock(\"p\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.be(\"panel\", \"footer\"))\n  }, [renderSlot(_ctx.$slots, \"default\")], 2)) : createCommentVNode(\"v-if\", true)], 2);\n}\nvar TransferPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TransferPanel as default };","map":{"version":3,"mappings":";;;;;;;;;AA6DA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EAENC,UAAY;IACVC;IACAC;IACAC;IACAC,eAAeA,CAAC;MAAEC;IAAa;EAAA;EAGjCC,KAAO;EAEPC,OAAO,CAACC;EAERC,MAAMH,KAAO;IAAEI;EAAS;IACtB,MAAM;MAAEC;IAAM;IACd,MAAMC,KAAKC,YAAa;IAExB,MAAMC,aAAaC,QAAS;MAC1BC,OAAS;MACTC,UAAY;MACZC,KAAO;MACPC,UAAY;MACZC,iBAAmB;IAAA;IAGf;MACJC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IAAA,IACEC,SAAStB,KAAO;IAEd,mBAAauB,SAAS,MAAM;MAChC,OAAOf,WAAWI,KAAM,UAAS,CAAK,iBAAaY,MAAMC,MAAW;IAAA;IAGhE,kBAAYF,SAAS,MAAM,CAAC,CAACnB,KAAM,WAAU,GAAGsB,QAAS;IAE/D,MAAM;MAAEhB,OAAS;MAAAC;MAAYC,KAAO;MAAAC;MAAYC;IAAA,IAC9Ca,MAAO;IAEF;MACLrB;MACAS;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MAEAX;MACAC;MACAC;MACAC;MACAC;MAEAc;MACAC,UAAY;MACZC;MAEAzB;IAAA;EAAA;AAAA;;;;;;sBA7HJ0B,kBAiDM;IAjDAC,OAAKC,cAAE,SAAGC,CAAC;EAAA,IACfC,kBASI;IATAH,OAAKC,cAAE,SAAGG,EAAE;EAAA,IACdC,WAOc;IANHC;IAAU;IAClBC,aAAe;IACfC,QAAQ;EAAA;qBAET,MAAW,iCAARC,cAAQ,GACX,yBAAiC,8BAAxBA,IAAc;IAAAC;2DAI3BP,kBAiCM;IAjCAH,OAAKC,cAAG,UAAGG,GAAE,OAAmB,mBAAGO,GAAE,aAAgB;EAAA,IAEjDF,gCADRG,WAUE;IAAAC;IARSP;IAAK;IACbN,OAAKC,cAAE,SAAGG,EAAE;IACbU,IAAK;IACJC,WAAa;IACb,aAAa;IACdC;IACCC,cAAUC,oCAAET,IAAU;IACtBU,cAAUD,oCAAET,IAAU;EAAA,uHAEzBJ,WAcoB;IAZTC;IAAO;IACfN,OAAKC,cAAG,UAAGU,GAAE,YAAe,oBAAaF,QAAGL,EAAE;EAAA;qBAG7C,MAA4B,mBAD9BL,kBAQc,4BAPGU,IAAY,eAApBW,IAAI;0BADbR,WAQc;QANXC,KAAKO,IAAK;QACVpB,OAAKC,cAAE,SAAGG,EAAE;QACZiB,OAAOD,IAAK;QACZE,UAAUF,IAAK;MAAA;yBAEhB,MAA+C,CAA/Cf,WAA+C;UAA9BtC,QAAQ0C,IAAa;QAAA;;;;;mCAX/B,4BAAcA,UAAKhB,MAAM,wBAcpCU,kBAKI;IAHDH,OAAKC,cAAE,SAAGG,EAAE;EAAA,CAEV,oCAAaK,IAAC,4BAA0BA,IAAC,gCAHpC,2BAAcA,UAAKhB,MAAM,gBAM5BgB,+BAATV,kBAEI;IAAAc;IAFiBb,KAAK,iBAAES,QAAGL,EAAE;EAAA,IAC/BmB,UAAQ","names":["_sfc_main","defineComponent","name","components","ElCheckboxGroup","ElCheckbox","ElInput","OptionContent","option","props","emits","CHECKED_CHANGE_EVENT","setup","slots","t","ns","useNamespace","panelState","reactive","checked","allChecked","query","inputHover","checkChangeByUser","labelProp","keyProp","disabledProp","filteredData","checkedSummary","isIndeterminate","handleAllCheckedChange","useCheck","computed","value","length","children","toRefs","hasNoMatch","SearchIcon","hasFooter","_createElementBlock","class","_normalizeClass","b","_createElementVNode","be","_createVNode","modelValue","indeterminate","onChange","_ctx","_","is","_createBlock","key","size","placeholder","clearable","onMouseenter","_cache","onMouseleave","item","label","disabled","_renderSlot"],"sources":["../../../../../../packages/components/transfer/src/transfer-panel.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b('panel')\">\n    <p :class=\"ns.be('panel', 'header')\">\n      <el-checkbox\n        v-model=\"allChecked\"\n        :indeterminate=\"isIndeterminate\"\n        @change=\"handleAllCheckedChange\"\n      >\n        {{ title }}\n        <span>{{ checkedSummary }}</span>\n      </el-checkbox>\n    </p>\n\n    <div :class=\"[ns.be('panel', 'body'), ns.is('with-footer', hasFooter)]\">\n      <el-input\n        v-if=\"filterable\"\n        v-model=\"query\"\n        :class=\"ns.be('panel', 'filter')\"\n        size=\"default\"\n        :placeholder=\"placeholder\"\n        :prefix-icon=\"SearchIcon\"\n        clearable\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      />\n      <el-checkbox-group\n        v-show=\"!hasNoMatch && data.length > 0\"\n        v-model=\"checked\"\n        :class=\"[ns.is('filterable', filterable), ns.be('panel', 'list')]\"\n      >\n        <el-checkbox\n          v-for=\"item in filteredData\"\n          :key=\"item[keyProp]\"\n          :class=\"ns.be('panel', 'item')\"\n          :label=\"item[keyProp]\"\n          :disabled=\"item[disabledProp]\"\n        >\n          <option-content :option=\"optionRender(item)\" />\n        </el-checkbox>\n      </el-checkbox-group>\n      <p\n        v-show=\"hasNoMatch || data.length === 0\"\n        :class=\"ns.be('panel', 'empty')\"\n      >\n        {{ hasNoMatch ? t('el.transfer.noMatch') : t('el.transfer.noData') }}\n      </p>\n    </div>\n    <p v-if=\"hasFooter\" :class=\"ns.be('panel', 'footer')\">\n      <slot />\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, reactive, toRefs } from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { ElCheckbox, ElCheckboxGroup } from '@element-plus/components/checkbox'\nimport ElInput from '@element-plus/components/input'\nimport { Search } from '@element-plus/icons-vue'\nimport { useCheck, useCheckProps, CHECKED_CHANGE_EVENT } from './useCheck'\n\nexport default defineComponent({\n  name: 'ElTransferPanel',\n\n  components: {\n    ElCheckboxGroup,\n    ElCheckbox,\n    ElInput,\n    OptionContent: ({ option }) => option,\n  },\n\n  props: useCheckProps,\n\n  emits: [CHECKED_CHANGE_EVENT],\n\n  setup(props, { slots }) {\n    const { t } = useLocale()\n    const ns = useNamespace('transfer')\n\n    const panelState = reactive({\n      checked: [],\n      allChecked: false,\n      query: '',\n      inputHover: false,\n      checkChangeByUser: true,\n    })\n\n    const {\n      labelProp,\n      keyProp,\n      disabledProp,\n      filteredData,\n      checkedSummary,\n      isIndeterminate,\n      handleAllCheckedChange,\n    } = useCheck(props, panelState)\n\n    const hasNoMatch = computed(() => {\n      return panelState.query.length > 0 && filteredData.value.length === 0\n    })\n\n    const hasFooter = computed(() => !!slots.default()[0].children.length)\n\n    const { checked, allChecked, query, inputHover, checkChangeByUser } =\n      toRefs(panelState)\n\n    return {\n      ns,\n      labelProp,\n      keyProp,\n      disabledProp,\n      filteredData,\n      checkedSummary,\n      isIndeterminate,\n      handleAllCheckedChange,\n\n      checked,\n      allChecked,\n      query,\n      inputHover,\n      checkChangeByUser,\n\n      hasNoMatch,\n      SearchIcon: Search,\n      hasFooter,\n\n      t,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}