{"ast":null,"code":"/*!\n * wordcloud2.js\n * http://timdream.org/wordcloud2.js/\n *\n * Copyright 2011 - 2013 Tim Chien\n * Released under the MIT license\n */\n\n'use strict';\n\n// setImmediate\nimport \"core-js/modules/web.immediate.js\";\nif (!window.setImmediate) {\n  window.setImmediate = function setupSetImmediate() {\n    return window.msSetImmediate || window.webkitSetImmediate || window.mozSetImmediate || window.oSetImmediate || function setupSetZeroTimeout() {\n      if (!window.postMessage || !window.addEventListener) {\n        return null;\n      }\n      var callbacks = [undefined];\n      var message = 'zero-timeout-message';\n\n      // Like setTimeout, but only takes a function argument.  There's\n      // no time argument (always zero) and no arguments (you have to\n      // use a closure).\n      var setZeroTimeout = function setZeroTimeout(callback) {\n        var id = callbacks.length;\n        callbacks.push(callback);\n        window.postMessage(message + id.toString(36), '*');\n        return id;\n      };\n      window.addEventListener('message', function setZeroTimeoutMessage(evt) {\n        // Skipping checking event source, retarded IE confused this window\n        // object with another in the presence of iframe\n        if (typeof evt.data !== 'string' || evt.data.substr(0, message.length) !== message /* ||\n                                                                                           evt.source !== window */) {\n          return;\n        }\n        evt.stopImmediatePropagation();\n        var id = parseInt(evt.data.substr(message.length), 36);\n        if (!callbacks[id]) {\n          return;\n        }\n        callbacks[id]();\n        callbacks[id] = undefined;\n      }, true);\n\n      /* specify clearImmediate() here since we need the scope */\n      window.clearImmediate = function clearZeroTimeout(id) {\n        if (!callbacks[id]) {\n          return;\n        }\n        callbacks[id] = undefined;\n      };\n      return setZeroTimeout;\n    }() ||\n    // fallback\n    function setImmediateFallback(fn) {\n      window.setTimeout(fn, 0);\n    };\n  }();\n}\nif (!window.clearImmediate) {\n  window.clearImmediate = function setupClearImmediate() {\n    return window.msClearImmediate || window.webkitClearImmediate || window.mozClearImmediate || window.oClearImmediate ||\n    // \"clearZeroTimeout\" is implement on the previous block ||\n    // fallback\n    function clearImmediateFallback(timer) {\n      window.clearTimeout(timer);\n    };\n  }();\n}\n\n// Check if WordCloud can run on this browser\nvar isSupported = function isSupported() {\n  var canvas = document.createElement('canvas');\n  if (!canvas || !canvas.getContext) {\n    return false;\n  }\n  var ctx = canvas.getContext('2d');\n  if (!ctx.getImageData) {\n    return false;\n  }\n  if (!ctx.fillText) {\n    return false;\n  }\n  if (!Array.prototype.some) {\n    return false;\n  }\n  if (!Array.prototype.push) {\n    return false;\n  }\n  return true;\n}();\n\n// Find out if the browser impose minium font size by\n// drawing small texts on a canvas and measure it's width.\nvar minFontSize = function getMinFontSize() {\n  if (!isSupported) {\n    return;\n  }\n  var ctx = document.createElement('canvas').getContext('2d');\n\n  // start from 20\n  var size = 20;\n\n  // two sizes to measure\n  var hanWidth, mWidth;\n  while (size) {\n    ctx.font = size.toString(10) + 'px sans-serif';\n    if (ctx.measureText('\\uFF37').width === hanWidth && ctx.measureText('m').width === mWidth) {\n      return size + 1;\n    }\n    hanWidth = ctx.measureText('\\uFF37').width;\n    mWidth = ctx.measureText('m').width;\n    size--;\n  }\n  return 0;\n}();\n\n// Based on http://jsfromhell.com/array/shuffle\nvar shuffleArray = function shuffleArray(arr) {\n  for (var j, x, i = arr.length; i; j = Math.floor(Math.random() * i), x = arr[--i], arr[i] = arr[j], arr[j] = x) {}\n  return arr;\n};\nvar WordCloud = function WordCloud(elements, options) {\n  if (!isSupported) {\n    return;\n  }\n  if (!Array.isArray(elements)) {\n    elements = [elements];\n  }\n  elements.forEach(function (el, i) {\n    if (typeof el === 'string') {\n      elements[i] = document.getElementById(el);\n      if (!elements[i]) {\n        throw 'The element id specified is not found.';\n      }\n    } else if (!el.tagName && !el.appendChild) {\n      throw 'You must pass valid HTML elements, or ID of the element.';\n    }\n  });\n\n  /* Default values to be overwritten by options object */\n  var settings = {\n    list: [],\n    fontFamily: '\"Trebuchet MS\", \"Heiti TC\", \"微軟正黑體\", ' + '\"Arial Unicode MS\", \"Droid Fallback Sans\", sans-serif',\n    fontWeight: 'normal',\n    color: 'random-dark',\n    minSize: 0,\n    // 0 to disable\n    weightFactor: 1,\n    clearCanvas: true,\n    backgroundColor: '#fff',\n    // opaque white = rgba(255, 255, 255, 1)\n\n    gridSize: 8,\n    drawOutOfBound: false,\n    origin: null,\n    drawMask: false,\n    maskColor: 'rgba(255,0,0,0.3)',\n    maskGapWidth: 0.3,\n    layoutAnimation: true,\n    wait: 0,\n    abortThreshold: 0,\n    // disabled\n    abort: function noop() {},\n    minRotation: -Math.PI / 2,\n    maxRotation: Math.PI / 2,\n    rotationStep: 0.1,\n    shuffle: true,\n    rotateRatio: 0.1,\n    shape: 'circle',\n    ellipticity: 0.65,\n    classes: null,\n    hover: null,\n    click: null\n  };\n  if (options) {\n    for (var key in options) {\n      if (key in settings) {\n        settings[key] = options[key];\n      }\n    }\n  }\n\n  /* Convert weightFactor into a function */\n  if (typeof settings.weightFactor !== 'function') {\n    var factor = settings.weightFactor;\n    settings.weightFactor = function weightFactor(pt) {\n      return pt * factor; //in px\n    };\n  }\n\n  /* Convert shape into a function */\n  if (typeof settings.shape !== 'function') {\n    switch (settings.shape) {\n      case 'circle':\n      /* falls through */\n      default:\n        // 'circle' is the default and a shortcut in the code loop.\n        settings.shape = 'circle';\n        break;\n      case 'cardioid':\n        settings.shape = function shapeCardioid(theta) {\n          return 1 - Math.sin(theta);\n        };\n        break;\n\n      /*\n      To work out an X-gon, one has to calculate \"m\",\n      where 1/(cos(2*PI/X)+m*sin(2*PI/X)) = 1/(cos(0)+m*sin(0))\n      http://www.wolframalpha.com/input/?i=1%2F%28cos%282*PI%2FX%29%2Bm*sin%28\n      2*PI%2FX%29%29+%3D+1%2F%28cos%280%29%2Bm*sin%280%29%29\n      Copy the solution into polar equation r = 1/(cos(t') + m*sin(t'))\n      where t' equals to mod(t, 2PI/X);\n      */\n\n      case 'diamond':\n      case 'square':\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n        // %28t%2C+PI%2F2%29%29%2Bsin%28mod+%28t%2C+PI%2F2%29%29%29%2C+t+%3D\n        // +0+..+2*PI\n        settings.shape = function shapeSquare(theta) {\n          var thetaPrime = theta % (2 * Math.PI / 4);\n          return 1 / (Math.cos(thetaPrime) + Math.sin(thetaPrime));\n        };\n        break;\n      case 'triangle-forward':\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n        // %28t%2C+2*PI%2F3%29%29%2Bsqrt%283%29sin%28mod+%28t%2C+2*PI%2F3%29\n        // %29%29%2C+t+%3D+0+..+2*PI\n        settings.shape = function shapeTriangle(theta) {\n          var thetaPrime = theta % (2 * Math.PI / 3);\n          return 1 / (Math.cos(thetaPrime) + Math.sqrt(3) * Math.sin(thetaPrime));\n        };\n        break;\n      case 'triangle':\n      case 'triangle-upright':\n        settings.shape = function shapeTriangle(theta) {\n          var thetaPrime = (theta + Math.PI * 3 / 2) % (2 * Math.PI / 3);\n          return 1 / (Math.cos(thetaPrime) + Math.sqrt(3) * Math.sin(thetaPrime));\n        };\n        break;\n      case 'pentagon':\n        settings.shape = function shapePentagon(theta) {\n          var thetaPrime = (theta + 0.955) % (2 * Math.PI / 5);\n          return 1 / (Math.cos(thetaPrime) + 0.726543 * Math.sin(thetaPrime));\n        };\n        break;\n      case 'star':\n        settings.shape = function shapeStar(theta) {\n          var thetaPrime = (theta + 0.955) % (2 * Math.PI / 10);\n          if ((theta + 0.955) % (2 * Math.PI / 5) - 2 * Math.PI / 10 >= 0) {\n            return 1 / (Math.cos(2 * Math.PI / 10 - thetaPrime) + 3.07768 * Math.sin(2 * Math.PI / 10 - thetaPrime));\n          } else {\n            return 1 / (Math.cos(thetaPrime) + 3.07768 * Math.sin(thetaPrime));\n          }\n        };\n        break;\n    }\n  }\n\n  /* Make sure gridSize is a whole number and is not smaller than 4px */\n  settings.gridSize = Math.max(Math.floor(settings.gridSize), 4);\n\n  /* shorthand */\n  var g = settings.gridSize;\n  var maskRectWidth = g - settings.maskGapWidth;\n\n  /* normalize rotation settings */\n  var rotationRange = Math.abs(settings.maxRotation - settings.minRotation);\n  var minRotation = Math.min(settings.maxRotation, settings.minRotation);\n  var rotationStep = settings.rotationStep;\n\n  /* information/object available to all functions, set when start() */\n  var grid,\n    // 2d array containing filling information\n    ngx, ngy,\n    // width and height of the grid\n    center,\n    // position of the center of the cloud\n    maxRadius;\n\n  /* timestamp for measuring each putWord() action */\n  var escapeTime;\n\n  /* function for getting the color of the text */\n  var getTextColor;\n  function random_hsl_color(min, max) {\n    return 'hsl(' + (Math.random() * 360).toFixed() + ',' + (Math.random() * 30 + 70).toFixed() + '%,' + (Math.random() * (max - min) + min).toFixed() + '%)';\n  }\n  switch (settings.color) {\n    case 'random-dark':\n      getTextColor = function getRandomDarkColor() {\n        return random_hsl_color(10, 50);\n      };\n      break;\n    case 'random-light':\n      getTextColor = function getRandomLightColor() {\n        return random_hsl_color(50, 90);\n      };\n      break;\n    default:\n      if (typeof settings.color === 'function') {\n        getTextColor = settings.color;\n      }\n      break;\n  }\n\n  /* function for getting the classes of the text */\n  var getTextClasses = null;\n  if (typeof settings.classes === 'function') {\n    getTextClasses = settings.classes;\n  }\n\n  /* Interactive */\n  var interactive = false;\n  var infoGrid = [];\n  var hovered;\n  var getInfoGridFromMouseTouchEvent = function getInfoGridFromMouseTouchEvent(evt) {\n    var canvas = evt.currentTarget;\n    var rect = canvas.getBoundingClientRect();\n    var clientX;\n    var clientY;\n    /** Detect if touches are available */\n    if (evt.touches) {\n      clientX = evt.touches[0].clientX;\n      clientY = evt.touches[0].clientY;\n    } else {\n      clientX = evt.clientX;\n      clientY = evt.clientY;\n    }\n    var eventX = clientX - rect.left;\n    var eventY = clientY - rect.top;\n    var x = Math.floor(eventX * (canvas.width / rect.width || 1) / g);\n    var y = Math.floor(eventY * (canvas.height / rect.height || 1) / g);\n    return infoGrid[x][y];\n  };\n  var wordcloudhover = function wordcloudhover(evt) {\n    var info = getInfoGridFromMouseTouchEvent(evt);\n    if (hovered === info) {\n      return;\n    }\n    hovered = info;\n    if (!info) {\n      settings.hover(undefined, undefined, evt);\n      return;\n    }\n    settings.hover(info.item, info.dimension, evt);\n  };\n  var wordcloudclick = function wordcloudclick(evt) {\n    var info = getInfoGridFromMouseTouchEvent(evt);\n    if (!info) {\n      return;\n    }\n    settings.click(info.item, info.dimension, evt);\n    evt.preventDefault();\n  };\n\n  /* Get points on the grid for a given radius away from the center */\n  var pointsAtRadius = [];\n  var getPointsAtRadius = function getPointsAtRadius(radius) {\n    if (pointsAtRadius[radius]) {\n      return pointsAtRadius[radius];\n    }\n\n    // Look for these number of points on each radius\n    var T = radius * 8;\n\n    // Getting all the points at this radius\n    var t = T;\n    var points = [];\n    if (radius === 0) {\n      points.push([center[0], center[1], 0]);\n    }\n    while (t--) {\n      // distort the radius to put the cloud in shape\n      var rx = 1;\n      if (settings.shape !== 'circle') {\n        rx = settings.shape(t / T * 2 * Math.PI); // 0 to 1\n      }\n\n      // Push [x, y, t]; t is used solely for getTextColor()\n      points.push([center[0] + radius * rx * Math.cos(-t / T * 2 * Math.PI), center[1] + radius * rx * Math.sin(-t / T * 2 * Math.PI) * settings.ellipticity, t / T * 2 * Math.PI]);\n    }\n    pointsAtRadius[radius] = points;\n    return points;\n  };\n\n  /* Return true if we had spent too much time */\n  var exceedTime = function exceedTime() {\n    return settings.abortThreshold > 0 && new Date().getTime() - escapeTime > settings.abortThreshold;\n  };\n\n  /* Get the deg of rotation according to settings, and luck. */\n  var getRotateDeg = function getRotateDeg() {\n    if (settings.rotateRatio === 0) {\n      return 0;\n    }\n    if (Math.random() > settings.rotateRatio) {\n      return 0;\n    }\n    if (rotationRange === 0) {\n      return minRotation;\n    }\n    return minRotation + Math.round(Math.random() * rotationRange / rotationStep) * rotationStep;\n  };\n  var getTextInfo = function getTextInfo(word, weight, rotateDeg) {\n    // calculate the acutal font size\n    // fontSize === 0 means weightFactor function wants the text skipped,\n    // and size < minSize means we cannot draw the text.\n    var debug = false;\n    var fontSize = settings.weightFactor(weight);\n    if (fontSize <= settings.minSize) {\n      return false;\n    }\n\n    // Scale factor here is to make sure fillText is not limited by\n    // the minium font size set by browser.\n    // It will always be 1 or 2n.\n    var mu = 1;\n    if (fontSize < minFontSize) {\n      mu = function calculateScaleFactor() {\n        var mu = 2;\n        while (mu * fontSize < minFontSize) {\n          mu += 2;\n        }\n        return mu;\n      }();\n    }\n    var fcanvas = document.createElement('canvas');\n    var fctx = fcanvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    fctx.font = settings.fontWeight + ' ' + (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n    // Estimate the dimension of the text with measureText().\n    var fw = fctx.measureText(word).width / mu;\n    var fh = Math.max(fontSize * mu, fctx.measureText('m').width, fctx.measureText('\\uFF37').width) / mu;\n\n    // Create a boundary box that is larger than our estimates,\n    // so text don't get cut of (it sill might)\n    var boxWidth = fw + fh * 2;\n    var boxHeight = fh * 3;\n    var fgw = Math.ceil(boxWidth / g);\n    var fgh = Math.ceil(boxHeight / g);\n    boxWidth = fgw * g;\n    boxHeight = fgh * g;\n\n    // Calculate the proper offsets to make the text centered at\n    // the preferred position.\n\n    // This is simply half of the width.\n    var fillTextOffsetX = -fw / 2;\n    // Instead of moving the box to the exact middle of the preferred\n    // position, for Y-offset we move 0.4 instead, so Latin alphabets look\n    // vertical centered.\n    var fillTextOffsetY = -fh * 0.4;\n\n    // Calculate the actual dimension of the canvas, considering the rotation.\n    var cgh = Math.ceil((boxWidth * Math.abs(Math.sin(rotateDeg)) + boxHeight * Math.abs(Math.cos(rotateDeg))) / g);\n    var cgw = Math.ceil((boxWidth * Math.abs(Math.cos(rotateDeg)) + boxHeight * Math.abs(Math.sin(rotateDeg))) / g);\n    var width = cgw * g;\n    var height = cgh * g;\n    fcanvas.setAttribute('width', width);\n    fcanvas.setAttribute('height', height);\n    if (debug) {\n      // Attach fcanvas to the DOM\n      document.body.appendChild(fcanvas);\n      // Save it's state so that we could restore and draw the grid correctly.\n      fctx.save();\n    }\n\n    // Scale the canvas with |mu|.\n    fctx.scale(1 / mu, 1 / mu);\n    fctx.translate(width * mu / 2, height * mu / 2);\n    fctx.rotate(-rotateDeg);\n\n    // Once the width/height is set, ctx info will be reset.\n    // Set it again here.\n    fctx.font = settings.fontWeight + ' ' + (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n    // Fill the text into the fcanvas.\n    // XXX: We cannot because textBaseline = 'top' here because\n    // Firefox and Chrome uses different default line-height for canvas.\n    // Please read https://bugzil.la/737852#c6.\n    // Here, we use textBaseline = 'middle' and draw the text at exactly\n    // 0.5 * fontSize lower.\n    fctx.fillStyle = '#000';\n    fctx.textBaseline = 'middle';\n    fctx.fillText(word, fillTextOffsetX * mu, (fillTextOffsetY + fontSize * 0.5) * mu);\n\n    // Get the pixels of the text\n    var imageData = fctx.getImageData(0, 0, width, height).data;\n    if (exceedTime()) {\n      return false;\n    }\n    if (debug) {\n      // Draw the box of the original estimation\n      fctx.strokeRect(fillTextOffsetX * mu, fillTextOffsetY, fw * mu, fh * mu);\n      fctx.restore();\n    }\n\n    // Read the pixels and save the information to the occupied array\n    var occupied = [];\n    var gx = cgw,\n      gy,\n      x,\n      y;\n    var bounds = [cgh / 2, cgw / 2, cgh / 2, cgw / 2];\n    while (gx--) {\n      gy = cgh;\n      while (gy--) {\n        y = g;\n        singleGridLoop: {\n          while (y--) {\n            x = g;\n            while (x--) {\n              if (imageData[((gy * g + y) * width + (gx * g + x)) * 4 + 3]) {\n                occupied.push([gx, gy]);\n                if (gx < bounds[3]) {\n                  bounds[3] = gx;\n                }\n                if (gx > bounds[1]) {\n                  bounds[1] = gx;\n                }\n                if (gy < bounds[0]) {\n                  bounds[0] = gy;\n                }\n                if (gy > bounds[2]) {\n                  bounds[2] = gy;\n                }\n                if (debug) {\n                  fctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                  fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n                }\n                break singleGridLoop;\n              }\n            }\n          }\n          if (debug) {\n            fctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n            fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n          }\n        }\n      }\n    }\n    if (debug) {\n      fctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\n      fctx.fillRect(bounds[3] * g, bounds[0] * g, (bounds[1] - bounds[3] + 1) * g, (bounds[2] - bounds[0] + 1) * g);\n    }\n\n    // Return information needed to create the text on the real canvas\n    return {\n      mu: mu,\n      occupied: occupied,\n      bounds: bounds,\n      gw: cgw,\n      gh: cgh,\n      fillTextOffsetX: fillTextOffsetX,\n      fillTextOffsetY: fillTextOffsetY,\n      fillTextWidth: fw,\n      fillTextHeight: fh,\n      fontSize: fontSize\n    };\n  };\n\n  /* Determine if there is room available in the given dimension */\n  var canFitText = function canFitText(gx, gy, gw, gh, occupied) {\n    // Go through the occupied points,\n    // return false if the space is not available.\n    var i = occupied.length;\n    while (i--) {\n      var px = gx + occupied[i][0];\n      var py = gy + occupied[i][1];\n      if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n        if (!settings.drawOutOfBound) {\n          return false;\n        }\n        continue;\n      }\n      if (!grid[px][py]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /* Actually draw the text on the grid */\n  var drawText = function drawText(gx, gy, info, word, weight, distance, theta, rotateDeg, attributes) {\n    var fontSize = info.fontSize;\n    var color;\n    if (getTextColor) {\n      color = getTextColor(word, weight, fontSize, distance, theta);\n    } else {\n      color = settings.color;\n    }\n    var classes;\n    if (getTextClasses) {\n      classes = getTextClasses(word, weight, fontSize, distance, theta);\n    } else {\n      classes = settings.classes;\n    }\n    var dimension;\n    var bounds = info.bounds;\n    dimension = {\n      x: (gx + bounds[3]) * g,\n      y: (gy + bounds[0]) * g,\n      w: (bounds[1] - bounds[3] + 1) * g,\n      h: (bounds[2] - bounds[0] + 1) * g\n    };\n    elements.forEach(function (el) {\n      if (el.getContext) {\n        var ctx = el.getContext('2d');\n        var mu = info.mu;\n\n        // Save the current state before messing it\n        ctx.save();\n        ctx.scale(1 / mu, 1 / mu);\n        ctx.font = settings.fontWeight + ' ' + (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n        ctx.fillStyle = color;\n\n        // Translate the canvas position to the origin coordinate of where\n        // the text should be put.\n        ctx.translate((gx + info.gw / 2) * g * mu, (gy + info.gh / 2) * g * mu);\n        if (rotateDeg !== 0) {\n          ctx.rotate(-rotateDeg);\n        }\n\n        // Finally, fill the text.\n\n        // XXX: We cannot because textBaseline = 'top' here because\n        // Firefox and Chrome uses different default line-height for canvas.\n        // Please read https://bugzil.la/737852#c6.\n        // Here, we use textBaseline = 'middle' and draw the text at exactly\n        // 0.5 * fontSize lower.\n        ctx.textBaseline = 'middle';\n        ctx.fillText(word, info.fillTextOffsetX * mu, (info.fillTextOffsetY + fontSize * 0.5) * mu);\n\n        // The below box is always matches how <span>s are positioned\n        /* ctx.strokeRect(info.fillTextOffsetX, info.fillTextOffsetY,\n          info.fillTextWidth, info.fillTextHeight); */\n\n        // Restore the state.\n        ctx.restore();\n      } else {\n        // drawText on DIV element\n        var span = document.createElement('span');\n        var transformRule = '';\n        transformRule = 'rotate(' + -rotateDeg / Math.PI * 180 + 'deg) ';\n        if (info.mu !== 1) {\n          transformRule += 'translateX(-' + info.fillTextWidth / 4 + 'px) ' + 'scale(' + 1 / info.mu + ')';\n        }\n        var styleRules = {\n          'position': 'absolute',\n          'display': 'block',\n          'font': settings.fontWeight + ' ' + fontSize * info.mu + 'px ' + settings.fontFamily,\n          'left': (gx + info.gw / 2) * g + info.fillTextOffsetX + 'px',\n          'top': (gy + info.gh / 2) * g + info.fillTextOffsetY + 'px',\n          'width': info.fillTextWidth + 'px',\n          'height': info.fillTextHeight + 'px',\n          'lineHeight': fontSize + 'px',\n          'whiteSpace': 'nowrap',\n          'transform': transformRule,\n          'webkitTransform': transformRule,\n          'msTransform': transformRule,\n          'transformOrigin': '50% 40%',\n          'webkitTransformOrigin': '50% 40%',\n          'msTransformOrigin': '50% 40%'\n        };\n        if (color) {\n          styleRules.color = color;\n        }\n        span.textContent = word;\n        for (var cssProp in styleRules) {\n          span.style[cssProp] = styleRules[cssProp];\n        }\n        if (attributes) {\n          for (var attribute in attributes) {\n            span.setAttribute(attribute, attributes[attribute]);\n          }\n        }\n        if (classes) {\n          span.className += classes;\n        }\n        el.appendChild(span);\n      }\n    });\n  };\n\n  /* Help function to updateGrid */\n  var fillGridAt = function fillGridAt(x, y, drawMask, dimension, item) {\n    if (x >= ngx || y >= ngy || x < 0 || y < 0) {\n      return;\n    }\n    grid[x][y] = false;\n    if (drawMask) {\n      var ctx = elements[0].getContext('2d');\n      ctx.fillRect(x * g, y * g, maskRectWidth, maskRectWidth);\n    }\n    if (interactive) {\n      infoGrid[x][y] = {\n        item: item,\n        dimension: dimension\n      };\n    }\n  };\n\n  /* Update the filling information of the given space with occupied points.\n     Draw the mask on the canvas if necessary. */\n  var updateGrid = function updateGrid(gx, gy, gw, gh, info, item) {\n    var occupied = info.occupied;\n    var drawMask = settings.drawMask;\n    var ctx;\n    if (drawMask) {\n      ctx = elements[0].getContext('2d');\n      ctx.save();\n      ctx.fillStyle = settings.maskColor;\n    }\n    var dimension;\n    if (interactive) {\n      var bounds = info.bounds;\n      dimension = {\n        x: (gx + bounds[3]) * g,\n        y: (gy + bounds[0]) * g,\n        w: (bounds[1] - bounds[3] + 1) * g,\n        h: (bounds[2] - bounds[0] + 1) * g\n      };\n    }\n    var i = occupied.length;\n    while (i--) {\n      var px = gx + occupied[i][0];\n      var py = gy + occupied[i][1];\n      if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n        continue;\n      }\n      fillGridAt(px, py, drawMask, dimension, item);\n    }\n    if (drawMask) {\n      ctx.restore();\n    }\n  };\n\n  /* putWord() processes each item on the list,\n     calculate it's size and determine it's position, and actually\n     put it on the canvas. */\n  var putWord = function putWord(item) {\n    var word, weight, attributes;\n    if (Array.isArray(item)) {\n      word = item[0];\n      weight = item[1];\n    } else {\n      word = item.word;\n      weight = item.weight;\n      attributes = item.attributes;\n    }\n    var rotateDeg = getRotateDeg();\n\n    // get info needed to put the text onto the canvas\n    var info = getTextInfo(word, weight, rotateDeg);\n\n    // not getting the info means we shouldn't be drawing this one.\n    if (!info) {\n      return false;\n    }\n    if (exceedTime()) {\n      return false;\n    }\n\n    // If drawOutOfBound is set to false,\n    // skip the loop if we have already know the bounding box of\n    // word is larger than the canvas.\n    if (!settings.drawOutOfBound) {\n      var bounds = info.bounds;\n      if (bounds[1] - bounds[3] + 1 > ngx || bounds[2] - bounds[0] + 1 > ngy) {\n        return false;\n      }\n    }\n\n    // Determine the position to put the text by\n    // start looking for the nearest points\n    var r = maxRadius + 1;\n    var tryToPutWordAtPoint = function (gxy) {\n      var gx = Math.floor(gxy[0] - info.gw / 2);\n      var gy = Math.floor(gxy[1] - info.gh / 2);\n      var gw = info.gw;\n      var gh = info.gh;\n\n      // If we cannot fit the text at this position, return false\n      // and go to the next position.\n      if (!canFitText(gx, gy, gw, gh, info.occupied)) {\n        return false;\n      }\n\n      // Actually put the text on the canvas\n      drawText(gx, gy, info, word, weight, maxRadius - r, gxy[2], rotateDeg, attributes);\n\n      // Mark the spaces on the grid as filled\n      updateGrid(gx, gy, gw, gh, info, item);\n      return {\n        gx: gx,\n        gy: gy,\n        rot: rotateDeg,\n        info: info\n      };\n    };\n    while (r--) {\n      var points = getPointsAtRadius(maxRadius - r);\n      if (settings.shuffle) {\n        points = [].concat(points);\n        shuffleArray(points);\n      }\n\n      // Try to fit the words by looking at each point.\n      // array.some() will stop and return true\n      // when putWordAtPoint() returns true.\n      for (var i = 0; i < points.length; i++) {\n        var res = tryToPutWordAtPoint(points[i]);\n        if (res) {\n          return res;\n        }\n      }\n\n      // var drawn = points.some(tryToPutWordAtPoint);\n      // if (drawn) {\n      //   // leave putWord() and return true\n      //   return true;\n      // }\n    }\n    // we tried all distances but text won't fit, return null\n    return null;\n  };\n\n  /* Send DOM event to all elements. Will stop sending event and return\n     if the previous one is canceled (for cancelable events). */\n  var sendEvent = function sendEvent(type, cancelable, detail) {\n    if (cancelable) {\n      return !elements.some(function (el) {\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(type, true, cancelable, detail || {});\n        return !el.dispatchEvent(evt);\n      }, this);\n    } else {\n      elements.forEach(function (el) {\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(type, true, cancelable, detail || {});\n        el.dispatchEvent(evt);\n      }, this);\n    }\n  };\n\n  /* Start drawing on a canvas */\n  var start = function start() {\n    // For dimensions, clearCanvas etc.,\n    // we only care about the first element.\n    var canvas = elements[0];\n    if (canvas.getContext) {\n      ngx = Math.ceil(canvas.width / g);\n      ngy = Math.ceil(canvas.height / g);\n    } else {\n      var rect = canvas.getBoundingClientRect();\n      ngx = Math.ceil(rect.width / g);\n      ngy = Math.ceil(rect.height / g);\n    }\n\n    // Sending a wordcloudstart event which cause the previous loop to stop.\n    // Do nothing if the event is canceled.\n    if (!sendEvent('wordcloudstart', true)) {\n      return;\n    }\n\n    // Determine the center of the word cloud\n    center = settings.origin ? [settings.origin[0] / g, settings.origin[1] / g] : [ngx / 2, ngy / 2];\n\n    // Maxium radius to look for space\n    maxRadius = Math.floor(Math.sqrt(ngx * ngx + ngy * ngy));\n\n    /* Clear the canvas only if the clearCanvas is set,\n       if not, update the grid to the current canvas state */\n    grid = [];\n    var gx, gy, i;\n    if (!canvas.getContext || settings.clearCanvas) {\n      elements.forEach(function (el) {\n        if (el.getContext) {\n          var ctx = el.getContext('2d');\n          ctx.fillStyle = settings.backgroundColor;\n          ctx.clearRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n          ctx.fillRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n        } else {\n          el.textContent = '';\n          el.style.backgroundColor = settings.backgroundColor;\n          el.style.position = 'relative';\n        }\n      });\n\n      /* fill the grid with empty state */\n      gx = ngx;\n      while (gx--) {\n        grid[gx] = [];\n        gy = ngy;\n        while (gy--) {\n          grid[gx][gy] = true;\n        }\n      }\n    } else {\n      /* Determine bgPixel by creating\n         another canvas and fill the specified background color. */\n      var bctx = document.createElement('canvas').getContext('2d');\n      bctx.fillStyle = settings.backgroundColor;\n      bctx.fillRect(0, 0, 1, 1);\n      var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n      /* Read back the pixels of the canvas we got to tell which part of the\n         canvas is empty.\n         (no clearCanvas only works with a canvas, not divs) */\n      var imageData = canvas.getContext('2d').getImageData(0, 0, ngx * g, ngy * g).data;\n      gx = ngx;\n      var x, y;\n      while (gx--) {\n        grid[gx] = [];\n        gy = ngy;\n        while (gy--) {\n          y = g;\n          singleGridLoop: while (y--) {\n            x = g;\n            while (x--) {\n              i = 4;\n              while (i--) {\n                if (imageData[((gy * g + y) * ngx * g + (gx * g + x)) * 4 + i] !== bgPixel[i]) {\n                  grid[gx][gy] = false;\n                  break singleGridLoop;\n                }\n              }\n            }\n          }\n          if (grid[gx][gy] !== false) {\n            grid[gx][gy] = true;\n          }\n        }\n      }\n      imageData = bctx = bgPixel = undefined;\n    }\n\n    // fill the infoGrid with empty state if we need it\n    if (settings.hover || settings.click) {\n      interactive = true;\n\n      /* fill the grid with empty state */\n      gx = ngx + 1;\n      while (gx--) {\n        infoGrid[gx] = [];\n      }\n      if (settings.hover) {\n        canvas.addEventListener('mousemove', wordcloudhover);\n      }\n      if (settings.click) {\n        canvas.addEventListener('click', wordcloudclick);\n        canvas.addEventListener('touchstart', wordcloudclick);\n        canvas.addEventListener('touchend', function (e) {\n          e.preventDefault();\n        });\n        canvas.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\n      }\n      canvas.addEventListener('wordcloudstart', function stopInteraction() {\n        canvas.removeEventListener('wordcloudstart', stopInteraction);\n        canvas.removeEventListener('mousemove', wordcloudhover);\n        canvas.removeEventListener('click', wordcloudclick);\n        hovered = undefined;\n      });\n    }\n    i = 0;\n    var loopingFunction, stoppingFunction;\n    var layouting = true;\n    if (!settings.layoutAnimation) {\n      loopingFunction = function (cb) {\n        cb();\n      };\n      stoppingFunction = function () {\n        layouting = false;\n      };\n    } else if (settings.wait !== 0) {\n      loopingFunction = window.setTimeout;\n      stoppingFunction = window.clearTimeout;\n    } else {\n      loopingFunction = window.setImmediate;\n      stoppingFunction = window.clearImmediate;\n    }\n    var addEventListener = function addEventListener(type, listener) {\n      elements.forEach(function (el) {\n        el.addEventListener(type, listener);\n      }, this);\n    };\n    var removeEventListener = function removeEventListener(type, listener) {\n      elements.forEach(function (el) {\n        el.removeEventListener(type, listener);\n      }, this);\n    };\n    var anotherWordCloudStart = function anotherWordCloudStart() {\n      removeEventListener('wordcloudstart', anotherWordCloudStart);\n      stoppingFunction(timer);\n    };\n    addEventListener('wordcloudstart', anotherWordCloudStart);\n\n    // At least wait the following code before call the first iteration.\n    var timer = (settings.layoutAnimation ? loopingFunction : setTimeout)(function loop() {\n      if (!layouting) {\n        return;\n      }\n      if (i >= settings.list.length) {\n        stoppingFunction(timer);\n        sendEvent('wordcloudstop', false);\n        removeEventListener('wordcloudstart', anotherWordCloudStart);\n        return;\n      }\n      escapeTime = new Date().getTime();\n      var drawn = putWord(settings.list[i]);\n      var canceled = !sendEvent('wordclouddrawn', true, {\n        item: settings.list[i],\n        drawn: drawn\n      });\n      if (exceedTime() || canceled) {\n        stoppingFunction(timer);\n        settings.abort();\n        sendEvent('wordcloudabort', false);\n        sendEvent('wordcloudstop', false);\n        removeEventListener('wordcloudstart', anotherWordCloudStart);\n        return;\n      }\n      i++;\n      timer = loopingFunction(loop, settings.wait);\n    }, settings.wait);\n  };\n\n  // All set, start the drawing\n  start();\n};\nWordCloud.isSupported = isSupported;\nWordCloud.minFontSize = minFontSize;\nexport default WordCloud;","map":{"version":3,"names":["window","setImmediate","setupSetImmediate","msSetImmediate","webkitSetImmediate","mozSetImmediate","oSetImmediate","setupSetZeroTimeout","postMessage","addEventListener","callbacks","undefined","message","setZeroTimeout","callback","id","length","push","toString","setZeroTimeoutMessage","evt","data","substr","stopImmediatePropagation","parseInt","clearImmediate","clearZeroTimeout","setImmediateFallback","fn","setTimeout","setupClearImmediate","msClearImmediate","webkitClearImmediate","mozClearImmediate","oClearImmediate","clearImmediateFallback","timer","clearTimeout","isSupported","canvas","document","createElement","getContext","ctx","getImageData","fillText","Array","prototype","some","minFontSize","getMinFontSize","size","hanWidth","mWidth","font","measureText","width","shuffleArray","arr","j","x","i","Math","floor","random","WordCloud","elements","options","isArray","forEach","el","getElementById","tagName","appendChild","settings","list","fontFamily","fontWeight","color","minSize","weightFactor","clearCanvas","backgroundColor","gridSize","drawOutOfBound","origin","drawMask","maskColor","maskGapWidth","layoutAnimation","wait","abortThreshold","abort","noop","minRotation","PI","maxRotation","rotationStep","shuffle","rotateRatio","shape","ellipticity","classes","hover","click","key","factor","pt","shapeCardioid","theta","sin","shapeSquare","thetaPrime","cos","shapeTriangle","sqrt","shapePentagon","shapeStar","max","g","maskRectWidth","rotationRange","abs","min","grid","ngx","ngy","center","maxRadius","escapeTime","getTextColor","random_hsl_color","toFixed","getRandomDarkColor","getRandomLightColor","getTextClasses","interactive","infoGrid","hovered","getInfoGridFromMouseTouchEvent","currentTarget","rect","getBoundingClientRect","clientX","clientY","touches","eventX","left","eventY","top","y","height","wordcloudhover","info","item","dimension","wordcloudclick","preventDefault","pointsAtRadius","getPointsAtRadius","radius","T","t","points","rx","exceedTime","Date","getTime","getRotateDeg","round","getTextInfo","word","weight","rotateDeg","debug","fontSize","mu","calculateScaleFactor","fcanvas","fctx","willReadFrequently","fw","fh","boxWidth","boxHeight","fgw","ceil","fgh","fillTextOffsetX","fillTextOffsetY","cgh","cgw","setAttribute","body","save","scale","translate","rotate","fillStyle","textBaseline","imageData","strokeRect","restore","occupied","gx","gy","bounds","singleGridLoop","fillRect","gw","gh","fillTextWidth","fillTextHeight","canFitText","px","py","drawText","distance","attributes","w","h","span","transformRule","styleRules","textContent","cssProp","style","attribute","className","fillGridAt","updateGrid","putWord","r","tryToPutWordAtPoint","gxy","rot","concat","res","sendEvent","type","cancelable","detail","createEvent","initCustomEvent","dispatchEvent","start","clearRect","position","bctx","bgPixel","e","webkitTapHighlightColor","stopInteraction","removeEventListener","loopingFunction","stoppingFunction","layouting","cb","listener","anotherWordCloudStart","loop","drawn","canceled"],"sources":["F:/personalSpace/lx-bishe/movie_recommendation_system_vue/node_modules/echarts-wordcloud/src/layout.js"],"sourcesContent":["/*!\n * wordcloud2.js\n * http://timdream.org/wordcloud2.js/\n *\n * Copyright 2011 - 2013 Tim Chien\n * Released under the MIT license\n */\n\n'use strict';\n\n// setImmediate\nif (!window.setImmediate) {\n  window.setImmediate = (function setupSetImmediate() {\n    return window.msSetImmediate ||\n    window.webkitSetImmediate ||\n    window.mozSetImmediate ||\n    window.oSetImmediate ||\n    (function setupSetZeroTimeout() {\n      if (!window.postMessage || !window.addEventListener) {\n        return null;\n      }\n\n      var callbacks = [undefined];\n      var message = 'zero-timeout-message';\n\n      // Like setTimeout, but only takes a function argument.  There's\n      // no time argument (always zero) and no arguments (you have to\n      // use a closure).\n      var setZeroTimeout = function setZeroTimeout(callback) {\n        var id = callbacks.length;\n        callbacks.push(callback);\n        window.postMessage(message + id.toString(36), '*');\n\n        return id;\n      };\n\n      window.addEventListener('message', function setZeroTimeoutMessage(evt) {\n        // Skipping checking event source, retarded IE confused this window\n        // object with another in the presence of iframe\n        if (typeof evt.data !== 'string' ||\n            evt.data.substr(0, message.length) !== message/* ||\n            evt.source !== window */) {\n          return;\n        }\n\n        evt.stopImmediatePropagation();\n\n        var id = parseInt(evt.data.substr(message.length), 36);\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id]();\n        callbacks[id] = undefined;\n      }, true);\n\n      /* specify clearImmediate() here since we need the scope */\n      window.clearImmediate = function clearZeroTimeout(id) {\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id] = undefined;\n      };\n\n      return setZeroTimeout;\n    })() ||\n    // fallback\n    function setImmediateFallback(fn) {\n      window.setTimeout(fn, 0);\n    };\n  })();\n}\n\nif (!window.clearImmediate) {\n  window.clearImmediate = (function setupClearImmediate() {\n    return window.msClearImmediate ||\n    window.webkitClearImmediate ||\n    window.mozClearImmediate ||\n    window.oClearImmediate ||\n    // \"clearZeroTimeout\" is implement on the previous block ||\n    // fallback\n    function clearImmediateFallback(timer) {\n      window.clearTimeout(timer);\n    };\n  })();\n}\n\n  // Check if WordCloud can run on this browser\n  var isSupported = (function isSupported() {\n    var canvas = document.createElement('canvas');\n    if (!canvas || !canvas.getContext) {\n      return false;\n    }\n\n    var ctx = canvas.getContext('2d');\n    if (!ctx.getImageData) {\n      return false;\n    }\n    if (!ctx.fillText) {\n      return false;\n    }\n\n    if (!Array.prototype.some) {\n      return false;\n    }\n    if (!Array.prototype.push) {\n      return false;\n    }\n\n    return true;\n  }());\n\n  // Find out if the browser impose minium font size by\n  // drawing small texts on a canvas and measure it's width.\n  var minFontSize = (function getMinFontSize() {\n    if (!isSupported) {\n      return;\n    }\n\n    var ctx = document.createElement('canvas').getContext('2d');\n\n    // start from 20\n    var size = 20;\n\n    // two sizes to measure\n    var hanWidth, mWidth;\n\n    while (size) {\n      ctx.font = size.toString(10) + 'px sans-serif';\n      if ((ctx.measureText('\\uFF37').width === hanWidth) &&\n          (ctx.measureText('m').width) === mWidth) {\n        return (size + 1);\n      }\n\n      hanWidth = ctx.measureText('\\uFF37').width;\n      mWidth = ctx.measureText('m').width;\n\n      size--;\n    }\n\n    return 0;\n  })();\n\n  // Based on http://jsfromhell.com/array/shuffle\n  var shuffleArray = function shuffleArray(arr) {\n    for (var j, x, i = arr.length; i;\n      j = Math.floor(Math.random() * i),\n      x = arr[--i], arr[i] = arr[j],\n      arr[j] = x) {}\n    return arr;\n  };\n\n  var WordCloud = function WordCloud(elements, options) {\n    if (!isSupported) {\n      return;\n    }\n\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n\n    elements.forEach(function(el, i) {\n      if (typeof el === 'string') {\n        elements[i] = document.getElementById(el);\n        if (!elements[i]) {\n          throw 'The element id specified is not found.';\n        }\n      } else if (!el.tagName && !el.appendChild) {\n        throw 'You must pass valid HTML elements, or ID of the element.';\n      }\n    });\n\n    /* Default values to be overwritten by options object */\n    var settings = {\n      list: [],\n      fontFamily: '\"Trebuchet MS\", \"Heiti TC\", \"微軟正黑體\", ' +\n                  '\"Arial Unicode MS\", \"Droid Fallback Sans\", sans-serif',\n      fontWeight: 'normal',\n      color: 'random-dark',\n      minSize: 0, // 0 to disable\n      weightFactor: 1,\n      clearCanvas: true,\n      backgroundColor: '#fff',  // opaque white = rgba(255, 255, 255, 1)\n\n      gridSize: 8,\n      drawOutOfBound: false,\n      origin: null,\n\n      drawMask: false,\n      maskColor: 'rgba(255,0,0,0.3)',\n      maskGapWidth: 0.3,\n\n      layoutAnimation: true,\n\n      wait: 0,\n      abortThreshold: 0, // disabled\n      abort: function noop() {},\n\n      minRotation: - Math.PI / 2,\n      maxRotation: Math.PI / 2,\n      rotationStep: 0.1,\n\n      shuffle: true,\n      rotateRatio: 0.1,\n\n      shape: 'circle',\n      ellipticity: 0.65,\n\n      classes: null,\n\n      hover: null,\n      click: null\n    };\n\n    if (options) {\n      for (var key in options) {\n        if (key in settings) {\n          settings[key] = options[key];\n        }\n      }\n    }\n\n    /* Convert weightFactor into a function */\n    if (typeof settings.weightFactor !== 'function') {\n      var factor = settings.weightFactor;\n      settings.weightFactor = function weightFactor(pt) {\n        return pt * factor; //in px\n      };\n    }\n\n    /* Convert shape into a function */\n    if (typeof settings.shape !== 'function') {\n      switch (settings.shape) {\n        case 'circle':\n        /* falls through */\n        default:\n          // 'circle' is the default and a shortcut in the code loop.\n          settings.shape = 'circle';\n          break;\n\n        case 'cardioid':\n          settings.shape = function shapeCardioid(theta) {\n            return 1 - Math.sin(theta);\n          };\n          break;\n\n        /*\n        To work out an X-gon, one has to calculate \"m\",\n        where 1/(cos(2*PI/X)+m*sin(2*PI/X)) = 1/(cos(0)+m*sin(0))\n        http://www.wolframalpha.com/input/?i=1%2F%28cos%282*PI%2FX%29%2Bm*sin%28\n        2*PI%2FX%29%29+%3D+1%2F%28cos%280%29%2Bm*sin%280%29%29\n        Copy the solution into polar equation r = 1/(cos(t') + m*sin(t'))\n        where t' equals to mod(t, 2PI/X);\n        */\n\n        case 'diamond':\n        case 'square':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+PI%2F2%29%29%2Bsin%28mod+%28t%2C+PI%2F2%29%29%29%2C+t+%3D\n          // +0+..+2*PI\n          settings.shape = function shapeSquare(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 4);\n            return 1 / (Math.cos(thetaPrime) + Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle-forward':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+2*PI%2F3%29%29%2Bsqrt%283%29sin%28mod+%28t%2C+2*PI%2F3%29\n          // %29%29%2C+t+%3D+0+..+2*PI\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle':\n        case 'triangle-upright':\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = (theta + Math.PI * 3 / 2) % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'pentagon':\n          settings.shape = function shapePentagon(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 5);\n            return 1 / (Math.cos(thetaPrime) +\n                        0.726543 * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'star':\n          settings.shape = function shapeStar(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 10);\n            if ((theta + 0.955) % (2 * Math.PI / 5) - (2 * Math.PI / 10) >= 0) {\n              return 1 / (Math.cos((2 * Math.PI / 10) - thetaPrime) +\n                          3.07768 * Math.sin((2 * Math.PI / 10) - thetaPrime));\n            } else {\n              return 1 / (Math.cos(thetaPrime) +\n                          3.07768 * Math.sin(thetaPrime));\n            }\n          };\n          break;\n      }\n    }\n\n    /* Make sure gridSize is a whole number and is not smaller than 4px */\n    settings.gridSize = Math.max(Math.floor(settings.gridSize), 4);\n\n    /* shorthand */\n    var g = settings.gridSize;\n    var maskRectWidth = g - settings.maskGapWidth;\n\n    /* normalize rotation settings */\n    var rotationRange = Math.abs(settings.maxRotation - settings.minRotation);\n    var minRotation = Math.min(settings.maxRotation, settings.minRotation);\n    var rotationStep = settings.rotationStep;\n\n    /* information/object available to all functions, set when start() */\n    var grid, // 2d array containing filling information\n      ngx, ngy, // width and height of the grid\n      center, // position of the center of the cloud\n      maxRadius;\n\n    /* timestamp for measuring each putWord() action */\n    var escapeTime;\n\n    /* function for getting the color of the text */\n    var getTextColor;\n    function random_hsl_color(min, max) {\n      return 'hsl(' +\n        (Math.random() * 360).toFixed() + ',' +\n        (Math.random() * 30 + 70).toFixed() + '%,' +\n        (Math.random() * (max - min) + min).toFixed() + '%)';\n    }\n    switch (settings.color) {\n      case 'random-dark':\n        getTextColor = function getRandomDarkColor() {\n          return random_hsl_color(10, 50);\n        };\n        break;\n\n      case 'random-light':\n        getTextColor = function getRandomLightColor() {\n          return random_hsl_color(50, 90);\n        };\n        break;\n\n      default:\n        if (typeof settings.color === 'function') {\n          getTextColor = settings.color;\n        }\n        break;\n    }\n\n    /* function for getting the classes of the text */\n    var getTextClasses = null;\n    if (typeof settings.classes === 'function') {\n      getTextClasses = settings.classes;\n    }\n\n    /* Interactive */\n    var interactive = false;\n    var infoGrid = [];\n    var hovered;\n\n    var getInfoGridFromMouseTouchEvent =\n    function getInfoGridFromMouseTouchEvent(evt) {\n      var canvas = evt.currentTarget;\n      var rect = canvas.getBoundingClientRect();\n      var clientX;\n      var clientY;\n      /** Detect if touches are available */\n      if (evt.touches) {\n        clientX = evt.touches[0].clientX;\n        clientY = evt.touches[0].clientY;\n      } else {\n        clientX = evt.clientX;\n        clientY = evt.clientY;\n      }\n      var eventX = clientX - rect.left;\n      var eventY = clientY - rect.top;\n\n      var x = Math.floor(eventX * ((canvas.width / rect.width) || 1) / g);\n      var y = Math.floor(eventY * ((canvas.height / rect.height) || 1) / g);\n\n      return infoGrid[x][y];\n    };\n\n    var wordcloudhover = function wordcloudhover(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n\n      if (hovered === info) {\n        return;\n      }\n\n      hovered = info;\n      if (!info) {\n        settings.hover(undefined, undefined, evt);\n\n        return;\n      }\n\n      settings.hover(info.item, info.dimension, evt);\n\n    };\n\n    var wordcloudclick = function wordcloudclick(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n      if (!info) {\n        return;\n      }\n\n      settings.click(info.item, info.dimension, evt);\n      evt.preventDefault();\n    };\n\n    /* Get points on the grid for a given radius away from the center */\n    var pointsAtRadius = [];\n    var getPointsAtRadius = function getPointsAtRadius(radius) {\n      if (pointsAtRadius[radius]) {\n        return pointsAtRadius[radius];\n      }\n\n      // Look for these number of points on each radius\n      var T = radius * 8;\n\n      // Getting all the points at this radius\n      var t = T;\n      var points = [];\n\n      if (radius === 0) {\n        points.push([center[0], center[1], 0]);\n      }\n\n      while (t--) {\n        // distort the radius to put the cloud in shape\n        var rx = 1;\n        if (settings.shape !== 'circle') {\n          rx = settings.shape(t / T * 2 * Math.PI); // 0 to 1\n        }\n\n        // Push [x, y, t]; t is used solely for getTextColor()\n        points.push([\n          center[0] + radius * rx * Math.cos(-t / T * 2 * Math.PI),\n          center[1] + radius * rx * Math.sin(-t / T * 2 * Math.PI) *\n            settings.ellipticity,\n          t / T * 2 * Math.PI]);\n      }\n\n      pointsAtRadius[radius] = points;\n      return points;\n    };\n\n    /* Return true if we had spent too much time */\n    var exceedTime = function exceedTime() {\n      return ((settings.abortThreshold > 0) &&\n        ((new Date()).getTime() - escapeTime > settings.abortThreshold));\n    };\n\n    /* Get the deg of rotation according to settings, and luck. */\n    var getRotateDeg = function getRotateDeg() {\n      if (settings.rotateRatio === 0) {\n        return 0;\n      }\n\n      if (Math.random() > settings.rotateRatio) {\n        return 0;\n      }\n\n      if (rotationRange === 0) {\n        return minRotation;\n      }\n\n      return minRotation + Math.round(Math.random() * rotationRange / rotationStep) * rotationStep;\n    };\n\n    var getTextInfo = function getTextInfo(word, weight, rotateDeg) {\n      // calculate the acutal font size\n      // fontSize === 0 means weightFactor function wants the text skipped,\n      // and size < minSize means we cannot draw the text.\n      var debug = false;\n      var fontSize = settings.weightFactor(weight);\n      if (fontSize <= settings.minSize) {\n        return false;\n      }\n\n      // Scale factor here is to make sure fillText is not limited by\n      // the minium font size set by browser.\n      // It will always be 1 or 2n.\n      var mu = 1;\n      if (fontSize < minFontSize) {\n        mu = (function calculateScaleFactor() {\n          var mu = 2;\n          while (mu * fontSize < minFontSize) {\n            mu += 2;\n          }\n          return mu;\n        })();\n      }\n\n      var fcanvas = document.createElement('canvas');\n      var fctx = fcanvas.getContext('2d', { willReadFrequently: true });\n\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Estimate the dimension of the text with measureText().\n      var fw = fctx.measureText(word).width / mu;\n      var fh = Math.max(fontSize * mu,\n                        fctx.measureText('m').width,\n                        fctx.measureText('\\uFF37').width) / mu;\n\n      // Create a boundary box that is larger than our estimates,\n      // so text don't get cut of (it sill might)\n      var boxWidth = fw + fh * 2;\n      var boxHeight = fh * 3;\n      var fgw = Math.ceil(boxWidth / g);\n      var fgh = Math.ceil(boxHeight / g);\n      boxWidth = fgw * g;\n      boxHeight = fgh * g;\n\n      // Calculate the proper offsets to make the text centered at\n      // the preferred position.\n\n      // This is simply half of the width.\n      var fillTextOffsetX = - fw / 2;\n      // Instead of moving the box to the exact middle of the preferred\n      // position, for Y-offset we move 0.4 instead, so Latin alphabets look\n      // vertical centered.\n      var fillTextOffsetY = - fh * 0.4;\n\n      // Calculate the actual dimension of the canvas, considering the rotation.\n      var cgh = Math.ceil((boxWidth * Math.abs(Math.sin(rotateDeg)) +\n                           boxHeight * Math.abs(Math.cos(rotateDeg))) / g);\n      var cgw = Math.ceil((boxWidth * Math.abs(Math.cos(rotateDeg)) +\n                           boxHeight * Math.abs(Math.sin(rotateDeg))) / g);\n      var width = cgw * g;\n      var height = cgh * g;\n\n      fcanvas.setAttribute('width', width);\n      fcanvas.setAttribute('height', height);\n\n      if (debug) {\n        // Attach fcanvas to the DOM\n        document.body.appendChild(fcanvas);\n        // Save it's state so that we could restore and draw the grid correctly.\n        fctx.save();\n      }\n\n      // Scale the canvas with |mu|.\n      fctx.scale(1 / mu, 1 / mu);\n      fctx.translate(width * mu / 2, height * mu / 2);\n      fctx.rotate(- rotateDeg);\n\n      // Once the width/height is set, ctx info will be reset.\n      // Set it again here.\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Fill the text into the fcanvas.\n      // XXX: We cannot because textBaseline = 'top' here because\n      // Firefox and Chrome uses different default line-height for canvas.\n      // Please read https://bugzil.la/737852#c6.\n      // Here, we use textBaseline = 'middle' and draw the text at exactly\n      // 0.5 * fontSize lower.\n      fctx.fillStyle = '#000';\n      fctx.textBaseline = 'middle';\n      fctx.fillText(word, fillTextOffsetX * mu,\n                    (fillTextOffsetY + fontSize * 0.5) * mu);\n\n      // Get the pixels of the text\n      var imageData = fctx.getImageData(0, 0, width, height).data;\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      if (debug) {\n        // Draw the box of the original estimation\n        fctx.strokeRect(fillTextOffsetX * mu,\n                        fillTextOffsetY, fw * mu, fh * mu);\n        fctx.restore();\n      }\n\n      // Read the pixels and save the information to the occupied array\n      var occupied = [];\n      var gx = cgw, gy, x, y;\n      var bounds = [cgh / 2, cgw / 2, cgh / 2, cgw / 2];\n      while (gx--) {\n        gy = cgh;\n        while (gy--) {\n          y = g;\n          singleGridLoop: {\n            while (y--) {\n              x = g;\n              while (x--) {\n                if (imageData[((gy * g + y) * width +\n                               (gx * g + x)) * 4 + 3]) {\n                  occupied.push([gx, gy]);\n\n                  if (gx < bounds[3]) {\n                    bounds[3] = gx;\n                  }\n                  if (gx > bounds[1]) {\n                    bounds[1] = gx;\n                  }\n                  if (gy < bounds[0]) {\n                    bounds[0] = gy;\n                  }\n                  if (gy > bounds[2]) {\n                    bounds[2] = gy;\n                  }\n\n                  if (debug) {\n                    fctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                    fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n                  }\n                  break singleGridLoop;\n                }\n              }\n            }\n            if (debug) {\n              fctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n              fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n            }\n          }\n        }\n      }\n\n      if (debug) {\n        fctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\n        fctx.fillRect(bounds[3] * g,\n                      bounds[0] * g,\n                      (bounds[1] - bounds[3] + 1) * g,\n                      (bounds[2] - bounds[0] + 1) * g);\n      }\n\n      // Return information needed to create the text on the real canvas\n      return {\n        mu: mu,\n        occupied: occupied,\n        bounds: bounds,\n        gw: cgw,\n        gh: cgh,\n        fillTextOffsetX: fillTextOffsetX,\n        fillTextOffsetY: fillTextOffsetY,\n        fillTextWidth: fw,\n        fillTextHeight: fh,\n        fontSize: fontSize\n      };\n    };\n\n    /* Determine if there is room available in the given dimension */\n    var canFitText = function canFitText(gx, gy, gw, gh, occupied) {\n      // Go through the occupied points,\n      // return false if the space is not available.\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          if (!settings.drawOutOfBound) {\n            return false;\n          }\n          continue;\n        }\n\n        if (!grid[px][py]) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    /* Actually draw the text on the grid */\n    var drawText = function drawText(gx, gy, info, word, weight,\n                                     distance, theta, rotateDeg, attributes) {\n\n      var fontSize = info.fontSize;\n      var color;\n      if (getTextColor) {\n        color = getTextColor(word, weight, fontSize, distance, theta);\n      } else {\n        color = settings.color;\n      }\n\n      var classes;\n      if (getTextClasses) {\n        classes = getTextClasses(word, weight, fontSize, distance, theta);\n      } else {\n        classes = settings.classes;\n      }\n\n      var dimension;\n      var bounds = info.bounds;\n      dimension = {\n        x: (gx + bounds[3]) * g,\n        y: (gy + bounds[0]) * g,\n        w: (bounds[1] - bounds[3] + 1) * g,\n        h: (bounds[2] - bounds[0] + 1) * g\n      };\n\n      elements.forEach(function(el) {\n        if (el.getContext) {\n          var ctx = el.getContext('2d');\n          var mu = info.mu;\n\n          // Save the current state before messing it\n          ctx.save();\n          ctx.scale(1 / mu, 1 / mu);\n\n          ctx.font = settings.fontWeight + ' ' +\n                     (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n          ctx.fillStyle = color;\n\n          // Translate the canvas position to the origin coordinate of where\n          // the text should be put.\n          ctx.translate((gx + info.gw / 2) * g * mu,\n                        (gy + info.gh / 2) * g * mu);\n\n          if (rotateDeg !== 0) {\n            ctx.rotate(- rotateDeg);\n          }\n\n          // Finally, fill the text.\n\n          // XXX: We cannot because textBaseline = 'top' here because\n          // Firefox and Chrome uses different default line-height for canvas.\n          // Please read https://bugzil.la/737852#c6.\n          // Here, we use textBaseline = 'middle' and draw the text at exactly\n          // 0.5 * fontSize lower.\n          ctx.textBaseline = 'middle';\n          ctx.fillText(word, info.fillTextOffsetX * mu,\n                             (info.fillTextOffsetY + fontSize * 0.5) * mu);\n\n          // The below box is always matches how <span>s are positioned\n          /* ctx.strokeRect(info.fillTextOffsetX, info.fillTextOffsetY,\n            info.fillTextWidth, info.fillTextHeight); */\n\n          // Restore the state.\n          ctx.restore();\n        } else {\n          // drawText on DIV element\n          var span = document.createElement('span');\n          var transformRule = '';\n          transformRule = 'rotate(' + (- rotateDeg / Math.PI * 180) + 'deg) ';\n          if (info.mu !== 1) {\n            transformRule +=\n              'translateX(-' + (info.fillTextWidth / 4) + 'px) ' +\n              'scale(' + (1 / info.mu) + ')';\n          }\n          var styleRules = {\n            'position': 'absolute',\n            'display': 'block',\n            'font': settings.fontWeight + ' ' +\n                    (fontSize * info.mu) + 'px ' + settings.fontFamily,\n            'left': ((gx + info.gw / 2) * g + info.fillTextOffsetX) + 'px',\n            'top': ((gy + info.gh / 2) * g + info.fillTextOffsetY) + 'px',\n            'width': info.fillTextWidth + 'px',\n            'height': info.fillTextHeight + 'px',\n            'lineHeight': fontSize + 'px',\n            'whiteSpace': 'nowrap',\n            'transform': transformRule,\n            'webkitTransform': transformRule,\n            'msTransform': transformRule,\n            'transformOrigin': '50% 40%',\n            'webkitTransformOrigin': '50% 40%',\n            'msTransformOrigin': '50% 40%'\n          };\n          if (color) {\n            styleRules.color = color;\n          }\n          span.textContent = word;\n          for (var cssProp in styleRules) {\n            span.style[cssProp] = styleRules[cssProp];\n          }\n          if (attributes) {\n            for (var attribute in attributes) {\n              span.setAttribute(attribute, attributes[attribute]);\n            }\n          }\n          if (classes) {\n            span.className += classes;\n          }\n          el.appendChild(span);\n        }\n      });\n    };\n\n    /* Help function to updateGrid */\n    var fillGridAt = function fillGridAt(x, y, drawMask, dimension, item) {\n      if (x >= ngx || y >= ngy || x < 0 || y < 0) {\n        return;\n      }\n\n      grid[x][y] = false;\n\n      if (drawMask) {\n        var ctx = elements[0].getContext('2d');\n        ctx.fillRect(x * g, y * g, maskRectWidth, maskRectWidth);\n      }\n\n      if (interactive) {\n        infoGrid[x][y] = { item: item, dimension: dimension };\n      }\n    };\n\n    /* Update the filling information of the given space with occupied points.\n       Draw the mask on the canvas if necessary. */\n    var updateGrid = function updateGrid(gx, gy, gw, gh, info, item) {\n      var occupied = info.occupied;\n      var drawMask = settings.drawMask;\n      var ctx;\n      if (drawMask) {\n        ctx = elements[0].getContext('2d');\n        ctx.save();\n        ctx.fillStyle = settings.maskColor;\n      }\n\n      var dimension;\n      if (interactive) {\n        var bounds = info.bounds;\n        dimension = {\n          x: (gx + bounds[3]) * g,\n          y: (gy + bounds[0]) * g,\n          w: (bounds[1] - bounds[3] + 1) * g,\n          h: (bounds[2] - bounds[0] + 1) * g\n        };\n      }\n\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          continue;\n        }\n\n        fillGridAt(px, py, drawMask, dimension, item);\n      }\n\n      if (drawMask) {\n        ctx.restore();\n      }\n    };\n\n    /* putWord() processes each item on the list,\n       calculate it's size and determine it's position, and actually\n       put it on the canvas. */\n    var putWord = function putWord(item) {\n      var word, weight, attributes;\n      if (Array.isArray(item)) {\n        word = item[0];\n        weight = item[1];\n      } else {\n        word = item.word;\n        weight = item.weight;\n        attributes = item.attributes;\n      }\n      var rotateDeg = getRotateDeg();\n\n      // get info needed to put the text onto the canvas\n      var info = getTextInfo(word, weight, rotateDeg);\n\n      // not getting the info means we shouldn't be drawing this one.\n      if (!info) {\n        return false;\n      }\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      // If drawOutOfBound is set to false,\n      // skip the loop if we have already know the bounding box of\n      // word is larger than the canvas.\n      if (!settings.drawOutOfBound) {\n        var bounds = info.bounds;\n        if ((bounds[1] - bounds[3] + 1) > ngx ||\n          (bounds[2] - bounds[0] + 1) > ngy) {\n          return false;\n        }\n      }\n\n      // Determine the position to put the text by\n      // start looking for the nearest points\n      var r = maxRadius + 1;\n\n      var tryToPutWordAtPoint = function(gxy) {\n        var gx = Math.floor(gxy[0] - info.gw / 2);\n        var gy = Math.floor(gxy[1] - info.gh / 2);\n        var gw = info.gw;\n        var gh = info.gh;\n\n        // If we cannot fit the text at this position, return false\n        // and go to the next position.\n        if (!canFitText(gx, gy, gw, gh, info.occupied)) {\n          return false;\n        }\n\n        // Actually put the text on the canvas\n        drawText(gx, gy, info, word, weight,\n                 (maxRadius - r), gxy[2], rotateDeg, attributes);\n\n        // Mark the spaces on the grid as filled\n        updateGrid(gx, gy, gw, gh, info, item);\n\n        return {\n          gx: gx,\n          gy: gy,\n          rot: rotateDeg,\n          info: info\n        };\n      };\n\n      while (r--) {\n        var points = getPointsAtRadius(maxRadius - r);\n\n        if (settings.shuffle) {\n          points = [].concat(points);\n          shuffleArray(points);\n        }\n\n        // Try to fit the words by looking at each point.\n        // array.some() will stop and return true\n        // when putWordAtPoint() returns true.\n        for (var i = 0; i < points.length; i++) {\n          var res = tryToPutWordAtPoint(points[i]);\n          if (res) {\n            return res;\n          }\n        }\n\n        // var drawn = points.some(tryToPutWordAtPoint);\n        // if (drawn) {\n        //   // leave putWord() and return true\n        //   return true;\n        // }\n      }\n      // we tried all distances but text won't fit, return null\n      return null;\n    };\n\n    /* Send DOM event to all elements. Will stop sending event and return\n       if the previous one is canceled (for cancelable events). */\n    var sendEvent = function sendEvent(type, cancelable, detail) {\n      if (cancelable) {\n        return !elements.some(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          return !el.dispatchEvent(evt);\n        }, this);\n      } else {\n        elements.forEach(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          el.dispatchEvent(evt);\n        }, this);\n      }\n    };\n\n    /* Start drawing on a canvas */\n    var start = function start() {\n      // For dimensions, clearCanvas etc.,\n      // we only care about the first element.\n      var canvas = elements[0];\n\n      if (canvas.getContext) {\n        ngx = Math.ceil(canvas.width / g);\n        ngy = Math.ceil(canvas.height / g);\n      } else {\n        var rect = canvas.getBoundingClientRect();\n        ngx = Math.ceil(rect.width / g);\n        ngy = Math.ceil(rect.height / g);\n      }\n\n      // Sending a wordcloudstart event which cause the previous loop to stop.\n      // Do nothing if the event is canceled.\n      if (!sendEvent('wordcloudstart', true)) {\n        return;\n      }\n\n      // Determine the center of the word cloud\n      center = (settings.origin) ?\n        [settings.origin[0]/g, settings.origin[1]/g] :\n        [ngx / 2, ngy / 2];\n\n      // Maxium radius to look for space\n      maxRadius = Math.floor(Math.sqrt(ngx * ngx + ngy * ngy));\n\n      /* Clear the canvas only if the clearCanvas is set,\n         if not, update the grid to the current canvas state */\n      grid = [];\n\n      var gx, gy, i;\n      if (!canvas.getContext || settings.clearCanvas) {\n        elements.forEach(function(el) {\n          if (el.getContext) {\n            var ctx = el.getContext('2d');\n            ctx.fillStyle = settings.backgroundColor;\n            ctx.clearRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n            ctx.fillRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n          } else {\n            el.textContent = '';\n            el.style.backgroundColor = settings.backgroundColor;\n            el.style.position = 'relative';\n          }\n        });\n\n        /* fill the grid with empty state */\n        gx = ngx;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            grid[gx][gy] = true;\n          }\n        }\n      } else {\n        /* Determine bgPixel by creating\n           another canvas and fill the specified background color. */\n        var bctx = document.createElement('canvas').getContext('2d');\n\n        bctx.fillStyle = settings.backgroundColor;\n        bctx.fillRect(0, 0, 1, 1);\n        var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n        /* Read back the pixels of the canvas we got to tell which part of the\n           canvas is empty.\n           (no clearCanvas only works with a canvas, not divs) */\n        var imageData =\n          canvas.getContext('2d').getImageData(0, 0, ngx * g, ngy * g).data;\n\n        gx = ngx;\n        var x, y;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            y = g;\n            singleGridLoop: while (y--) {\n              x = g;\n              while (x--) {\n                i = 4;\n                while (i--) {\n                  if (imageData[((gy * g + y) * ngx * g +\n                                 (gx * g + x)) * 4 + i] !== bgPixel[i]) {\n                    grid[gx][gy] = false;\n                    break singleGridLoop;\n                  }\n                }\n              }\n            }\n            if (grid[gx][gy] !== false) {\n              grid[gx][gy] = true;\n            }\n          }\n        }\n\n        imageData = bctx = bgPixel = undefined;\n      }\n\n      // fill the infoGrid with empty state if we need it\n      if (settings.hover || settings.click) {\n\n        interactive = true;\n\n        /* fill the grid with empty state */\n        gx = ngx + 1;\n        while (gx--) {\n          infoGrid[gx] = [];\n        }\n\n        if (settings.hover) {\n          canvas.addEventListener('mousemove', wordcloudhover);\n        }\n\n        if (settings.click) {\n          canvas.addEventListener('click', wordcloudclick);\n          canvas.addEventListener('touchstart', wordcloudclick);\n          canvas.addEventListener('touchend', function (e) {\n            e.preventDefault();\n          });\n          canvas.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\n        }\n\n        canvas.addEventListener('wordcloudstart', function stopInteraction() {\n          canvas.removeEventListener('wordcloudstart', stopInteraction);\n\n          canvas.removeEventListener('mousemove', wordcloudhover);\n          canvas.removeEventListener('click', wordcloudclick);\n          hovered = undefined;\n        });\n      }\n\n      i = 0;\n      var loopingFunction, stoppingFunction;\n      var layouting = true;\n      if (!settings.layoutAnimation) {\n        loopingFunction = function (cb) {\n          cb();\n        }\n        stoppingFunction = function () {\n          layouting = false;\n        }\n      }\n      else if (settings.wait !== 0) {\n        loopingFunction = window.setTimeout;\n        stoppingFunction = window.clearTimeout;\n      } else {\n        loopingFunction = window.setImmediate;\n        stoppingFunction = window.clearImmediate;\n      }\n\n      var addEventListener = function addEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.addEventListener(type, listener);\n        }, this);\n      };\n\n      var removeEventListener = function removeEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.removeEventListener(type, listener);\n        }, this);\n      };\n\n      var anotherWordCloudStart = function anotherWordCloudStart() {\n        removeEventListener('wordcloudstart', anotherWordCloudStart);\n        stoppingFunction(timer);\n      };\n\n      addEventListener('wordcloudstart', anotherWordCloudStart);\n\n      // At least wait the following code before call the first iteration.\n      var timer = (settings.layoutAnimation ? loopingFunction : setTimeout)(function loop() {\n        if (!layouting) {\n          return;\n        }\n        if (i >= settings.list.length) {\n          stoppingFunction(timer);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n\n          return;\n        }\n        escapeTime = (new Date()).getTime();\n        var drawn = putWord(settings.list[i]);\n        var canceled = !sendEvent('wordclouddrawn', true, {\n          item: settings.list[i], drawn: drawn });\n        if (exceedTime() || canceled) {\n          stoppingFunction(timer);\n          settings.abort();\n          sendEvent('wordcloudabort', false);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n          return;\n        }\n        i++;\n        timer = loopingFunction(loop, settings.wait);\n      }, settings.wait);\n    };\n\n    // All set, start the drawing\n    start();\n  };\n\n  WordCloud.isSupported = isSupported;\n  WordCloud.minFontSize = minFontSize;\n\n  export default WordCloud;"],"mappings":"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"},"metadata":{},"sourceType":"module"}